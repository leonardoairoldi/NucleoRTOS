
NUCLEOG491RE-EX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f34  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08007114  08007114  00008114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007294  08007294  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007294  08007294  00008294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800729c  0800729c  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800729c  0800729c  0000829c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072a0  080072a0  000082a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080072a4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000126c  2000006c  08007310  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012d8  08007310  000092d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e29  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a0d  00000000  00000000  00022ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  000268d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001216  00000000  00000000  00028028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000469b  00000000  00000000  0002923e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a400  00000000  00000000  0002d8d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8075  00000000  00000000  00047cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011fd4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b80  00000000  00000000  0011fd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00126914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080070fc 	.word	0x080070fc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	080070fc 	.word	0x080070fc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fbff 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f831 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f8c5 	bl	800074c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005c2:	f000 f879 	bl	80006b8 <MX_LPUART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Default */
  osThreadDef(Default, Default_task, osPriorityIdle, 0, 128);
 80005c6:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <main+0x60>)
 80005c8:	f107 0414 	add.w	r4, r7, #20
 80005cc:	461d      	mov	r5, r3
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	682b      	ldr	r3, [r5, #0]
 80005d4:	6023      	str	r3, [r4, #0]
  DefaultHandle = osThreadCreate(osThread(Default), NULL);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 f986 	bl	80038ee <osThreadCreate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000614 <main+0x64>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of HighPrio */
  osThreadDef(HighPrio, HighPrio_task, osPriorityHigh, 0, 128);
 80005e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <main+0x68>)
 80005ea:	463c      	mov	r4, r7
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	682b      	ldr	r3, [r5, #0]
 80005f4:	6023      	str	r3, [r4, #0]
  HighPrioHandle = osThreadCreate(osThread(HighPrio), NULL);
 80005f6:	463b      	mov	r3, r7
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 f977 	bl	80038ee <osThreadCreate>
 8000600:	4603      	mov	r3, r0
 8000602:	4a06      	ldr	r2, [pc, #24]	@ (800061c <main+0x6c>)
 8000604:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000606:	f003 f96b 	bl	80038e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060a:	bf00      	nop
 800060c:	e7fd      	b.n	800060a <main+0x5a>
 800060e:	bf00      	nop
 8000610:	0800711c 	.word	0x0800711c
 8000614:	2000011c 	.word	0x2000011c
 8000618:	0800713c 	.word	0x0800713c
 800061c:	20000120 	.word	0x20000120

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	2238      	movs	r2, #56	@ 0x38
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 fe65 	bl	80062fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000642:	2000      	movs	r0, #0
 8000644:	f000 feae 	bl	80013a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000652:	2340      	movs	r3, #64	@ 0x40
 8000654:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800065e:	2304      	movs	r3, #4
 8000660:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000662:	2355      	movs	r3, #85	@ 0x55
 8000664:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0318 	add.w	r3, r7, #24
 8000676:	4618      	mov	r0, r3
 8000678:	f000 ff48 	bl	800150c <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000682:	f000 f975 	bl	8000970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2303      	movs	r3, #3
 800068c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2104      	movs	r1, #4
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fa46 	bl	8001b30 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006aa:	f000 f961 	bl	8000970 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	@ 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006bc:	4b21      	ldr	r3, [pc, #132]	@ (8000744 <MX_LPUART1_UART_Init+0x8c>)
 80006be:	4a22      	ldr	r2, [pc, #136]	@ (8000748 <MX_LPUART1_UART_Init+0x90>)
 80006c0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006c2:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <MX_LPUART1_UART_Init+0x8c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <MX_LPUART1_UART_Init+0x8c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000744 <MX_LPUART1_UART_Init+0x8c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <MX_LPUART1_UART_Init+0x8c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b19      	ldr	r3, [pc, #100]	@ (8000744 <MX_LPUART1_UART_Init+0x8c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <MX_LPUART1_UART_Init+0x8c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e8:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <MX_LPUART1_UART_Init+0x8c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <MX_LPUART1_UART_Init+0x8c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f4:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <MX_LPUART1_UART_Init+0x8c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006fa:	4812      	ldr	r0, [pc, #72]	@ (8000744 <MX_LPUART1_UART_Init+0x8c>)
 80006fc:	f002 f9dc 	bl	8002ab8 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000706:	f000 f933 	bl	8000970 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800070a:	2100      	movs	r1, #0
 800070c:	480d      	ldr	r0, [pc, #52]	@ (8000744 <MX_LPUART1_UART_Init+0x8c>)
 800070e:	f003 f805 	bl	800371c <HAL_UARTEx_SetTxFifoThreshold>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000718:	f000 f92a 	bl	8000970 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800071c:	2100      	movs	r1, #0
 800071e:	4809      	ldr	r0, [pc, #36]	@ (8000744 <MX_LPUART1_UART_Init+0x8c>)
 8000720:	f003 f83a 	bl	8003798 <HAL_UARTEx_SetRxFifoThreshold>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800072a:	f000 f921 	bl	8000970 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_LPUART1_UART_Init+0x8c>)
 8000730:	f002 ffbb 	bl	80036aa <HAL_UARTEx_DisableFifoMode>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800073a:	f000 f919 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000088 	.word	0x20000088
 8000748:	40008000 	.word	0x40008000

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	@ 0x28
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b2f      	ldr	r3, [pc, #188]	@ (8000820 <MX_GPIO_Init+0xd4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	4a2e      	ldr	r2, [pc, #184]	@ (8000820 <MX_GPIO_Init+0xd4>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076e:	4b2c      	ldr	r3, [pc, #176]	@ (8000820 <MX_GPIO_Init+0xd4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077a:	4b29      	ldr	r3, [pc, #164]	@ (8000820 <MX_GPIO_Init+0xd4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	4a28      	ldr	r2, [pc, #160]	@ (8000820 <MX_GPIO_Init+0xd4>)
 8000780:	f043 0320 	orr.w	r3, r3, #32
 8000784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000786:	4b26      	ldr	r3, [pc, #152]	@ (8000820 <MX_GPIO_Init+0xd4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	f003 0320 	and.w	r3, r3, #32
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b23      	ldr	r3, [pc, #140]	@ (8000820 <MX_GPIO_Init+0xd4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	4a22      	ldr	r2, [pc, #136]	@ (8000820 <MX_GPIO_Init+0xd4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079e:	4b20      	ldr	r3, [pc, #128]	@ (8000820 <MX_GPIO_Init+0xd4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000820 <MX_GPIO_Init+0xd4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000820 <MX_GPIO_Init+0xd4>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <MX_GPIO_Init+0xd4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2120      	movs	r1, #32
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ca:	f000 fd95 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	480f      	ldr	r0, [pc, #60]	@ (8000824 <MX_GPIO_Init+0xd8>)
 80007e6:	f000 fc05 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ea:	2320      	movs	r3, #32
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000804:	f000 fbf6 	bl	8000ff4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	2105      	movs	r1, #5
 800080c:	2028      	movs	r0, #40	@ 0x28
 800080e:	f000 fbc9 	bl	8000fa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000812:	2028      	movs	r0, #40	@ 0x28
 8000814:	f000 fbe0 	bl	8000fd8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000818:	bf00      	nop
 800081a:	3728      	adds	r7, #40	@ 0x28
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40021000 	.word	0x40021000
 8000824:	48000800 	.word	0x48000800

08000828 <Default_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Default_task */
void Default_task(void const * argument)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	for(uint8_t i = 0; i < 144; i++) {
 8000830:	2300      	movs	r3, #0
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e02b      	b.n	800088e <Default_task+0x66>
		vCells[i] = rand() % 3000 + 2000;
 8000836:	f005 fc1f 	bl	8006078 <rand>
 800083a:	4603      	mov	r3, r0
 800083c:	4a23      	ldr	r2, [pc, #140]	@ (80008cc <Default_task+0xa4>)
 800083e:	fb82 1203 	smull	r1, r2, r2, r3
 8000842:	1191      	asrs	r1, r2, #6
 8000844:	17da      	asrs	r2, r3, #31
 8000846:	1a8a      	subs	r2, r1, r2
 8000848:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800084c:	fb01 f202 	mul.w	r2, r1, r2
 8000850:	1a9a      	subs	r2, r3, r2
 8000852:	b292      	uxth	r2, r2
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	f502 62fa 	add.w	r2, r2, #2000	@ 0x7d0
 800085a:	b291      	uxth	r1, r2
 800085c:	4a1c      	ldr	r2, [pc, #112]	@ (80008d0 <Default_task+0xa8>)
 800085e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tCells[i] = rand() % 6000;
 8000862:	f005 fc09 	bl	8006078 <rand>
 8000866:	4603      	mov	r3, r0
 8000868:	4a18      	ldr	r2, [pc, #96]	@ (80008cc <Default_task+0xa4>)
 800086a:	fb82 1203 	smull	r1, r2, r2, r3
 800086e:	11d1      	asrs	r1, r2, #7
 8000870:	17da      	asrs	r2, r3, #31
 8000872:	1a8a      	subs	r2, r1, r2
 8000874:	f241 7170 	movw	r1, #6000	@ 0x1770
 8000878:	fb01 f202 	mul.w	r2, r1, r2
 800087c:	1a9a      	subs	r2, r3, r2
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	b291      	uxth	r1, r2
 8000882:	4a14      	ldr	r2, [pc, #80]	@ (80008d4 <Default_task+0xac>)
 8000884:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < 144; i++) {
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	3301      	adds	r3, #1
 800088c:	73fb      	strb	r3, [r7, #15]
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	2b8f      	cmp	r3, #143	@ 0x8f
 8000892:	d9d0      	bls.n	8000836 <Default_task+0xe>
	}
	current = rand() % 1000;
 8000894:	f005 fbf0 	bl	8006078 <rand>
 8000898:	4603      	mov	r3, r0
 800089a:	4a0f      	ldr	r2, [pc, #60]	@ (80008d8 <Default_task+0xb0>)
 800089c:	fb82 1203 	smull	r1, r2, r2, r3
 80008a0:	1191      	asrs	r1, r2, #6
 80008a2:	17da      	asrs	r2, r3, #31
 80008a4:	1a8a      	subs	r2, r1, r2
 80008a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008aa:	fb01 f202 	mul.w	r2, r1, r2
 80008ae:	1a9a      	subs	r2, r3, r2
 80008b0:	b292      	uxth	r2, r2
 80008b2:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <Default_task+0xb4>)
 80008b4:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008b6:	2120      	movs	r1, #32
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008bc:	f000 fd34 	bl	8001328 <HAL_GPIO_TogglePin>
    osDelay(300);
 80008c0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80008c4:	f003 f83a 	bl	800393c <osDelay>
  {
 80008c8:	e7b2      	b.n	8000830 <Default_task+0x8>
 80008ca:	bf00      	nop
 80008cc:	057619f1 	.word	0x057619f1
 80008d0:	20000124 	.word	0x20000124
 80008d4:	20000244 	.word	0x20000244
 80008d8:	10624dd3 	.word	0x10624dd3
 80008dc:	20000364 	.word	0x20000364

080008e0 <HighPrio_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HighPrio_task */
void HighPrio_task(void const * argument)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HighPrio_task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008e8:	2120      	movs	r1, #32
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ee:	f000 fd1b 	bl	8001328 <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit(&hlpuart1, "++++++++", 8, 500);
 80008f2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80008f6:	2208      	movs	r2, #8
 80008f8:	490f      	ldr	r1, [pc, #60]	@ (8000938 <HighPrio_task+0x58>)
 80008fa:	4810      	ldr	r0, [pc, #64]	@ (800093c <HighPrio_task+0x5c>)
 80008fc:	f002 f92c 	bl	8002b58 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)vCells, 144*2, 500);
 8000900:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000904:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8000908:	490d      	ldr	r1, [pc, #52]	@ (8000940 <HighPrio_task+0x60>)
 800090a:	480c      	ldr	r0, [pc, #48]	@ (800093c <HighPrio_task+0x5c>)
 800090c:	f002 f924 	bl	8002b58 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)tCells, 144*2, 500);
 8000910:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000914:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8000918:	490a      	ldr	r1, [pc, #40]	@ (8000944 <HighPrio_task+0x64>)
 800091a:	4808      	ldr	r0, [pc, #32]	@ (800093c <HighPrio_task+0x5c>)
 800091c:	f002 f91c 	bl	8002b58 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)&current, 2, 500);
 8000920:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000924:	2202      	movs	r2, #2
 8000926:	4908      	ldr	r1, [pc, #32]	@ (8000948 <HighPrio_task+0x68>)
 8000928:	4804      	ldr	r0, [pc, #16]	@ (800093c <HighPrio_task+0x5c>)
 800092a:	f002 f915 	bl	8002b58 <HAL_UART_Transmit>
	  osDelay(200);
 800092e:	20c8      	movs	r0, #200	@ 0xc8
 8000930:	f003 f804 	bl	800393c <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000934:	bf00      	nop
 8000936:	e7d7      	b.n	80008e8 <HighPrio_task+0x8>
 8000938:	08007150 	.word	0x08007150
 800093c:	20000088 	.word	0x20000088
 8000940:	20000124 	.word	0x20000124
 8000944:	20000244 	.word	0x20000244
 8000948:	20000364 	.word	0x20000364

0800094c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a04      	ldr	r2, [pc, #16]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d101      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095e:	f000 fa4b 	bl	8000df8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40013400 	.word	0x40013400

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <Error_Handler+0x8>

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <HAL_MspInit+0x50>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000986:	4a11      	ldr	r2, [pc, #68]	@ (80009cc <HAL_MspInit+0x50>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6613      	str	r3, [r2, #96]	@ 0x60
 800098e:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <HAL_MspInit+0x50>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <HAL_MspInit+0x50>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099e:	4a0b      	ldr	r2, [pc, #44]	@ (80009cc <HAL_MspInit+0x50>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <HAL_MspInit+0x50>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	210f      	movs	r1, #15
 80009b6:	f06f 0001 	mvn.w	r0, #1
 80009ba:	f000 faf3 	bl	8000fa4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009be:	f000 fd95 	bl	80014ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b09e      	sub	sp, #120	@ 0x78
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2250      	movs	r2, #80	@ 0x50
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f005 fc84 	bl	80062fe <memset>
  if(huart->Instance==LPUART1)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000a78 <HAL_UART_MspInit+0xa8>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d136      	bne.n	8000a6e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a00:	2320      	movs	r3, #32
 8000a02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 fadd 	bl	8001fcc <HAL_RCCEx_PeriphCLKConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a18:	f7ff ffaa 	bl	8000970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <HAL_UART_MspInit+0xac>)
 8000a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a20:	4a16      	ldr	r2, [pc, #88]	@ (8000a7c <HAL_UART_MspInit+0xac>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000a28:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <HAL_UART_MspInit+0xac>)
 8000a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <HAL_UART_MspInit+0xac>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a38:	4a10      	ldr	r2, [pc, #64]	@ (8000a7c <HAL_UART_MspInit+0xac>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a40:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <HAL_UART_MspInit+0xac>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f000 fac3 	bl	8000ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a6e:	bf00      	nop
 8000a70:	3778      	adds	r7, #120	@ 0x78
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40008000 	.word	0x40008000
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08c      	sub	sp, #48	@ 0x30
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8000a90:	4b2c      	ldr	r3, [pc, #176]	@ (8000b44 <HAL_InitTick+0xc4>)
 8000a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a94:	4a2b      	ldr	r2, [pc, #172]	@ (8000b44 <HAL_InitTick+0xc4>)
 8000a96:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a9a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a9c:	4b29      	ldr	r3, [pc, #164]	@ (8000b44 <HAL_InitTick+0xc4>)
 8000a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa8:	f107 020c 	add.w	r2, r7, #12
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fa12 	bl	8001edc <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ab8:	f001 f9fa 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 8000abc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ac0:	4a21      	ldr	r2, [pc, #132]	@ (8000b48 <HAL_InitTick+0xc8>)
 8000ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac6:	0c9b      	lsrs	r3, r3, #18
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <HAL_InitTick+0xcc>)
 8000ace:	4a20      	ldr	r2, [pc, #128]	@ (8000b50 <HAL_InitTick+0xd0>)
 8000ad0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <HAL_InitTick+0xcc>)
 8000ad4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ad8:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8000ada:	4a1c      	ldr	r2, [pc, #112]	@ (8000b4c <HAL_InitTick+0xcc>)
 8000adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ade:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <HAL_InitTick+0xcc>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <HAL_InitTick+0xcc>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim8);
 8000aec:	4817      	ldr	r0, [pc, #92]	@ (8000b4c <HAL_InitTick+0xcc>)
 8000aee:	f001 fca9 	bl	8002444 <HAL_TIM_Base_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000af8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d11b      	bne.n	8000b38 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 8000b00:	4812      	ldr	r0, [pc, #72]	@ (8000b4c <HAL_InitTick+0xcc>)
 8000b02:	f001 fd01 	bl	8002508 <HAL_TIM_Base_Start_IT>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d111      	bne.n	8000b38 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM8 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8000b14:	202c      	movs	r0, #44	@ 0x2c
 8000b16:	f000 fa5f 	bl	8000fd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d808      	bhi.n	8000b32 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	202c      	movs	r0, #44	@ 0x2c
 8000b26:	f000 fa3d 	bl	8000fa4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <HAL_InitTick+0xd4>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	e002      	b.n	8000b38 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3730      	adds	r7, #48	@ 0x30
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40021000 	.word	0x40021000
 8000b48:	431bde83 	.word	0x431bde83
 8000b4c:	20000368 	.word	0x20000368
 8000b50:	40013400 	.word	0x40013400
 8000b54:	20000004 	.word	0x20000004

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <NMI_Handler+0x4>

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <MemManage_Handler+0x4>

08000b70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b92:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b96:	f000 fbe1 	bl	800135c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000ba4:	4802      	ldr	r0, [pc, #8]	@ (8000bb0 <TIM8_UP_IRQHandler+0x10>)
 8000ba6:	f001 fd1f 	bl	80025e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000368 	.word	0x20000368

08000bb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return 1;
 8000bb8:	2301      	movs	r3, #1
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_kill>:

int _kill(int pid, int sig)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bce:	f005 fc3b 	bl	8006448 <__errno>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2216      	movs	r2, #22
 8000bd6:	601a      	str	r2, [r3, #0]
  return -1;
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <_exit>:

void _exit (int status)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ffe7 	bl	8000bc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bf6:	bf00      	nop
 8000bf8:	e7fd      	b.n	8000bf6 <_exit+0x12>

08000bfa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e00a      	b.n	8000c22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c0c:	f3af 8000 	nop.w
 8000c10:	4601      	mov	r1, r0
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	60ba      	str	r2, [r7, #8]
 8000c18:	b2ca      	uxtb	r2, r1
 8000c1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	dbf0      	blt.n	8000c0c <_read+0x12>
  }

  return len;
 8000c2a:	687b      	ldr	r3, [r7, #4]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e009      	b.n	8000c5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1c5a      	adds	r2, r3, #1
 8000c4a:	60ba      	str	r2, [r7, #8]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3301      	adds	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dbf1      	blt.n	8000c46 <_write+0x12>
  }
  return len;
 8000c62:	687b      	ldr	r3, [r7, #4]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_close>:

int _close(int file)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c94:	605a      	str	r2, [r3, #4]
  return 0;
 8000c96:	2300      	movs	r3, #0
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <_isatty>:

int _isatty(int file)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cac:	2301      	movs	r3, #1
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	@ (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f005 fba0 	bl	8006448 <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	2001c000 	.word	0x2001c000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	200003b4 	.word	0x200003b4
 8000d3c:	200012d8 	.word	0x200012d8

08000d40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	@ (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d64:	480d      	ldr	r0, [pc, #52]	@ (8000d9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d66:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d68:	f7ff ffea 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	@ (8000da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	@ (8000da8 <LoopForever+0xe>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	@ (8000db0 <LoopForever+0x16>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f005 fb5f 	bl	8006454 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d96:	f7ff fc0b 	bl	80005b0 <main>

08000d9a <LoopForever>:

LoopForever:
    b LoopForever
 8000d9a:	e7fe      	b.n	8000d9a <LoopForever>
  ldr   r0, =_estack
 8000d9c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000da8:	080072a4 	.word	0x080072a4
  ldr r2, =_sbss
 8000dac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000db0:	200012d8 	.word	0x200012d8

08000db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_2_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	71fb      	strb	r3, [r7, #7]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <HAL_Init+0x3c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8000df4 <HAL_Init+0x3c>)
 8000dc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000dcc:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f000 f8dd 	bl	8000f8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd4:	200f      	movs	r0, #15
 8000dd6:	f7ff fe53 	bl	8000a80 <HAL_InitTick>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	71fb      	strb	r3, [r7, #7]
 8000de4:	e001      	b.n	8000dea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000de6:	f7ff fdc9 	bl	800097c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dea:	79fb      	ldrb	r3, [r7, #7]

}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40022000 	.word	0x40022000

08000df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dfc:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <HAL_IncTick+0x1c>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <HAL_IncTick+0x20>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a03      	ldr	r2, [pc, #12]	@ (8000e14 <HAL_IncTick+0x1c>)
 8000e08:	6013      	str	r3, [r2, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	200003b8 	.word	0x200003b8
 8000e18:	20000008 	.word	0x20000008

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	200003b8 	.word	0x200003b8

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	@ (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	@ (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	@ (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	@ 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ff4c 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb2:	f7ff ff63 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000fb6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	6978      	ldr	r0, [r7, #20]
 8000fbe:	f7ff ffb3 	bl	8000f28 <NVIC_EncodePriority>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff82 	bl	8000ed4 <__NVIC_SetPriority>
}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff56 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001002:	e15a      	b.n	80012ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	2101      	movs	r1, #1
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	fa01 f303 	lsl.w	r3, r1, r3
 8001010:	4013      	ands	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 814c 	beq.w	80012b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b01      	cmp	r3, #1
 8001026:	d005      	beq.n	8001034 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001030:	2b02      	cmp	r3, #2
 8001032:	d130      	bne.n	8001096 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800106a:	2201      	movs	r2, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	f003 0201 	and.w	r2, r3, #1
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d017      	beq.n	80010d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d123      	bne.n	8001126 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	691a      	ldr	r2, [r3, #16]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	08da      	lsrs	r2, r3, #3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3208      	adds	r2, #8
 8001120:	6939      	ldr	r1, [r7, #16]
 8001122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0203 	and.w	r2, r3, #3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 80a6 	beq.w	80012b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001168:	4b5b      	ldr	r3, [pc, #364]	@ (80012d8 <HAL_GPIO_Init+0x2e4>)
 800116a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116c:	4a5a      	ldr	r2, [pc, #360]	@ (80012d8 <HAL_GPIO_Init+0x2e4>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6613      	str	r3, [r2, #96]	@ 0x60
 8001174:	4b58      	ldr	r3, [pc, #352]	@ (80012d8 <HAL_GPIO_Init+0x2e4>)
 8001176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001180:	4a56      	ldr	r2, [pc, #344]	@ (80012dc <HAL_GPIO_Init+0x2e8>)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011aa:	d01f      	beq.n	80011ec <HAL_GPIO_Init+0x1f8>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a4c      	ldr	r2, [pc, #304]	@ (80012e0 <HAL_GPIO_Init+0x2ec>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d019      	beq.n	80011e8 <HAL_GPIO_Init+0x1f4>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a4b      	ldr	r2, [pc, #300]	@ (80012e4 <HAL_GPIO_Init+0x2f0>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d013      	beq.n	80011e4 <HAL_GPIO_Init+0x1f0>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a4a      	ldr	r2, [pc, #296]	@ (80012e8 <HAL_GPIO_Init+0x2f4>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d00d      	beq.n	80011e0 <HAL_GPIO_Init+0x1ec>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a49      	ldr	r2, [pc, #292]	@ (80012ec <HAL_GPIO_Init+0x2f8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d007      	beq.n	80011dc <HAL_GPIO_Init+0x1e8>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a48      	ldr	r2, [pc, #288]	@ (80012f0 <HAL_GPIO_Init+0x2fc>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d101      	bne.n	80011d8 <HAL_GPIO_Init+0x1e4>
 80011d4:	2305      	movs	r3, #5
 80011d6:	e00a      	b.n	80011ee <HAL_GPIO_Init+0x1fa>
 80011d8:	2306      	movs	r3, #6
 80011da:	e008      	b.n	80011ee <HAL_GPIO_Init+0x1fa>
 80011dc:	2304      	movs	r3, #4
 80011de:	e006      	b.n	80011ee <HAL_GPIO_Init+0x1fa>
 80011e0:	2303      	movs	r3, #3
 80011e2:	e004      	b.n	80011ee <HAL_GPIO_Init+0x1fa>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e002      	b.n	80011ee <HAL_GPIO_Init+0x1fa>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <HAL_GPIO_Init+0x1fa>
 80011ec:	2300      	movs	r3, #0
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	f002 0203 	and.w	r2, r2, #3
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	4093      	lsls	r3, r2
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011fe:	4937      	ldr	r1, [pc, #220]	@ (80012dc <HAL_GPIO_Init+0x2e8>)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800120c:	4b39      	ldr	r3, [pc, #228]	@ (80012f4 <HAL_GPIO_Init+0x300>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001230:	4a30      	ldr	r2, [pc, #192]	@ (80012f4 <HAL_GPIO_Init+0x300>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001236:	4b2f      	ldr	r3, [pc, #188]	@ (80012f4 <HAL_GPIO_Init+0x300>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800125a:	4a26      	ldr	r2, [pc, #152]	@ (80012f4 <HAL_GPIO_Init+0x300>)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001260:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <HAL_GPIO_Init+0x300>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001284:	4a1b      	ldr	r2, [pc, #108]	@ (80012f4 <HAL_GPIO_Init+0x300>)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800128a:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <HAL_GPIO_Init+0x300>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ae:	4a11      	ldr	r2, [pc, #68]	@ (80012f4 <HAL_GPIO_Init+0x300>)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	fa22 f303 	lsr.w	r3, r2, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f47f ae9d 	bne.w	8001004 <HAL_GPIO_Init+0x10>
  }
}
 80012ca:	bf00      	nop
 80012cc:	bf00      	nop
 80012ce:	371c      	adds	r7, #28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010000 	.word	0x40010000
 80012e0:	48000400 	.word	0x48000400
 80012e4:	48000800 	.word	0x48000800
 80012e8:	48000c00 	.word	0x48000c00
 80012ec:	48001000 	.word	0x48001000
 80012f0:	48001400 	.word	0x48001400
 80012f4:	40010400 	.word	0x40010400

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001314:	e002      	b.n	800131c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4013      	ands	r3, r2
 8001340:	041a      	lsls	r2, r3, #16
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43d9      	mvns	r1, r3
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	400b      	ands	r3, r1
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	4013      	ands	r3, r2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d006      	beq.n	8001380 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001372:	4a05      	ldr	r2, [pc, #20]	@ (8001388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f806 	bl	800138c <HAL_GPIO_EXTI_Callback>
  }
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40010400 	.word	0x40010400

0800138c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d141      	bne.n	8001436 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013b2:	4b4b      	ldr	r3, [pc, #300]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013be:	d131      	bne.n	8001424 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013c0:	4b47      	ldr	r3, [pc, #284]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013c6:	4a46      	ldr	r2, [pc, #280]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d0:	4b43      	ldr	r3, [pc, #268]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013d8:	4a41      	ldr	r2, [pc, #260]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013e0:	4b40      	ldr	r3, [pc, #256]	@ (80014e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2232      	movs	r2, #50	@ 0x32
 80013e6:	fb02 f303 	mul.w	r3, r2, r3
 80013ea:	4a3f      	ldr	r2, [pc, #252]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013ec:	fba2 2303 	umull	r2, r3, r2, r3
 80013f0:	0c9b      	lsrs	r3, r3, #18
 80013f2:	3301      	adds	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013f6:	e002      	b.n	80013fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013fe:	4b38      	ldr	r3, [pc, #224]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800140a:	d102      	bne.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f2      	bne.n	80013f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001412:	4b33      	ldr	r3, [pc, #204]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800141a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800141e:	d158      	bne.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e057      	b.n	80014d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001424:	4b2e      	ldr	r3, [pc, #184]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800142a:	4a2d      	ldr	r2, [pc, #180]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001430:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001434:	e04d      	b.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800143c:	d141      	bne.n	80014c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800143e:	4b28      	ldr	r3, [pc, #160]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800144a:	d131      	bne.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800144c:	4b24      	ldr	r3, [pc, #144]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001452:	4a23      	ldr	r2, [pc, #140]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001458:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800145c:	4b20      	ldr	r3, [pc, #128]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001464:	4a1e      	ldr	r2, [pc, #120]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001466:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800146a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800146c:	4b1d      	ldr	r3, [pc, #116]	@ (80014e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2232      	movs	r2, #50	@ 0x32
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	4a1c      	ldr	r2, [pc, #112]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001478:	fba2 2303 	umull	r2, r3, r2, r3
 800147c:	0c9b      	lsrs	r3, r3, #18
 800147e:	3301      	adds	r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001482:	e002      	b.n	800148a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3b01      	subs	r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001496:	d102      	bne.n	800149e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f2      	bne.n	8001484 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800149e:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014aa:	d112      	bne.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e011      	b.n	80014d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014b0:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014b6:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014c0:	e007      	b.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014c2:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014ca:	4a05      	ldr	r2, [pc, #20]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40007000 	.word	0x40007000
 80014e4:	20000000 	.word	0x20000000
 80014e8:	431bde83 	.word	0x431bde83

080014ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80014f0:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014fa:	6093      	str	r3, [r2, #8]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40007000 	.word	0x40007000

0800150c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e2fe      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d075      	beq.n	8001616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800152a:	4b97      	ldr	r3, [pc, #604]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001534:	4b94      	ldr	r3, [pc, #592]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b0c      	cmp	r3, #12
 8001542:	d102      	bne.n	800154a <HAL_RCC_OscConfig+0x3e>
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	2b03      	cmp	r3, #3
 8001548:	d002      	beq.n	8001550 <HAL_RCC_OscConfig+0x44>
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	2b08      	cmp	r3, #8
 800154e:	d10b      	bne.n	8001568 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001550:	4b8d      	ldr	r3, [pc, #564]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d05b      	beq.n	8001614 <HAL_RCC_OscConfig+0x108>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d157      	bne.n	8001614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e2d9      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001570:	d106      	bne.n	8001580 <HAL_RCC_OscConfig+0x74>
 8001572:	4b85      	ldr	r3, [pc, #532]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a84      	ldr	r2, [pc, #528]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 8001578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e01d      	b.n	80015bc <HAL_RCC_OscConfig+0xb0>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x98>
 800158a:	4b7f      	ldr	r3, [pc, #508]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a7e      	ldr	r2, [pc, #504]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 8001590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b7c      	ldr	r3, [pc, #496]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a7b      	ldr	r2, [pc, #492]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 800159c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e00b      	b.n	80015bc <HAL_RCC_OscConfig+0xb0>
 80015a4:	4b78      	ldr	r3, [pc, #480]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a77      	ldr	r2, [pc, #476]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 80015aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4b75      	ldr	r3, [pc, #468]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a74      	ldr	r2, [pc, #464]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 80015b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d013      	beq.n	80015ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fc2a 	bl	8000e1c <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff fc26 	bl	8000e1c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	@ 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e29e      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015de:	4b6a      	ldr	r3, [pc, #424]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0xc0>
 80015ea:	e014      	b.n	8001616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fc16 	bl	8000e1c <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f4:	f7ff fc12 	bl	8000e1c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b64      	cmp	r3, #100	@ 0x64
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e28a      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001606:	4b60      	ldr	r3, [pc, #384]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0xe8>
 8001612:	e000      	b.n	8001616 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d075      	beq.n	800170e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001622:	4b59      	ldr	r3, [pc, #356]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800162c:	4b56      	ldr	r3, [pc, #344]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2b0c      	cmp	r3, #12
 800163a:	d102      	bne.n	8001642 <HAL_RCC_OscConfig+0x136>
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d002      	beq.n	8001648 <HAL_RCC_OscConfig+0x13c>
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b04      	cmp	r3, #4
 8001646:	d11f      	bne.n	8001688 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001648:	4b4f      	ldr	r3, [pc, #316]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_RCC_OscConfig+0x154>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e25d      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b49      	ldr	r3, [pc, #292]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	061b      	lsls	r3, r3, #24
 800166e:	4946      	ldr	r1, [pc, #280]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001674:	4b45      	ldr	r3, [pc, #276]	@ (800178c <HAL_RCC_OscConfig+0x280>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fa01 	bl	8000a80 <HAL_InitTick>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d043      	beq.n	800170c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e249      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d023      	beq.n	80016d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001690:	4b3d      	ldr	r3, [pc, #244]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a3c      	ldr	r2, [pc, #240]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 8001696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800169a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169c:	f7ff fbbe 	bl	8000e1c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a4:	f7ff fbba 	bl	8000e1c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e232      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b6:	4b34      	ldr	r3, [pc, #208]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c2:	4b31      	ldr	r3, [pc, #196]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	061b      	lsls	r3, r3, #24
 80016d0:	492d      	ldr	r1, [pc, #180]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	604b      	str	r3, [r1, #4]
 80016d6:	e01a      	b.n	800170e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 80016de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fb9a 	bl	8000e1c <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ec:	f7ff fb96 	bl	8000e1c <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e20e      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016fe:	4b22      	ldr	r3, [pc, #136]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x1e0>
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800170c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d041      	beq.n	800179e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d01c      	beq.n	800175c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001722:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 8001724:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001728:	4a17      	ldr	r2, [pc, #92]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001732:	f7ff fb73 	bl	8000e1c <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173a:	f7ff fb6f 	bl	8000e1c <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e1e7      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800174c:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 800174e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0ef      	beq.n	800173a <HAL_RCC_OscConfig+0x22e>
 800175a:	e020      	b.n	800179e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800175c:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 800175e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001762:	4a09      	ldr	r2, [pc, #36]	@ (8001788 <HAL_RCC_OscConfig+0x27c>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176c:	f7ff fb56 	bl	8000e1c <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001772:	e00d      	b.n	8001790 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001774:	f7ff fb52 	bl	8000e1c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d906      	bls.n	8001790 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e1ca      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000
 800178c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001790:	4b8c      	ldr	r3, [pc, #560]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 8001792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1ea      	bne.n	8001774 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80a6 	beq.w	80018f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017b0:	4b84      	ldr	r3, [pc, #528]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 80017b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_OscConfig+0x2b4>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x2b6>
 80017c0:	2300      	movs	r3, #0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00d      	beq.n	80017e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	4b7f      	ldr	r3, [pc, #508]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ca:	4a7e      	ldr	r2, [pc, #504]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017d2:	4b7c      	ldr	r3, [pc, #496]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 80017d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017de:	2301      	movs	r3, #1
 80017e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e2:	4b79      	ldr	r3, [pc, #484]	@ (80019c8 <HAL_RCC_OscConfig+0x4bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d118      	bne.n	8001820 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017ee:	4b76      	ldr	r3, [pc, #472]	@ (80019c8 <HAL_RCC_OscConfig+0x4bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a75      	ldr	r2, [pc, #468]	@ (80019c8 <HAL_RCC_OscConfig+0x4bc>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fa:	f7ff fb0f 	bl	8000e1c <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001802:	f7ff fb0b 	bl	8000e1c <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e183      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001814:	4b6c      	ldr	r3, [pc, #432]	@ (80019c8 <HAL_RCC_OscConfig+0x4bc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d108      	bne.n	800183a <HAL_RCC_OscConfig+0x32e>
 8001828:	4b66      	ldr	r3, [pc, #408]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800182e:	4a65      	ldr	r2, [pc, #404]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001838:	e024      	b.n	8001884 <HAL_RCC_OscConfig+0x378>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b05      	cmp	r3, #5
 8001840:	d110      	bne.n	8001864 <HAL_RCC_OscConfig+0x358>
 8001842:	4b60      	ldr	r3, [pc, #384]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 8001844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001848:	4a5e      	ldr	r2, [pc, #376]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 800184a:	f043 0304 	orr.w	r3, r3, #4
 800184e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001852:	4b5c      	ldr	r3, [pc, #368]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 8001854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001858:	4a5a      	ldr	r2, [pc, #360]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001862:	e00f      	b.n	8001884 <HAL_RCC_OscConfig+0x378>
 8001864:	4b57      	ldr	r3, [pc, #348]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 8001866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800186a:	4a56      	ldr	r2, [pc, #344]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001874:	4b53      	ldr	r3, [pc, #332]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 8001876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800187a:	4a52      	ldr	r2, [pc, #328]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 800187c:	f023 0304 	bic.w	r3, r3, #4
 8001880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d016      	beq.n	80018ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188c:	f7ff fac6 	bl	8000e1c <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001892:	e00a      	b.n	80018aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001894:	f7ff fac2 	bl	8000e1c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e138      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018aa:	4b46      	ldr	r3, [pc, #280]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 80018ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0ed      	beq.n	8001894 <HAL_RCC_OscConfig+0x388>
 80018b8:	e015      	b.n	80018e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ba:	f7ff faaf 	bl	8000e1c <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c0:	e00a      	b.n	80018d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f7ff faab 	bl	8000e1c <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e121      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018d8:	4b3a      	ldr	r3, [pc, #232]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 80018da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1ed      	bne.n	80018c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018e6:	7ffb      	ldrb	r3, [r7, #31]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d105      	bne.n	80018f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ec:	4b35      	ldr	r3, [pc, #212]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 80018ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f0:	4a34      	ldr	r2, [pc, #208]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 80018f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0320 	and.w	r3, r3, #32
 8001900:	2b00      	cmp	r3, #0
 8001902:	d03c      	beq.n	800197e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d01c      	beq.n	8001946 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800190c:	4b2d      	ldr	r3, [pc, #180]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 800190e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001912:	4a2c      	ldr	r2, [pc, #176]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff fa7e 	bl	8000e1c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001924:	f7ff fa7a 	bl	8000e1c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e0f2      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001936:	4b23      	ldr	r3, [pc, #140]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 8001938:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0ef      	beq.n	8001924 <HAL_RCC_OscConfig+0x418>
 8001944:	e01b      	b.n	800197e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001946:	4b1f      	ldr	r3, [pc, #124]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 8001948:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800194c:	4a1d      	ldr	r2, [pc, #116]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 800194e:	f023 0301 	bic.w	r3, r3, #1
 8001952:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001956:	f7ff fa61 	bl	8000e1c <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800195e:	f7ff fa5d 	bl	8000e1c <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e0d5      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001970:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 8001972:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1ef      	bne.n	800195e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80c9 	beq.w	8001b1a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001988:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b0c      	cmp	r3, #12
 8001992:	f000 8083 	beq.w	8001a9c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d15e      	bne.n	8001a5c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a08      	ldr	r2, [pc, #32]	@ (80019c4 <HAL_RCC_OscConfig+0x4b8>)
 80019a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff fa37 	bl	8000e1c <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b0:	e00c      	b.n	80019cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b2:	f7ff fa33 	bl	8000e1c <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d905      	bls.n	80019cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e0ab      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019cc:	4b55      	ldr	r3, [pc, #340]	@ (8001b24 <HAL_RCC_OscConfig+0x618>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1ec      	bne.n	80019b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d8:	4b52      	ldr	r3, [pc, #328]	@ (8001b24 <HAL_RCC_OscConfig+0x618>)
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	4b52      	ldr	r3, [pc, #328]	@ (8001b28 <HAL_RCC_OscConfig+0x61c>)
 80019de:	4013      	ands	r3, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6a11      	ldr	r1, [r2, #32]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019e8:	3a01      	subs	r2, #1
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	4311      	orrs	r1, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80019f2:	0212      	lsls	r2, r2, #8
 80019f4:	4311      	orrs	r1, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019fa:	0852      	lsrs	r2, r2, #1
 80019fc:	3a01      	subs	r2, #1
 80019fe:	0552      	lsls	r2, r2, #21
 8001a00:	4311      	orrs	r1, r2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a06:	0852      	lsrs	r2, r2, #1
 8001a08:	3a01      	subs	r2, #1
 8001a0a:	0652      	lsls	r2, r2, #25
 8001a0c:	4311      	orrs	r1, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a12:	06d2      	lsls	r2, r2, #27
 8001a14:	430a      	orrs	r2, r1
 8001a16:	4943      	ldr	r1, [pc, #268]	@ (8001b24 <HAL_RCC_OscConfig+0x618>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a1c:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <HAL_RCC_OscConfig+0x618>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a40      	ldr	r2, [pc, #256]	@ (8001b24 <HAL_RCC_OscConfig+0x618>)
 8001a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a26:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a28:	4b3e      	ldr	r3, [pc, #248]	@ (8001b24 <HAL_RCC_OscConfig+0x618>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4a3d      	ldr	r2, [pc, #244]	@ (8001b24 <HAL_RCC_OscConfig+0x618>)
 8001a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff f9f2 	bl	8000e1c <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff f9ee 	bl	8000e1c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e066      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4e:	4b35      	ldr	r3, [pc, #212]	@ (8001b24 <HAL_RCC_OscConfig+0x618>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x530>
 8001a5a:	e05e      	b.n	8001b1a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5c:	4b31      	ldr	r3, [pc, #196]	@ (8001b24 <HAL_RCC_OscConfig+0x618>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a30      	ldr	r2, [pc, #192]	@ (8001b24 <HAL_RCC_OscConfig+0x618>)
 8001a62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff f9d8 	bl	8000e1c <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff f9d4 	bl	8000e1c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e04c      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a82:	4b28      	ldr	r3, [pc, #160]	@ (8001b24 <HAL_RCC_OscConfig+0x618>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a8e:	4b25      	ldr	r3, [pc, #148]	@ (8001b24 <HAL_RCC_OscConfig+0x618>)
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	4924      	ldr	r1, [pc, #144]	@ (8001b24 <HAL_RCC_OscConfig+0x618>)
 8001a94:	4b25      	ldr	r3, [pc, #148]	@ (8001b2c <HAL_RCC_OscConfig+0x620>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	60cb      	str	r3, [r1, #12]
 8001a9a:	e03e      	b.n	8001b1a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e039      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b24 <HAL_RCC_OscConfig+0x618>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d12c      	bne.n	8001b16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d123      	bne.n	8001b16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d11b      	bne.n	8001b16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d113      	bne.n	8001b16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	3b01      	subs	r3, #1
 8001afc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d109      	bne.n	8001b16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b0c:	085b      	lsrs	r3, r3, #1
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40021000 	.word	0x40021000
 8001b28:	019f800c 	.word	0x019f800c
 8001b2c:	feeefffc 	.word	0xfeeefffc

08001b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e11e      	b.n	8001d86 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b91      	ldr	r3, [pc, #580]	@ (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d910      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b8e      	ldr	r3, [pc, #568]	@ (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 020f 	bic.w	r2, r3, #15
 8001b5e:	498c      	ldr	r1, [pc, #560]	@ (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b8a      	ldr	r3, [pc, #552]	@ (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e106      	b.n	8001d86 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d073      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d129      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8c:	4b81      	ldr	r3, [pc, #516]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0f4      	b.n	8001d86 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b9c:	f000 f9d0 	bl	8001f40 <RCC_GetSysClockFreqFromPLLSource>
 8001ba0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4a7c      	ldr	r2, [pc, #496]	@ (8001d98 <HAL_RCC_ClockConfig+0x268>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d93f      	bls.n	8001c2a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001baa:	4b7a      	ldr	r3, [pc, #488]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d009      	beq.n	8001bca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d033      	beq.n	8001c2a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d12f      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bca:	4b72      	ldr	r3, [pc, #456]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bd2:	4a70      	ldr	r2, [pc, #448]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bd8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bda:	2380      	movs	r3, #128	@ 0x80
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	e024      	b.n	8001c2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d107      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be8:	4b6a      	ldr	r3, [pc, #424]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d109      	bne.n	8001c08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0c6      	b.n	8001d86 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf8:	4b66      	ldr	r3, [pc, #408]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0be      	b.n	8001d86 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c08:	f000 f8ce 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4a61      	ldr	r2, [pc, #388]	@ (8001d98 <HAL_RCC_ClockConfig+0x268>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d909      	bls.n	8001c2a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c16:	4b5f      	ldr	r3, [pc, #380]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c1e:	4a5d      	ldr	r2, [pc, #372]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c24:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c26:	2380      	movs	r3, #128	@ 0x80
 8001c28:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c2a:	4b5a      	ldr	r3, [pc, #360]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f023 0203 	bic.w	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4957      	ldr	r1, [pc, #348]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c3c:	f7ff f8ee 	bl	8000e1c <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7ff f8ea 	bl	8000e1c <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e095      	b.n	8001d86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	4b4e      	ldr	r3, [pc, #312]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 020c 	and.w	r2, r3, #12
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1eb      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d023      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c84:	4b43      	ldr	r3, [pc, #268]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4a42      	ldr	r2, [pc, #264]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001c8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c8e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d007      	beq.n	8001cac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001ca4:	4a3b      	ldr	r2, [pc, #236]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001ca6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001caa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cac:	4b39      	ldr	r3, [pc, #228]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4936      	ldr	r1, [pc, #216]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2b80      	cmp	r3, #128	@ 0x80
 8001cc4:	d105      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001cc6:	4b33      	ldr	r3, [pc, #204]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	4a32      	ldr	r2, [pc, #200]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001ccc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cd0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d21d      	bcs.n	8001d1c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 020f 	bic.w	r2, r3, #15
 8001ce8:	4929      	ldr	r1, [pc, #164]	@ (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cf0:	f7ff f894 	bl	8000e1c <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7ff f890 	bl	8000e1c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e03b      	b.n	8001d86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0e:	4b20      	ldr	r3, [pc, #128]	@ (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1ed      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d008      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d28:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4917      	ldr	r1, [pc, #92]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d009      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d46:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	490f      	ldr	r1, [pc, #60]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d5a:	f000 f825 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	490c      	ldr	r1, [pc, #48]	@ (8001d9c <HAL_RCC_ClockConfig+0x26c>)
 8001d6c:	5ccb      	ldrb	r3, [r1, r3]
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	fa22 f303 	lsr.w	r3, r2, r3
 8001d76:	4a0a      	ldr	r2, [pc, #40]	@ (8001da0 <HAL_RCC_ClockConfig+0x270>)
 8001d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001da4 <HAL_RCC_ClockConfig+0x274>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fe7e 	bl	8000a80 <HAL_InitTick>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40022000 	.word	0x40022000
 8001d94:	40021000 	.word	0x40021000
 8001d98:	04c4b400 	.word	0x04c4b400
 8001d9c:	08007174 	.word	0x08007174
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000004 	.word	0x20000004

08001da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001dae:	4b2c      	ldr	r3, [pc, #176]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d102      	bne.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dba:	4b2a      	ldr	r3, [pc, #168]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	e047      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001dc0:	4b27      	ldr	r3, [pc, #156]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d102      	bne.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dcc:	4b26      	ldr	r3, [pc, #152]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	e03e      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001dd2:	4b23      	ldr	r3, [pc, #140]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	d136      	bne.n	8001e4c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dde:	4b20      	ldr	r3, [pc, #128]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001de8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	091b      	lsrs	r3, r3, #4
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	3301      	adds	r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d10c      	bne.n	8001e16 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dfc:	4a1a      	ldr	r2, [pc, #104]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	4a16      	ldr	r2, [pc, #88]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e06:	68d2      	ldr	r2, [r2, #12]
 8001e08:	0a12      	lsrs	r2, r2, #8
 8001e0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	617b      	str	r3, [r7, #20]
      break;
 8001e14:	e00c      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e16:	4a13      	ldr	r2, [pc, #76]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	4a10      	ldr	r2, [pc, #64]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e20:	68d2      	ldr	r2, [r2, #12]
 8001e22:	0a12      	lsrs	r2, r2, #8
 8001e24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e28:	fb02 f303 	mul.w	r3, r2, r3
 8001e2c:	617b      	str	r3, [r7, #20]
      break;
 8001e2e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e30:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0e5b      	lsrs	r3, r3, #25
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	e001      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e50:	693b      	ldr	r3, [r7, #16]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	00f42400 	.word	0x00f42400
 8001e68:	016e3600 	.word	0x016e3600

08001e6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e70:	4b03      	ldr	r3, [pc, #12]	@ (8001e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000000 	.word	0x20000000

08001e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e88:	f7ff fff0 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	4904      	ldr	r1, [pc, #16]	@ (8001eac <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e9a:	5ccb      	ldrb	r3, [r1, r3]
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	08007184 	.word	0x08007184

08001eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001eb4:	f7ff ffda 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	0adb      	lsrs	r3, r3, #11
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	4904      	ldr	r1, [pc, #16]	@ (8001ed8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ec6:	5ccb      	ldrb	r3, [r1, r3]
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08007184 	.word	0x08007184

08001edc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	220f      	movs	r2, #15
 8001eea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001eec:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <HAL_RCC_GetClockConfig+0x5c>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0203 	and.w	r2, r3, #3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f38 <HAL_RCC_GetClockConfig+0x5c>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f04:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <HAL_RCC_GetClockConfig+0x5c>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f10:	4b09      	ldr	r3, [pc, #36]	@ (8001f38 <HAL_RCC_GetClockConfig+0x5c>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	08db      	lsrs	r3, r3, #3
 8001f16:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f1e:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <HAL_RCC_GetClockConfig+0x60>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 020f 	and.w	r2, r3, #15
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	601a      	str	r2, [r3, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40022000 	.word	0x40022000

08001f40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f46:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d10c      	bne.n	8001f7e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f64:	4a17      	ldr	r2, [pc, #92]	@ (8001fc4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6c:	4a14      	ldr	r2, [pc, #80]	@ (8001fc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f6e:	68d2      	ldr	r2, [r2, #12]
 8001f70:	0a12      	lsrs	r2, r2, #8
 8001f72:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	617b      	str	r3, [r7, #20]
    break;
 8001f7c:	e00c      	b.n	8001f98 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f7e:	4a12      	ldr	r2, [pc, #72]	@ (8001fc8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f88:	68d2      	ldr	r2, [r2, #12]
 8001f8a:	0a12      	lsrs	r2, r2, #8
 8001f8c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f90:	fb02 f303 	mul.w	r3, r2, r3
 8001f94:	617b      	str	r3, [r7, #20]
    break;
 8001f96:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f98:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	0e5b      	lsrs	r3, r3, #25
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001fb2:	687b      	ldr	r3, [r7, #4]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	016e3600 	.word	0x016e3600
 8001fc8:	00f42400 	.word	0x00f42400

08001fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fd8:	2300      	movs	r3, #0
 8001fda:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8098 	beq.w	800211a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fee:	4b43      	ldr	r3, [pc, #268]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10d      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	4b40      	ldr	r3, [pc, #256]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffe:	4a3f      	ldr	r2, [pc, #252]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002004:	6593      	str	r3, [r2, #88]	@ 0x58
 8002006:	4b3d      	ldr	r3, [pc, #244]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002012:	2301      	movs	r3, #1
 8002014:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002016:	4b3a      	ldr	r3, [pc, #232]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a39      	ldr	r2, [pc, #228]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800201c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002020:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002022:	f7fe fefb 	bl	8000e1c <HAL_GetTick>
 8002026:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002028:	e009      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202a:	f7fe fef7 	bl	8000e1c <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d902      	bls.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	74fb      	strb	r3, [r7, #19]
        break;
 800203c:	e005      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800203e:	4b30      	ldr	r3, [pc, #192]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0ef      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800204a:	7cfb      	ldrb	r3, [r7, #19]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d159      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002050:	4b2a      	ldr	r3, [pc, #168]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800205a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d01e      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	429a      	cmp	r2, r3
 800206a:	d019      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800206c:	4b23      	ldr	r3, [pc, #140]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002076:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002078:	4b20      	ldr	r3, [pc, #128]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207e:	4a1f      	ldr	r2, [pc, #124]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002088:	4b1c      	ldr	r3, [pc, #112]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208e:	4a1b      	ldr	r2, [pc, #108]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002090:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002098:	4a18      	ldr	r2, [pc, #96]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d016      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020aa:	f7fe feb7 	bl	8000e1c <HAL_GetTick>
 80020ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b0:	e00b      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7fe feb3 	bl	8000e1c <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d902      	bls.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	74fb      	strb	r3, [r7, #19]
            break;
 80020c8:	e006      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ca:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0ec      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10b      	bne.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020de:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ec:	4903      	ldr	r1, [pc, #12]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020f4:	e008      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020f6:	7cfb      	ldrb	r3, [r7, #19]
 80020f8:	74bb      	strb	r3, [r7, #18]
 80020fa:	e005      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020fc:	40021000 	.word	0x40021000
 8002100:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002108:	7c7b      	ldrb	r3, [r7, #17]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d105      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210e:	4ba7      	ldr	r3, [pc, #668]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	4aa6      	ldr	r2, [pc, #664]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002118:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002126:	4ba1      	ldr	r3, [pc, #644]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212c:	f023 0203 	bic.w	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	499d      	ldr	r1, [pc, #628]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002148:	4b98      	ldr	r3, [pc, #608]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214e:	f023 020c 	bic.w	r2, r3, #12
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	4995      	ldr	r1, [pc, #596]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800216a:	4b90      	ldr	r3, [pc, #576]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002170:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	498c      	ldr	r1, [pc, #560]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800218c:	4b87      	ldr	r3, [pc, #540]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002192:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	4984      	ldr	r1, [pc, #528]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021ae:	4b7f      	ldr	r3, [pc, #508]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	497b      	ldr	r1, [pc, #492]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021d0:	4b76      	ldr	r3, [pc, #472]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	4973      	ldr	r1, [pc, #460]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021f2:	4b6e      	ldr	r3, [pc, #440]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	496a      	ldr	r1, [pc, #424]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002214:	4b65      	ldr	r3, [pc, #404]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4962      	ldr	r1, [pc, #392]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002236:	4b5d      	ldr	r3, [pc, #372]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	4959      	ldr	r1, [pc, #356]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002258:	4b54      	ldr	r3, [pc, #336]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002266:	4951      	ldr	r1, [pc, #324]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002276:	2b00      	cmp	r3, #0
 8002278:	d015      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800227a:	4b4c      	ldr	r3, [pc, #304]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002280:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002288:	4948      	ldr	r1, [pc, #288]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002294:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002298:	d105      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800229a:	4b44      	ldr	r3, [pc, #272]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	4a43      	ldr	r2, [pc, #268]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022a4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d015      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022b2:	4b3e      	ldr	r3, [pc, #248]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c0:	493a      	ldr	r1, [pc, #232]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022d0:	d105      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d2:	4b36      	ldr	r3, [pc, #216]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	4a35      	ldr	r2, [pc, #212]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022dc:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d015      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022ea:	4b30      	ldr	r3, [pc, #192]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f8:	492c      	ldr	r1, [pc, #176]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002304:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002308:	d105      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800230a:	4b28      	ldr	r3, [pc, #160]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	4a27      	ldr	r2, [pc, #156]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002310:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002314:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d015      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002322:	4b22      	ldr	r3, [pc, #136]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002328:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002330:	491e      	ldr	r1, [pc, #120]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002340:	d105      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002342:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	4a19      	ldr	r2, [pc, #100]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002348:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800234c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d015      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800235a:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002360:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002368:	4910      	ldr	r1, [pc, #64]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002374:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002378:	d105      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800237a:	4b0c      	ldr	r3, [pc, #48]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	4a0b      	ldr	r2, [pc, #44]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002380:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002384:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d018      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002398:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	4902      	ldr	r1, [pc, #8]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	e001      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80023ac:	40021000 	.word	0x40021000
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023b6:	d105      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023b8:	4b21      	ldr	r3, [pc, #132]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a20      	ldr	r2, [pc, #128]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80023be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d015      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80023d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023de:	4918      	ldr	r1, [pc, #96]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023ee:	d105      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023f0:	4b13      	ldr	r3, [pc, #76]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a12      	ldr	r2, [pc, #72]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80023f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d015      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002408:	4b0d      	ldr	r3, [pc, #52]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800240a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800240e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002416:	490a      	ldr	r1, [pc, #40]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002422:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002426:	d105      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002428:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4a04      	ldr	r2, [pc, #16]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800242e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002432:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002434:	7cbb      	ldrb	r3, [r7, #18]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000

08002444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e049      	b.n	80024ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f841 	bl	80024f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3304      	adds	r3, #4
 8002480:	4619      	mov	r1, r3
 8002482:	4610      	mov	r0, r2
 8002484:	f000 fa28 	bl	80028d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d001      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e04f      	b.n	80025c0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a23      	ldr	r2, [pc, #140]	@ (80025cc <HAL_TIM_Base_Start_IT+0xc4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01d      	beq.n	800257e <HAL_TIM_Base_Start_IT+0x76>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800254a:	d018      	beq.n	800257e <HAL_TIM_Base_Start_IT+0x76>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1f      	ldr	r2, [pc, #124]	@ (80025d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d013      	beq.n	800257e <HAL_TIM_Base_Start_IT+0x76>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1e      	ldr	r2, [pc, #120]	@ (80025d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d00e      	beq.n	800257e <HAL_TIM_Base_Start_IT+0x76>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1c      	ldr	r2, [pc, #112]	@ (80025d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d009      	beq.n	800257e <HAL_TIM_Base_Start_IT+0x76>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1b      	ldr	r2, [pc, #108]	@ (80025dc <HAL_TIM_Base_Start_IT+0xd4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d004      	beq.n	800257e <HAL_TIM_Base_Start_IT+0x76>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a19      	ldr	r2, [pc, #100]	@ (80025e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d115      	bne.n	80025aa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	4b17      	ldr	r3, [pc, #92]	@ (80025e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002586:	4013      	ands	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b06      	cmp	r3, #6
 800258e:	d015      	beq.n	80025bc <HAL_TIM_Base_Start_IT+0xb4>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002596:	d011      	beq.n	80025bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a8:	e008      	b.n	80025bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0201 	orr.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e000      	b.n	80025be <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	40012c00 	.word	0x40012c00
 80025d0:	40000400 	.word	0x40000400
 80025d4:	40000800 	.word	0x40000800
 80025d8:	40013400 	.word	0x40013400
 80025dc:	40014000 	.word	0x40014000
 80025e0:	40015000 	.word	0x40015000
 80025e4:	00010007 	.word	0x00010007

080025e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d020      	beq.n	800264c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01b      	beq.n	800264c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0202 	mvn.w	r2, #2
 800261c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f931 	bl	800289a <HAL_TIM_IC_CaptureCallback>
 8002638:	e005      	b.n	8002646 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f923 	bl	8002886 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f934 	bl	80028ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	d020      	beq.n	8002698 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01b      	beq.n	8002698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f06f 0204 	mvn.w	r2, #4
 8002668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2202      	movs	r2, #2
 800266e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f90b 	bl	800289a <HAL_TIM_IC_CaptureCallback>
 8002684:	e005      	b.n	8002692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f8fd 	bl	8002886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f90e 	bl	80028ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d020      	beq.n	80026e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01b      	beq.n	80026e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0208 	mvn.w	r2, #8
 80026b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2204      	movs	r2, #4
 80026ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f8e5 	bl	800289a <HAL_TIM_IC_CaptureCallback>
 80026d0:	e005      	b.n	80026de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f8d7 	bl	8002886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f8e8 	bl	80028ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d020      	beq.n	8002730 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01b      	beq.n	8002730 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0210 	mvn.w	r2, #16
 8002700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2208      	movs	r2, #8
 8002706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f8bf 	bl	800289a <HAL_TIM_IC_CaptureCallback>
 800271c:	e005      	b.n	800272a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f8b1 	bl	8002886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f8c2 	bl	80028ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00c      	beq.n	8002754 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0201 	mvn.w	r2, #1
 800274c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fe f8fc 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d104      	bne.n	8002768 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00c      	beq.n	8002782 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800277a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f95f 	bl	8002a40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00c      	beq.n	80027a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800279e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f957 	bl	8002a54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00c      	beq.n	80027ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80027c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f87c 	bl	80028c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00c      	beq.n	80027ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f06f 0220 	mvn.w	r2, #32
 80027e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f91f 	bl	8002a2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00c      	beq.n	8002812 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800280a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f92b 	bl	8002a68 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00c      	beq.n	8002836 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d007      	beq.n	8002836 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800282e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f923 	bl	8002a7c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00c      	beq.n	800285a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f91b 	bl	8002a90 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00c      	beq.n	800287e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f913 	bl	8002aa4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a48      	ldr	r2, [pc, #288]	@ (8002a0c <TIM_Base_SetConfig+0x134>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d013      	beq.n	8002918 <TIM_Base_SetConfig+0x40>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f6:	d00f      	beq.n	8002918 <TIM_Base_SetConfig+0x40>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a45      	ldr	r2, [pc, #276]	@ (8002a10 <TIM_Base_SetConfig+0x138>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00b      	beq.n	8002918 <TIM_Base_SetConfig+0x40>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a44      	ldr	r2, [pc, #272]	@ (8002a14 <TIM_Base_SetConfig+0x13c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d007      	beq.n	8002918 <TIM_Base_SetConfig+0x40>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a43      	ldr	r2, [pc, #268]	@ (8002a18 <TIM_Base_SetConfig+0x140>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d003      	beq.n	8002918 <TIM_Base_SetConfig+0x40>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a42      	ldr	r2, [pc, #264]	@ (8002a1c <TIM_Base_SetConfig+0x144>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d108      	bne.n	800292a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800291e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a37      	ldr	r2, [pc, #220]	@ (8002a0c <TIM_Base_SetConfig+0x134>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d01f      	beq.n	8002972 <TIM_Base_SetConfig+0x9a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002938:	d01b      	beq.n	8002972 <TIM_Base_SetConfig+0x9a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a34      	ldr	r2, [pc, #208]	@ (8002a10 <TIM_Base_SetConfig+0x138>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d017      	beq.n	8002972 <TIM_Base_SetConfig+0x9a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a33      	ldr	r2, [pc, #204]	@ (8002a14 <TIM_Base_SetConfig+0x13c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <TIM_Base_SetConfig+0x9a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a32      	ldr	r2, [pc, #200]	@ (8002a18 <TIM_Base_SetConfig+0x140>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d00f      	beq.n	8002972 <TIM_Base_SetConfig+0x9a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a32      	ldr	r2, [pc, #200]	@ (8002a20 <TIM_Base_SetConfig+0x148>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00b      	beq.n	8002972 <TIM_Base_SetConfig+0x9a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a31      	ldr	r2, [pc, #196]	@ (8002a24 <TIM_Base_SetConfig+0x14c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d007      	beq.n	8002972 <TIM_Base_SetConfig+0x9a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a30      	ldr	r2, [pc, #192]	@ (8002a28 <TIM_Base_SetConfig+0x150>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d003      	beq.n	8002972 <TIM_Base_SetConfig+0x9a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a2b      	ldr	r2, [pc, #172]	@ (8002a1c <TIM_Base_SetConfig+0x144>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d108      	bne.n	8002984 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a18      	ldr	r2, [pc, #96]	@ (8002a0c <TIM_Base_SetConfig+0x134>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d013      	beq.n	80029d8 <TIM_Base_SetConfig+0x100>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a19      	ldr	r2, [pc, #100]	@ (8002a18 <TIM_Base_SetConfig+0x140>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00f      	beq.n	80029d8 <TIM_Base_SetConfig+0x100>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a19      	ldr	r2, [pc, #100]	@ (8002a20 <TIM_Base_SetConfig+0x148>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00b      	beq.n	80029d8 <TIM_Base_SetConfig+0x100>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a18      	ldr	r2, [pc, #96]	@ (8002a24 <TIM_Base_SetConfig+0x14c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d007      	beq.n	80029d8 <TIM_Base_SetConfig+0x100>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a17      	ldr	r2, [pc, #92]	@ (8002a28 <TIM_Base_SetConfig+0x150>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d003      	beq.n	80029d8 <TIM_Base_SetConfig+0x100>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a12      	ldr	r2, [pc, #72]	@ (8002a1c <TIM_Base_SetConfig+0x144>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d103      	bne.n	80029e0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d105      	bne.n	80029fe <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f023 0201 	bic.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	611a      	str	r2, [r3, #16]
  }
}
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40012c00 	.word	0x40012c00
 8002a10:	40000400 	.word	0x40000400
 8002a14:	40000800 	.word	0x40000800
 8002a18:	40013400 	.word	0x40013400
 8002a1c:	40015000 	.word	0x40015000
 8002a20:	40014000 	.word	0x40014000
 8002a24:	40014400 	.word	0x40014400
 8002a28:	40014800 	.word	0x40014800

08002a2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e042      	b.n	8002b50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d106      	bne.n	8002ae2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7fd ff77 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2224      	movs	r2, #36	@ 0x24
 8002ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0201 	bic.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fbb2 	bl	800326c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f8b3 	bl	8002c74 <UART_SetConfig>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e01b      	b.n	8002b50 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fc31 	bl	80033b0 <UART_CheckIdleState>
 8002b4e:	4603      	mov	r3, r0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	@ 0x28
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	4613      	mov	r3, r2
 8002b66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d17b      	bne.n	8002c6a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <HAL_UART_Transmit+0x26>
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e074      	b.n	8002c6c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2221      	movs	r2, #33	@ 0x21
 8002b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b92:	f7fe f943 	bl	8000e1c <HAL_GetTick>
 8002b96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	88fa      	ldrh	r2, [r7, #6]
 8002b9c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	88fa      	ldrh	r2, [r7, #6]
 8002ba4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bb0:	d108      	bne.n	8002bc4 <HAL_UART_Transmit+0x6c>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d104      	bne.n	8002bc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	e003      	b.n	8002bcc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bcc:	e030      	b.n	8002c30 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2180      	movs	r1, #128	@ 0x80
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fc93 	bl	8003504 <UART_WaitOnFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e03d      	b.n	8002c6c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10b      	bne.n	8002c0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c04:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	3302      	adds	r3, #2
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	e007      	b.n	8002c1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	781a      	ldrb	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1c8      	bne.n	8002bce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2200      	movs	r2, #0
 8002c44:	2140      	movs	r1, #64	@ 0x40
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fc5c 	bl	8003504 <UART_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e006      	b.n	8002c6c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e000      	b.n	8002c6c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002c6a:	2302      	movs	r3, #2
  }
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3720      	adds	r7, #32
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c78:	b08c      	sub	sp, #48	@ 0x30
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	4baa      	ldr	r3, [pc, #680]	@ (8002f4c <UART_SetConfig+0x2d8>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a9f      	ldr	r2, [pc, #636]	@ (8002f50 <UART_SetConfig+0x2dc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d004      	beq.n	8002ce0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002cea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfe:	f023 010f 	bic.w	r1, r3, #15
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a90      	ldr	r2, [pc, #576]	@ (8002f54 <UART_SetConfig+0x2e0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d125      	bne.n	8002d64 <UART_SetConfig+0xf0>
 8002d18:	4b8f      	ldr	r3, [pc, #572]	@ (8002f58 <UART_SetConfig+0x2e4>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d81a      	bhi.n	8002d5c <UART_SetConfig+0xe8>
 8002d26:	a201      	add	r2, pc, #4	@ (adr r2, 8002d2c <UART_SetConfig+0xb8>)
 8002d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2c:	08002d3d 	.word	0x08002d3d
 8002d30:	08002d4d 	.word	0x08002d4d
 8002d34:	08002d45 	.word	0x08002d45
 8002d38:	08002d55 	.word	0x08002d55
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d42:	e116      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002d44:	2302      	movs	r3, #2
 8002d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d4a:	e112      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d52:	e10e      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002d54:	2308      	movs	r3, #8
 8002d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d5a:	e10a      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002d5c:	2310      	movs	r3, #16
 8002d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d62:	e106      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a7c      	ldr	r2, [pc, #496]	@ (8002f5c <UART_SetConfig+0x2e8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d138      	bne.n	8002de0 <UART_SetConfig+0x16c>
 8002d6e:	4b7a      	ldr	r3, [pc, #488]	@ (8002f58 <UART_SetConfig+0x2e4>)
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b0c      	cmp	r3, #12
 8002d7a:	d82d      	bhi.n	8002dd8 <UART_SetConfig+0x164>
 8002d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d84 <UART_SetConfig+0x110>)
 8002d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d82:	bf00      	nop
 8002d84:	08002db9 	.word	0x08002db9
 8002d88:	08002dd9 	.word	0x08002dd9
 8002d8c:	08002dd9 	.word	0x08002dd9
 8002d90:	08002dd9 	.word	0x08002dd9
 8002d94:	08002dc9 	.word	0x08002dc9
 8002d98:	08002dd9 	.word	0x08002dd9
 8002d9c:	08002dd9 	.word	0x08002dd9
 8002da0:	08002dd9 	.word	0x08002dd9
 8002da4:	08002dc1 	.word	0x08002dc1
 8002da8:	08002dd9 	.word	0x08002dd9
 8002dac:	08002dd9 	.word	0x08002dd9
 8002db0:	08002dd9 	.word	0x08002dd9
 8002db4:	08002dd1 	.word	0x08002dd1
 8002db8:	2300      	movs	r3, #0
 8002dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dbe:	e0d8      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dc6:	e0d4      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002dc8:	2304      	movs	r3, #4
 8002dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dce:	e0d0      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002dd0:	2308      	movs	r3, #8
 8002dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dd6:	e0cc      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002dd8:	2310      	movs	r3, #16
 8002dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dde:	e0c8      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a5e      	ldr	r2, [pc, #376]	@ (8002f60 <UART_SetConfig+0x2ec>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d125      	bne.n	8002e36 <UART_SetConfig+0x1c2>
 8002dea:	4b5b      	ldr	r3, [pc, #364]	@ (8002f58 <UART_SetConfig+0x2e4>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002df4:	2b30      	cmp	r3, #48	@ 0x30
 8002df6:	d016      	beq.n	8002e26 <UART_SetConfig+0x1b2>
 8002df8:	2b30      	cmp	r3, #48	@ 0x30
 8002dfa:	d818      	bhi.n	8002e2e <UART_SetConfig+0x1ba>
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d00a      	beq.n	8002e16 <UART_SetConfig+0x1a2>
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d814      	bhi.n	8002e2e <UART_SetConfig+0x1ba>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <UART_SetConfig+0x19a>
 8002e08:	2b10      	cmp	r3, #16
 8002e0a:	d008      	beq.n	8002e1e <UART_SetConfig+0x1aa>
 8002e0c:	e00f      	b.n	8002e2e <UART_SetConfig+0x1ba>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e14:	e0ad      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002e16:	2302      	movs	r3, #2
 8002e18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e1c:	e0a9      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002e1e:	2304      	movs	r3, #4
 8002e20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e24:	e0a5      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002e26:	2308      	movs	r3, #8
 8002e28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e2c:	e0a1      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002e2e:	2310      	movs	r3, #16
 8002e30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e34:	e09d      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a4a      	ldr	r2, [pc, #296]	@ (8002f64 <UART_SetConfig+0x2f0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d125      	bne.n	8002e8c <UART_SetConfig+0x218>
 8002e40:	4b45      	ldr	r3, [pc, #276]	@ (8002f58 <UART_SetConfig+0x2e4>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002e4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e4c:	d016      	beq.n	8002e7c <UART_SetConfig+0x208>
 8002e4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e50:	d818      	bhi.n	8002e84 <UART_SetConfig+0x210>
 8002e52:	2b80      	cmp	r3, #128	@ 0x80
 8002e54:	d00a      	beq.n	8002e6c <UART_SetConfig+0x1f8>
 8002e56:	2b80      	cmp	r3, #128	@ 0x80
 8002e58:	d814      	bhi.n	8002e84 <UART_SetConfig+0x210>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <UART_SetConfig+0x1f0>
 8002e5e:	2b40      	cmp	r3, #64	@ 0x40
 8002e60:	d008      	beq.n	8002e74 <UART_SetConfig+0x200>
 8002e62:	e00f      	b.n	8002e84 <UART_SetConfig+0x210>
 8002e64:	2300      	movs	r3, #0
 8002e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e6a:	e082      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e72:	e07e      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002e74:	2304      	movs	r3, #4
 8002e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e7a:	e07a      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002e7c:	2308      	movs	r3, #8
 8002e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e82:	e076      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002e84:	2310      	movs	r3, #16
 8002e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e8a:	e072      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a35      	ldr	r2, [pc, #212]	@ (8002f68 <UART_SetConfig+0x2f4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d12a      	bne.n	8002eec <UART_SetConfig+0x278>
 8002e96:	4b30      	ldr	r3, [pc, #192]	@ (8002f58 <UART_SetConfig+0x2e4>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ea0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ea4:	d01a      	beq.n	8002edc <UART_SetConfig+0x268>
 8002ea6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002eaa:	d81b      	bhi.n	8002ee4 <UART_SetConfig+0x270>
 8002eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eb0:	d00c      	beq.n	8002ecc <UART_SetConfig+0x258>
 8002eb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eb6:	d815      	bhi.n	8002ee4 <UART_SetConfig+0x270>
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <UART_SetConfig+0x250>
 8002ebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ec0:	d008      	beq.n	8002ed4 <UART_SetConfig+0x260>
 8002ec2:	e00f      	b.n	8002ee4 <UART_SetConfig+0x270>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eca:	e052      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ed2:	e04e      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eda:	e04a      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002edc:	2308      	movs	r3, #8
 8002ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ee2:	e046      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eea:	e042      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a17      	ldr	r2, [pc, #92]	@ (8002f50 <UART_SetConfig+0x2dc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d13a      	bne.n	8002f6c <UART_SetConfig+0x2f8>
 8002ef6:	4b18      	ldr	r3, [pc, #96]	@ (8002f58 <UART_SetConfig+0x2e4>)
 8002ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002efc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f04:	d01a      	beq.n	8002f3c <UART_SetConfig+0x2c8>
 8002f06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f0a:	d81b      	bhi.n	8002f44 <UART_SetConfig+0x2d0>
 8002f0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f10:	d00c      	beq.n	8002f2c <UART_SetConfig+0x2b8>
 8002f12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f16:	d815      	bhi.n	8002f44 <UART_SetConfig+0x2d0>
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <UART_SetConfig+0x2b0>
 8002f1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f20:	d008      	beq.n	8002f34 <UART_SetConfig+0x2c0>
 8002f22:	e00f      	b.n	8002f44 <UART_SetConfig+0x2d0>
 8002f24:	2300      	movs	r3, #0
 8002f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f2a:	e022      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f32:	e01e      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002f34:	2304      	movs	r3, #4
 8002f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f3a:	e01a      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002f3c:	2308      	movs	r3, #8
 8002f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f42:	e016      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002f44:	2310      	movs	r3, #16
 8002f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f4a:	e012      	b.n	8002f72 <UART_SetConfig+0x2fe>
 8002f4c:	cfff69f3 	.word	0xcfff69f3
 8002f50:	40008000 	.word	0x40008000
 8002f54:	40013800 	.word	0x40013800
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40004400 	.word	0x40004400
 8002f60:	40004800 	.word	0x40004800
 8002f64:	40004c00 	.word	0x40004c00
 8002f68:	40005000 	.word	0x40005000
 8002f6c:	2310      	movs	r3, #16
 8002f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4aae      	ldr	r2, [pc, #696]	@ (8003230 <UART_SetConfig+0x5bc>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	f040 8097 	bne.w	80030ac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d823      	bhi.n	8002fce <UART_SetConfig+0x35a>
 8002f86:	a201      	add	r2, pc, #4	@ (adr r2, 8002f8c <UART_SetConfig+0x318>)
 8002f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8c:	08002fb1 	.word	0x08002fb1
 8002f90:	08002fcf 	.word	0x08002fcf
 8002f94:	08002fb9 	.word	0x08002fb9
 8002f98:	08002fcf 	.word	0x08002fcf
 8002f9c:	08002fbf 	.word	0x08002fbf
 8002fa0:	08002fcf 	.word	0x08002fcf
 8002fa4:	08002fcf 	.word	0x08002fcf
 8002fa8:	08002fcf 	.word	0x08002fcf
 8002fac:	08002fc7 	.word	0x08002fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fb0:	f7fe ff68 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 8002fb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fb6:	e010      	b.n	8002fda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fb8:	4b9e      	ldr	r3, [pc, #632]	@ (8003234 <UART_SetConfig+0x5c0>)
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fbc:	e00d      	b.n	8002fda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fbe:	f7fe fef3 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8002fc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fc4:	e009      	b.n	8002fda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fcc:	e005      	b.n	8002fda <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002fd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8130 	beq.w	8003242 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	4a94      	ldr	r2, [pc, #592]	@ (8003238 <UART_SetConfig+0x5c4>)
 8002fe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fec:	461a      	mov	r2, r3
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	429a      	cmp	r2, r3
 8003004:	d305      	bcc.n	8003012 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	429a      	cmp	r2, r3
 8003010:	d903      	bls.n	800301a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003018:	e113      	b.n	8003242 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	2200      	movs	r2, #0
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	60fa      	str	r2, [r7, #12]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	4a84      	ldr	r2, [pc, #528]	@ (8003238 <UART_SetConfig+0x5c4>)
 8003028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800302c:	b29b      	uxth	r3, r3
 800302e:	2200      	movs	r2, #0
 8003030:	603b      	str	r3, [r7, #0]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003038:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800303c:	f7fd f940 	bl	80002c0 <__aeabi_uldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	020b      	lsls	r3, r1, #8
 8003052:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003056:	0202      	lsls	r2, r0, #8
 8003058:	6979      	ldr	r1, [r7, #20]
 800305a:	6849      	ldr	r1, [r1, #4]
 800305c:	0849      	lsrs	r1, r1, #1
 800305e:	2000      	movs	r0, #0
 8003060:	460c      	mov	r4, r1
 8003062:	4605      	mov	r5, r0
 8003064:	eb12 0804 	adds.w	r8, r2, r4
 8003068:	eb43 0905 	adc.w	r9, r3, r5
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	469a      	mov	sl, r3
 8003074:	4693      	mov	fp, r2
 8003076:	4652      	mov	r2, sl
 8003078:	465b      	mov	r3, fp
 800307a:	4640      	mov	r0, r8
 800307c:	4649      	mov	r1, r9
 800307e:	f7fd f91f 	bl	80002c0 <__aeabi_uldivmod>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4613      	mov	r3, r2
 8003088:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003090:	d308      	bcc.n	80030a4 <UART_SetConfig+0x430>
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003098:	d204      	bcs.n	80030a4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6a3a      	ldr	r2, [r7, #32]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	e0ce      	b.n	8003242 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80030aa:	e0ca      	b.n	8003242 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030b4:	d166      	bne.n	8003184 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80030b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d827      	bhi.n	800310e <UART_SetConfig+0x49a>
 80030be:	a201      	add	r2, pc, #4	@ (adr r2, 80030c4 <UART_SetConfig+0x450>)
 80030c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c4:	080030e9 	.word	0x080030e9
 80030c8:	080030f1 	.word	0x080030f1
 80030cc:	080030f9 	.word	0x080030f9
 80030d0:	0800310f 	.word	0x0800310f
 80030d4:	080030ff 	.word	0x080030ff
 80030d8:	0800310f 	.word	0x0800310f
 80030dc:	0800310f 	.word	0x0800310f
 80030e0:	0800310f 	.word	0x0800310f
 80030e4:	08003107 	.word	0x08003107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030e8:	f7fe fecc 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 80030ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030ee:	e014      	b.n	800311a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030f0:	f7fe fede 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 80030f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030f6:	e010      	b.n	800311a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030f8:	4b4e      	ldr	r3, [pc, #312]	@ (8003234 <UART_SetConfig+0x5c0>)
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030fc:	e00d      	b.n	800311a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030fe:	f7fe fe53 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8003102:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003104:	e009      	b.n	800311a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800310c:	e005      	b.n	800311a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003118:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800311a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8090 	beq.w	8003242 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	4a44      	ldr	r2, [pc, #272]	@ (8003238 <UART_SetConfig+0x5c4>)
 8003128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800312c:	461a      	mov	r2, r3
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	fbb3 f3f2 	udiv	r3, r3, r2
 8003134:	005a      	lsls	r2, r3, #1
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	085b      	lsrs	r3, r3, #1
 800313c:	441a      	add	r2, r3
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	fbb2 f3f3 	udiv	r3, r2, r3
 8003146:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	2b0f      	cmp	r3, #15
 800314c:	d916      	bls.n	800317c <UART_SetConfig+0x508>
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003154:	d212      	bcs.n	800317c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	b29b      	uxth	r3, r3
 800315a:	f023 030f 	bic.w	r3, r3, #15
 800315e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	b29b      	uxth	r3, r3
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	b29a      	uxth	r2, r3
 800316c:	8bfb      	ldrh	r3, [r7, #30]
 800316e:	4313      	orrs	r3, r2
 8003170:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	8bfa      	ldrh	r2, [r7, #30]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	e062      	b.n	8003242 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003182:	e05e      	b.n	8003242 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003184:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003188:	2b08      	cmp	r3, #8
 800318a:	d828      	bhi.n	80031de <UART_SetConfig+0x56a>
 800318c:	a201      	add	r2, pc, #4	@ (adr r2, 8003194 <UART_SetConfig+0x520>)
 800318e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003192:	bf00      	nop
 8003194:	080031b9 	.word	0x080031b9
 8003198:	080031c1 	.word	0x080031c1
 800319c:	080031c9 	.word	0x080031c9
 80031a0:	080031df 	.word	0x080031df
 80031a4:	080031cf 	.word	0x080031cf
 80031a8:	080031df 	.word	0x080031df
 80031ac:	080031df 	.word	0x080031df
 80031b0:	080031df 	.word	0x080031df
 80031b4:	080031d7 	.word	0x080031d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b8:	f7fe fe64 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 80031bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031be:	e014      	b.n	80031ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031c0:	f7fe fe76 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 80031c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031c6:	e010      	b.n	80031ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003234 <UART_SetConfig+0x5c0>)
 80031ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031cc:	e00d      	b.n	80031ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ce:	f7fe fdeb 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 80031d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031d4:	e009      	b.n	80031ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031dc:	e005      	b.n	80031ea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80031e8:	bf00      	nop
    }

    if (pclk != 0U)
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d028      	beq.n	8003242 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	4a10      	ldr	r2, [pc, #64]	@ (8003238 <UART_SetConfig+0x5c4>)
 80031f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031fa:	461a      	mov	r2, r3
 80031fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	441a      	add	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003212:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d910      	bls.n	800323c <UART_SetConfig+0x5c8>
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003220:	d20c      	bcs.n	800323c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	b29a      	uxth	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60da      	str	r2, [r3, #12]
 800322c:	e009      	b.n	8003242 <UART_SetConfig+0x5ce>
 800322e:	bf00      	nop
 8003230:	40008000 	.word	0x40008000
 8003234:	00f42400 	.word	0x00f42400
 8003238:	0800718c 	.word	0x0800718c
      }
      else
      {
        ret = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2201      	movs	r2, #1
 8003246:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2201      	movs	r2, #1
 800324e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2200      	movs	r2, #0
 8003256:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2200      	movs	r2, #0
 800325c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800325e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003262:	4618      	mov	r0, r3
 8003264:	3730      	adds	r7, #48	@ 0x30
 8003266:	46bd      	mov	sp, r7
 8003268:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800326c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01a      	beq.n	8003382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800336a:	d10a      	bne.n	8003382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
  }
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b098      	sub	sp, #96	@ 0x60
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033c0:	f7fd fd2c 	bl	8000e1c <HAL_GetTick>
 80033c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d12f      	bne.n	8003434 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033dc:	2200      	movs	r2, #0
 80033de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f88e 	bl	8003504 <UART_WaitOnFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d022      	beq.n	8003434 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f6:	e853 3f00 	ldrex	r3, [r3]
 80033fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003402:	653b      	str	r3, [r7, #80]	@ 0x50
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800340c:	647b      	str	r3, [r7, #68]	@ 0x44
 800340e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003414:	e841 2300 	strex	r3, r2, [r1]
 8003418:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800341a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e6      	bne.n	80033ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e063      	b.n	80034fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b04      	cmp	r3, #4
 8003440:	d149      	bne.n	80034d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003442:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800344a:	2200      	movs	r2, #0
 800344c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f857 	bl	8003504 <UART_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d03c      	beq.n	80034d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	623b      	str	r3, [r7, #32]
   return(result);
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003470:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	461a      	mov	r2, r3
 8003478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800347a:	633b      	str	r3, [r7, #48]	@ 0x30
 800347c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003482:	e841 2300 	strex	r3, r2, [r1]
 8003486:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e6      	bne.n	800345c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3308      	adds	r3, #8
 8003494:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	e853 3f00 	ldrex	r3, [r3]
 800349c:	60fb      	str	r3, [r7, #12]
   return(result);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3308      	adds	r3, #8
 80034ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034ae:	61fa      	str	r2, [r7, #28]
 80034b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b2:	69b9      	ldr	r1, [r7, #24]
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	e841 2300 	strex	r3, r2, [r1]
 80034ba:	617b      	str	r3, [r7, #20]
   return(result);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1e5      	bne.n	800348e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e012      	b.n	80034fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3758      	adds	r7, #88	@ 0x58
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	4613      	mov	r3, r2
 8003512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003514:	e04f      	b.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351c:	d04b      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351e:	f7fd fc7d 	bl	8000e1c <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	429a      	cmp	r2, r3
 800352c:	d302      	bcc.n	8003534 <UART_WaitOnFlagUntilTimeout+0x30>
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e04e      	b.n	80035d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	d037      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b80      	cmp	r3, #128	@ 0x80
 800354a:	d034      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b40      	cmp	r3, #64	@ 0x40
 8003550:	d031      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b08      	cmp	r3, #8
 800355e:	d110      	bne.n	8003582 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2208      	movs	r2, #8
 8003566:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f838 	bl	80035de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2208      	movs	r2, #8
 8003572:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e029      	b.n	80035d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800358c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003590:	d111      	bne.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800359a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f81e 	bl	80035de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e00f      	b.n	80035d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69da      	ldr	r2, [r3, #28]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4013      	ands	r3, r2
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d0a0      	beq.n	8003516 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035de:	b480      	push	{r7}
 80035e0:	b095      	sub	sp, #84	@ 0x54
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ee:	e853 3f00 	ldrex	r3, [r3]
 80035f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003604:	643b      	str	r3, [r7, #64]	@ 0x40
 8003606:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003608:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800360a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800360c:	e841 2300 	strex	r3, r2, [r1]
 8003610:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e6      	bne.n	80035e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3308      	adds	r3, #8
 800361e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	61fb      	str	r3, [r7, #28]
   return(result);
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800362e:	f023 0301 	bic.w	r3, r3, #1
 8003632:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3308      	adds	r3, #8
 800363a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800363c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800363e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e3      	bne.n	8003618 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003654:	2b01      	cmp	r3, #1
 8003656:	d118      	bne.n	800368a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	60bb      	str	r3, [r7, #8]
   return(result);
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f023 0310 	bic.w	r3, r3, #16
 800366c:	647b      	str	r3, [r7, #68]	@ 0x44
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003676:	61bb      	str	r3, [r7, #24]
 8003678:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	6979      	ldr	r1, [r7, #20]
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	613b      	str	r3, [r7, #16]
   return(result);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1e6      	bne.n	8003658 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800369e:	bf00      	nop
 80036a0:	3754      	adds	r7, #84	@ 0x54
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b085      	sub	sp, #20
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80036bc:	2302      	movs	r3, #2
 80036be:	e027      	b.n	8003710 <HAL_UARTEx_DisableFifoMode+0x66>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2224      	movs	r2, #36	@ 0x24
 80036cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0201 	bic.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80036ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003730:	2302      	movs	r3, #2
 8003732:	e02d      	b.n	8003790 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2224      	movs	r2, #36	@ 0x24
 8003740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f84f 	bl	8003814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e02d      	b.n	800380c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2224      	movs	r2, #36	@ 0x24
 80037bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f811 	bl	8003814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003820:	2b00      	cmp	r3, #0
 8003822:	d108      	bne.n	8003836 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003834:	e031      	b.n	800389a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003836:	2308      	movs	r3, #8
 8003838:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800383a:	2308      	movs	r3, #8
 800383c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	0e5b      	lsrs	r3, r3, #25
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	0f5b      	lsrs	r3, r3, #29
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800385e:	7bbb      	ldrb	r3, [r7, #14]
 8003860:	7b3a      	ldrb	r2, [r7, #12]
 8003862:	4911      	ldr	r1, [pc, #68]	@ (80038a8 <UARTEx_SetNbDataToProcess+0x94>)
 8003864:	5c8a      	ldrb	r2, [r1, r2]
 8003866:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800386a:	7b3a      	ldrb	r2, [r7, #12]
 800386c:	490f      	ldr	r1, [pc, #60]	@ (80038ac <UARTEx_SetNbDataToProcess+0x98>)
 800386e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003870:	fb93 f3f2 	sdiv	r3, r3, r2
 8003874:	b29a      	uxth	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	7b7a      	ldrb	r2, [r7, #13]
 8003880:	4909      	ldr	r1, [pc, #36]	@ (80038a8 <UARTEx_SetNbDataToProcess+0x94>)
 8003882:	5c8a      	ldrb	r2, [r1, r2]
 8003884:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003888:	7b7a      	ldrb	r2, [r7, #13]
 800388a:	4908      	ldr	r1, [pc, #32]	@ (80038ac <UARTEx_SetNbDataToProcess+0x98>)
 800388c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800388e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003892:	b29a      	uxth	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	080071a4 	.word	0x080071a4
 80038ac:	080071ac 	.word	0x080071ac

080038b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80038be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038c2:	2b84      	cmp	r3, #132	@ 0x84
 80038c4:	d005      	beq.n	80038d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80038c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4413      	add	r3, r2
 80038ce:	3303      	adds	r3, #3
 80038d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80038d2:	68fb      	ldr	r3, [r7, #12]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80038e4:	f000 ff34 	bl	8004750 <vTaskStartScheduler>
  
  return osOK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	bd80      	pop	{r7, pc}

080038ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80038ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038f0:	b087      	sub	sp, #28
 80038f2:	af02      	add	r7, sp, #8
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685c      	ldr	r4, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003904:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff ffcf 	bl	80038b0 <makeFreeRtosPriority>
 8003912:	4602      	mov	r2, r0
 8003914:	f107 030c 	add.w	r3, r7, #12
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	9200      	str	r2, [sp, #0]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	4632      	mov	r2, r6
 8003920:	4629      	mov	r1, r5
 8003922:	4620      	mov	r0, r4
 8003924:	f000 fd86 	bl	8004434 <xTaskCreate>
 8003928:	4603      	mov	r3, r0
 800392a:	2b01      	cmp	r3, #1
 800392c:	d001      	beq.n	8003932 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800392e:	2300      	movs	r3, #0
 8003930:	e000      	b.n	8003934 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003932:	68fb      	ldr	r3, [r7, #12]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800393c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <osDelay+0x16>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	e000      	b.n	8003954 <osDelay+0x18>
 8003952:	2301      	movs	r3, #1
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fec5 	bl	80046e4 <vTaskDelay>
  
  return osOK;
 800395a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f103 0208 	add.w	r2, r3, #8
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f04f 32ff 	mov.w	r2, #4294967295
 800397c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f103 0208 	add.w	r2, r3, #8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f103 0208 	add.w	r2, r3, #8
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	601a      	str	r2, [r3, #0]
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a06:	b480      	push	{r7}
 8003a08:	b085      	sub	sp, #20
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d103      	bne.n	8003a26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	e00c      	b.n	8003a40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	e002      	b.n	8003a34 <vListInsert+0x2e>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d2f6      	bcs.n	8003a2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	601a      	str	r2, [r3, #0]
}
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6892      	ldr	r2, [r2, #8]
 8003a8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6852      	ldr	r2, [r2, #4]
 8003a98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d103      	bne.n	8003aac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	1e5a      	subs	r2, r3, #1
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10b      	bne.n	8003af8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003af2:	bf00      	nop
 8003af4:	bf00      	nop
 8003af6:	e7fd      	b.n	8003af4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003af8:	f001 ffae 	bl	8005a58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b04:	68f9      	ldr	r1, [r7, #12]
 8003b06:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b08:	fb01 f303 	mul.w	r3, r1, r3
 8003b0c:	441a      	add	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	68f9      	ldr	r1, [r7, #12]
 8003b2c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	441a      	add	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	22ff      	movs	r2, #255	@ 0xff
 8003b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	22ff      	movs	r2, #255	@ 0xff
 8003b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d114      	bne.n	8003b78 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01a      	beq.n	8003b8c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	3310      	adds	r3, #16
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f001 f87c 	bl	8004c58 <xTaskRemoveFromEventList>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d012      	beq.n	8003b8c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b66:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <xQueueGenericReset+0xd0>)
 8003b68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	e009      	b.n	8003b8c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	3310      	adds	r3, #16
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff fef1 	bl	8003964 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3324      	adds	r3, #36	@ 0x24
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff feec 	bl	8003964 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b8c:	f001 ff96 	bl	8005abc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b90:	2301      	movs	r3, #1
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	e000ed04 	.word	0xe000ed04

08003ba0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	@ 0x28
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	4613      	mov	r3, r2
 8003bac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10b      	bne.n	8003bcc <xQueueGenericCreate+0x2c>
	__asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	613b      	str	r3, [r7, #16]
}
 8003bc6:	bf00      	nop
 8003bc8:	bf00      	nop
 8003bca:	e7fd      	b.n	8003bc8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	fb02 f303 	mul.w	r3, r2, r3
 8003bd4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3350      	adds	r3, #80	@ 0x50
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f002 f85e 	bl	8005c9c <pvPortMalloc>
 8003be0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00d      	beq.n	8003c04 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	3350      	adds	r3, #80	@ 0x50
 8003bf0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003bf2:	79fa      	ldrb	r2, [r7, #7]
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f805 	bl	8003c0e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c04:	69bb      	ldr	r3, [r7, #24]
	}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
 8003c1a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d103      	bne.n	8003c2a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e002      	b.n	8003c30 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	69b8      	ldr	r0, [r7, #24]
 8003c40:	f7ff ff44 	bl	8003acc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08e      	sub	sp, #56	@ 0x38
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c62:	2300      	movs	r3, #0
 8003c64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10b      	bne.n	8003c88 <xQueueGenericSend+0x34>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c82:	bf00      	nop
 8003c84:	bf00      	nop
 8003c86:	e7fd      	b.n	8003c84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d103      	bne.n	8003c96 <xQueueGenericSend+0x42>
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <xQueueGenericSend+0x46>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <xQueueGenericSend+0x48>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10b      	bne.n	8003cb8 <xQueueGenericSend+0x64>
	__asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003cb2:	bf00      	nop
 8003cb4:	bf00      	nop
 8003cb6:	e7fd      	b.n	8003cb4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d103      	bne.n	8003cc6 <xQueueGenericSend+0x72>
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <xQueueGenericSend+0x76>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <xQueueGenericSend+0x78>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10b      	bne.n	8003ce8 <xQueueGenericSend+0x94>
	__asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	623b      	str	r3, [r7, #32]
}
 8003ce2:	bf00      	nop
 8003ce4:	bf00      	nop
 8003ce6:	e7fd      	b.n	8003ce4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ce8:	f001 f95c 	bl	8004fa4 <xTaskGetSchedulerState>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d102      	bne.n	8003cf8 <xQueueGenericSend+0xa4>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <xQueueGenericSend+0xa8>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <xQueueGenericSend+0xaa>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10b      	bne.n	8003d1a <xQueueGenericSend+0xc6>
	__asm volatile
 8003d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	61fb      	str	r3, [r7, #28]
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	e7fd      	b.n	8003d16 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d1a:	f001 fe9d 	bl	8005a58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d302      	bcc.n	8003d30 <xQueueGenericSend+0xdc>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d129      	bne.n	8003d84 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d36:	f000 fa0f 	bl	8004158 <prvCopyDataToQueue>
 8003d3a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d010      	beq.n	8003d66 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d46:	3324      	adds	r3, #36	@ 0x24
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 ff85 	bl	8004c58 <xTaskRemoveFromEventList>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d013      	beq.n	8003d7c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d54:	4b3f      	ldr	r3, [pc, #252]	@ (8003e54 <xQueueGenericSend+0x200>)
 8003d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	e00a      	b.n	8003d7c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d6c:	4b39      	ldr	r3, [pc, #228]	@ (8003e54 <xQueueGenericSend+0x200>)
 8003d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d7c:	f001 fe9e 	bl	8005abc <vPortExitCritical>
				return pdPASS;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e063      	b.n	8003e4c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d103      	bne.n	8003d92 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d8a:	f001 fe97 	bl	8005abc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e05c      	b.n	8003e4c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d106      	bne.n	8003da6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d98:	f107 0314 	add.w	r3, r7, #20
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 ffbf 	bl	8004d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003da2:	2301      	movs	r3, #1
 8003da4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003da6:	f001 fe89 	bl	8005abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003daa:	f000 fd29 	bl	8004800 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dae:	f001 fe53 	bl	8005a58 <vPortEnterCritical>
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003db8:	b25b      	sxtb	r3, r3
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbe:	d103      	bne.n	8003dc8 <xQueueGenericSend+0x174>
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dce:	b25b      	sxtb	r3, r3
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d103      	bne.n	8003dde <xQueueGenericSend+0x18a>
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dde:	f001 fe6d 	bl	8005abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003de2:	1d3a      	adds	r2, r7, #4
 8003de4:	f107 0314 	add.w	r3, r7, #20
 8003de8:	4611      	mov	r1, r2
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 ffae 	bl	8004d4c <xTaskCheckForTimeOut>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d124      	bne.n	8003e40 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003df6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003df8:	f000 faa6 	bl	8004348 <prvIsQueueFull>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d018      	beq.n	8003e34 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e04:	3310      	adds	r3, #16
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4611      	mov	r1, r2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fed2 	bl	8004bb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e12:	f000 fa31 	bl	8004278 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e16:	f000 fd01 	bl	800481c <xTaskResumeAll>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f47f af7c 	bne.w	8003d1a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003e22:	4b0c      	ldr	r3, [pc, #48]	@ (8003e54 <xQueueGenericSend+0x200>)
 8003e24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	e772      	b.n	8003d1a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e36:	f000 fa1f 	bl	8004278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e3a:	f000 fcef 	bl	800481c <xTaskResumeAll>
 8003e3e:	e76c      	b.n	8003d1a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e42:	f000 fa19 	bl	8004278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e46:	f000 fce9 	bl	800481c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3738      	adds	r7, #56	@ 0x38
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	e000ed04 	.word	0xe000ed04

08003e58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b090      	sub	sp, #64	@ 0x40
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10b      	bne.n	8003e88 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e82:	bf00      	nop
 8003e84:	bf00      	nop
 8003e86:	e7fd      	b.n	8003e84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d103      	bne.n	8003e96 <xQueueGenericSendFromISR+0x3e>
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <xQueueGenericSendFromISR+0x42>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <xQueueGenericSendFromISR+0x44>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003eb2:	bf00      	nop
 8003eb4:	bf00      	nop
 8003eb6:	e7fd      	b.n	8003eb4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d103      	bne.n	8003ec6 <xQueueGenericSendFromISR+0x6e>
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <xQueueGenericSendFromISR+0x72>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <xQueueGenericSendFromISR+0x74>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10b      	bne.n	8003ee8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	623b      	str	r3, [r7, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	bf00      	nop
 8003ee6:	e7fd      	b.n	8003ee4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ee8:	f001 fe96 	bl	8005c18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003eec:	f3ef 8211 	mrs	r2, BASEPRI
 8003ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	61fa      	str	r2, [r7, #28]
 8003f02:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f04:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f06:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d302      	bcc.n	8003f1a <xQueueGenericSendFromISR+0xc2>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d12f      	bne.n	8003f7a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f30:	f000 f912 	bl	8004158 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f34:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3c:	d112      	bne.n	8003f64 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d016      	beq.n	8003f74 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f48:	3324      	adds	r3, #36	@ 0x24
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fe84 	bl	8004c58 <xTaskRemoveFromEventList>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00e      	beq.n	8003f74 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00b      	beq.n	8003f74 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	e007      	b.n	8003f74 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003f68:	3301      	adds	r3, #1
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	b25a      	sxtb	r2, r3
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003f74:	2301      	movs	r3, #1
 8003f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003f78:	e001      	b.n	8003f7e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f80:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3740      	adds	r7, #64	@ 0x40
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08c      	sub	sp, #48	@ 0x30
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10b      	bne.n	8003fc6 <xQueueReceive+0x32>
	__asm volatile
 8003fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	623b      	str	r3, [r7, #32]
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	e7fd      	b.n	8003fc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d103      	bne.n	8003fd4 <xQueueReceive+0x40>
 8003fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <xQueueReceive+0x44>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <xQueueReceive+0x46>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10b      	bne.n	8003ff6 <xQueueReceive+0x62>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	61fb      	str	r3, [r7, #28]
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	e7fd      	b.n	8003ff2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ff6:	f000 ffd5 	bl	8004fa4 <xTaskGetSchedulerState>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d102      	bne.n	8004006 <xQueueReceive+0x72>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <xQueueReceive+0x76>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <xQueueReceive+0x78>
 800400a:	2300      	movs	r3, #0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <xQueueReceive+0x94>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	61bb      	str	r3, [r7, #24]
}
 8004022:	bf00      	nop
 8004024:	bf00      	nop
 8004026:	e7fd      	b.n	8004024 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004028:	f001 fd16 	bl	8005a58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800402c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004030:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01f      	beq.n	8004078 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800403c:	f000 f8f6 	bl	800422c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	1e5a      	subs	r2, r3, #1
 8004044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004046:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00f      	beq.n	8004070 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004052:	3310      	adds	r3, #16
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fdff 	bl	8004c58 <xTaskRemoveFromEventList>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004060:	4b3c      	ldr	r3, [pc, #240]	@ (8004154 <xQueueReceive+0x1c0>)
 8004062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004070:	f001 fd24 	bl	8005abc <vPortExitCritical>
				return pdPASS;
 8004074:	2301      	movs	r3, #1
 8004076:	e069      	b.n	800414c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d103      	bne.n	8004086 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800407e:	f001 fd1d 	bl	8005abc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004082:	2300      	movs	r3, #0
 8004084:	e062      	b.n	800414c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800408c:	f107 0310 	add.w	r3, r7, #16
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fe45 	bl	8004d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004096:	2301      	movs	r3, #1
 8004098:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800409a:	f001 fd0f 	bl	8005abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800409e:	f000 fbaf 	bl	8004800 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040a2:	f001 fcd9 	bl	8005a58 <vPortEnterCritical>
 80040a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040ac:	b25b      	sxtb	r3, r3
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d103      	bne.n	80040bc <xQueueReceive+0x128>
 80040b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040c2:	b25b      	sxtb	r3, r3
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d103      	bne.n	80040d2 <xQueueReceive+0x13e>
 80040ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040d2:	f001 fcf3 	bl	8005abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040d6:	1d3a      	adds	r2, r7, #4
 80040d8:	f107 0310 	add.w	r3, r7, #16
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fe34 	bl	8004d4c <xTaskCheckForTimeOut>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d123      	bne.n	8004132 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040ec:	f000 f916 	bl	800431c <prvIsQueueEmpty>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d017      	beq.n	8004126 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f8:	3324      	adds	r3, #36	@ 0x24
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4611      	mov	r1, r2
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fd58 	bl	8004bb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004104:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004106:	f000 f8b7 	bl	8004278 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800410a:	f000 fb87 	bl	800481c <xTaskResumeAll>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d189      	bne.n	8004028 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004114:	4b0f      	ldr	r3, [pc, #60]	@ (8004154 <xQueueReceive+0x1c0>)
 8004116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	e780      	b.n	8004028 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004128:	f000 f8a6 	bl	8004278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800412c:	f000 fb76 	bl	800481c <xTaskResumeAll>
 8004130:	e77a      	b.n	8004028 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004134:	f000 f8a0 	bl	8004278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004138:	f000 fb70 	bl	800481c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800413c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800413e:	f000 f8ed 	bl	800431c <prvIsQueueEmpty>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	f43f af6f 	beq.w	8004028 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800414a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800414c:	4618      	mov	r0, r3
 800414e:	3730      	adds	r7, #48	@ 0x30
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	e000ed04 	.word	0xe000ed04

08004158 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10d      	bne.n	8004192 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d14d      	bne.n	800421a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	4618      	mov	r0, r3
 8004184:	f000 ff2c 	bl	8004fe0 <xTaskPriorityDisinherit>
 8004188:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	609a      	str	r2, [r3, #8]
 8004190:	e043      	b.n	800421a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d119      	bne.n	80041cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6858      	ldr	r0, [r3, #4]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a0:	461a      	mov	r2, r3
 80041a2:	68b9      	ldr	r1, [r7, #8]
 80041a4:	f002 f97d 	bl	80064a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b0:	441a      	add	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d32b      	bcc.n	800421a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	605a      	str	r2, [r3, #4]
 80041ca:	e026      	b.n	800421a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68d8      	ldr	r0, [r3, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	461a      	mov	r2, r3
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	f002 f963 	bl	80064a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e4:	425b      	negs	r3, r3
 80041e6:	441a      	add	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d207      	bcs.n	8004208 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	425b      	negs	r3, r3
 8004202:	441a      	add	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d105      	bne.n	800421a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	3b01      	subs	r3, #1
 8004218:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004222:	697b      	ldr	r3, [r7, #20]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	d018      	beq.n	8004270 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	441a      	add	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	429a      	cmp	r2, r3
 8004256:	d303      	bcc.n	8004260 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68d9      	ldr	r1, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004268:	461a      	mov	r2, r3
 800426a:	6838      	ldr	r0, [r7, #0]
 800426c:	f002 f919 	bl	80064a2 <memcpy>
	}
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004280:	f001 fbea 	bl	8005a58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800428a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800428c:	e011      	b.n	80042b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	2b00      	cmp	r3, #0
 8004294:	d012      	beq.n	80042bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3324      	adds	r3, #36	@ 0x24
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fcdc 	bl	8004c58 <xTaskRemoveFromEventList>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80042a6:	f000 fdb5 	bl	8004e14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	dce9      	bgt.n	800428e <prvUnlockQueue+0x16>
 80042ba:	e000      	b.n	80042be <prvUnlockQueue+0x46>
					break;
 80042bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	22ff      	movs	r2, #255	@ 0xff
 80042c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80042c6:	f001 fbf9 	bl	8005abc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042ca:	f001 fbc5 	bl	8005a58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042d6:	e011      	b.n	80042fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d012      	beq.n	8004306 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3310      	adds	r3, #16
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fcb7 	bl	8004c58 <xTaskRemoveFromEventList>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042f0:	f000 fd90 	bl	8004e14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042f4:	7bbb      	ldrb	r3, [r7, #14]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004300:	2b00      	cmp	r3, #0
 8004302:	dce9      	bgt.n	80042d8 <prvUnlockQueue+0x60>
 8004304:	e000      	b.n	8004308 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004306:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	22ff      	movs	r2, #255	@ 0xff
 800430c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004310:	f001 fbd4 	bl	8005abc <vPortExitCritical>
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004324:	f001 fb98 	bl	8005a58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432c:	2b00      	cmp	r3, #0
 800432e:	d102      	bne.n	8004336 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004330:	2301      	movs	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e001      	b.n	800433a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800433a:	f001 fbbf 	bl	8005abc <vPortExitCritical>

	return xReturn;
 800433e:	68fb      	ldr	r3, [r7, #12]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004350:	f001 fb82 	bl	8005a58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800435c:	429a      	cmp	r2, r3
 800435e:	d102      	bne.n	8004366 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004360:	2301      	movs	r3, #1
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	e001      	b.n	800436a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800436a:	f001 fba7 	bl	8005abc <vPortExitCritical>

	return xReturn;
 800436e:	68fb      	ldr	r3, [r7, #12]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	e014      	b.n	80043b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004388:	4a0f      	ldr	r2, [pc, #60]	@ (80043c8 <vQueueAddToRegistry+0x50>)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10b      	bne.n	80043ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004394:	490c      	ldr	r1, [pc, #48]	@ (80043c8 <vQueueAddToRegistry+0x50>)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800439e:	4a0a      	ldr	r2, [pc, #40]	@ (80043c8 <vQueueAddToRegistry+0x50>)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4413      	add	r3, r2
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80043aa:	e006      	b.n	80043ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3301      	adds	r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b07      	cmp	r3, #7
 80043b6:	d9e7      	bls.n	8004388 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	200003bc 	.word	0x200003bc

080043cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80043dc:	f001 fb3c 	bl	8005a58 <vPortEnterCritical>
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043e6:	b25b      	sxtb	r3, r3
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ec:	d103      	bne.n	80043f6 <vQueueWaitForMessageRestricted+0x2a>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043fc:	b25b      	sxtb	r3, r3
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004402:	d103      	bne.n	800440c <vQueueWaitForMessageRestricted+0x40>
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800440c:	f001 fb56 	bl	8005abc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004414:	2b00      	cmp	r3, #0
 8004416:	d106      	bne.n	8004426 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	3324      	adds	r3, #36	@ 0x24
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fbed 	bl	8004c00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004426:	6978      	ldr	r0, [r7, #20]
 8004428:	f7ff ff26 	bl	8004278 <prvUnlockQueue>
	}
 800442c:	bf00      	nop
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08c      	sub	sp, #48	@ 0x30
 8004438:	af04      	add	r7, sp, #16
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	4613      	mov	r3, r2
 8004442:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4618      	mov	r0, r3
 800444a:	f001 fc27 	bl	8005c9c <pvPortMalloc>
 800444e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00e      	beq.n	8004474 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004456:	20b8      	movs	r0, #184	@ 0xb8
 8004458:	f001 fc20 	bl	8005c9c <pvPortMalloc>
 800445c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	631a      	str	r2, [r3, #48]	@ 0x30
 800446a:	e005      	b.n	8004478 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800446c:	6978      	ldr	r0, [r7, #20]
 800446e:	f001 fce3 	bl	8005e38 <vPortFree>
 8004472:	e001      	b.n	8004478 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004474:	2300      	movs	r3, #0
 8004476:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d013      	beq.n	80044a6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800447e:	88fa      	ldrh	r2, [r7, #6]
 8004480:	2300      	movs	r3, #0
 8004482:	9303      	str	r3, [sp, #12]
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	9302      	str	r3, [sp, #8]
 8004488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f80f 	bl	80044b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800449a:	69f8      	ldr	r0, [r7, #28]
 800449c:	f000 f8b4 	bl	8004608 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044a0:	2301      	movs	r3, #1
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	e002      	b.n	80044ac <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295
 80044aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044ac:	69bb      	ldr	r3, [r7, #24]
	}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3720      	adds	r7, #32
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	461a      	mov	r2, r3
 80044d0:	21a5      	movs	r1, #165	@ 0xa5
 80044d2:	f001 ff14 	bl	80062fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044e0:	3b01      	subs	r3, #1
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	f023 0307 	bic.w	r3, r3, #7
 80044ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00b      	beq.n	8004512 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80044fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	617b      	str	r3, [r7, #20]
}
 800450c:	bf00      	nop
 800450e:	bf00      	nop
 8004510:	e7fd      	b.n	800450e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01f      	beq.n	8004558 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004518:	2300      	movs	r3, #0
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	e012      	b.n	8004544 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	4413      	add	r3, r2
 8004524:	7819      	ldrb	r1, [r3, #0]
 8004526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	4413      	add	r3, r2
 800452c:	3334      	adds	r3, #52	@ 0x34
 800452e:	460a      	mov	r2, r1
 8004530:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	4413      	add	r3, r2
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d006      	beq.n	800454c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	3301      	adds	r3, #1
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	2b1f      	cmp	r3, #31
 8004548:	d9e9      	bls.n	800451e <prvInitialiseNewTask+0x66>
 800454a:	e000      	b.n	800454e <prvInitialiseNewTask+0x96>
			{
				break;
 800454c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800454e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8004556:	e003      	b.n	8004560 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004562:	2b06      	cmp	r3, #6
 8004564:	d901      	bls.n	800456a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004566:	2306      	movs	r3, #6
 8004568:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800456a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800456e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004572:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004574:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8004576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004578:	2200      	movs	r2, #0
 800457a:	661a      	str	r2, [r3, #96]	@ 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800457c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457e:	3304      	adds	r3, #4
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff fa0f 	bl	80039a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004588:	3318      	adds	r3, #24
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fa0a 	bl	80039a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004594:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004598:	f1c3 0207 	rsb	r2, r3, #7
 800459c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80045b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b8:	3364      	adds	r3, #100	@ 0x64
 80045ba:	224c      	movs	r2, #76	@ 0x4c
 80045bc:	2100      	movs	r1, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f001 fe9d 	bl	80062fe <memset>
 80045c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c6:	4a0d      	ldr	r2, [pc, #52]	@ (80045fc <prvInitialiseNewTask+0x144>)
 80045c8:	669a      	str	r2, [r3, #104]	@ 0x68
 80045ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004600 <prvInitialiseNewTask+0x148>)
 80045ce:	66da      	str	r2, [r3, #108]	@ 0x6c
 80045d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004604 <prvInitialiseNewTask+0x14c>)
 80045d4:	671a      	str	r2, [r3, #112]	@ 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	68f9      	ldr	r1, [r7, #12]
 80045da:	69b8      	ldr	r0, [r7, #24]
 80045dc:	f001 f90a 	bl	80057f4 <pxPortInitialiseStack>
 80045e0:	4602      	mov	r2, r0
 80045e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045f2:	bf00      	nop
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	2000118c 	.word	0x2000118c
 8004600:	200011f4 	.word	0x200011f4
 8004604:	2000125c 	.word	0x2000125c

08004608 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004610:	f001 fa22 	bl	8005a58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004614:	4b2c      	ldr	r3, [pc, #176]	@ (80046c8 <prvAddNewTaskToReadyList+0xc0>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3301      	adds	r3, #1
 800461a:	4a2b      	ldr	r2, [pc, #172]	@ (80046c8 <prvAddNewTaskToReadyList+0xc0>)
 800461c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800461e:	4b2b      	ldr	r3, [pc, #172]	@ (80046cc <prvAddNewTaskToReadyList+0xc4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004626:	4a29      	ldr	r2, [pc, #164]	@ (80046cc <prvAddNewTaskToReadyList+0xc4>)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800462c:	4b26      	ldr	r3, [pc, #152]	@ (80046c8 <prvAddNewTaskToReadyList+0xc0>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d110      	bne.n	8004656 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004634:	f000 fc12 	bl	8004e5c <prvInitialiseTaskLists>
 8004638:	e00d      	b.n	8004656 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800463a:	4b25      	ldr	r3, [pc, #148]	@ (80046d0 <prvAddNewTaskToReadyList+0xc8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004642:	4b22      	ldr	r3, [pc, #136]	@ (80046cc <prvAddNewTaskToReadyList+0xc4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464c:	429a      	cmp	r2, r3
 800464e:	d802      	bhi.n	8004656 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004650:	4a1e      	ldr	r2, [pc, #120]	@ (80046cc <prvAddNewTaskToReadyList+0xc4>)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004656:	4b1f      	ldr	r3, [pc, #124]	@ (80046d4 <prvAddNewTaskToReadyList+0xcc>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3301      	adds	r3, #1
 800465c:	4a1d      	ldr	r2, [pc, #116]	@ (80046d4 <prvAddNewTaskToReadyList+0xcc>)
 800465e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004660:	4b1c      	ldr	r3, [pc, #112]	@ (80046d4 <prvAddNewTaskToReadyList+0xcc>)
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466c:	2201      	movs	r2, #1
 800466e:	409a      	lsls	r2, r3
 8004670:	4b19      	ldr	r3, [pc, #100]	@ (80046d8 <prvAddNewTaskToReadyList+0xd0>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4313      	orrs	r3, r2
 8004676:	4a18      	ldr	r2, [pc, #96]	@ (80046d8 <prvAddNewTaskToReadyList+0xd0>)
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4a15      	ldr	r2, [pc, #84]	@ (80046dc <prvAddNewTaskToReadyList+0xd4>)
 8004688:	441a      	add	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3304      	adds	r3, #4
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f7ff f994 	bl	80039be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004696:	f001 fa11 	bl	8005abc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800469a:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <prvAddNewTaskToReadyList+0xc8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00e      	beq.n	80046c0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046a2:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <prvAddNewTaskToReadyList+0xc4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d207      	bcs.n	80046c0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046b0:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <prvAddNewTaskToReadyList+0xd8>)
 80046b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	200004fc 	.word	0x200004fc
 80046cc:	200003fc 	.word	0x200003fc
 80046d0:	20000508 	.word	0x20000508
 80046d4:	20000518 	.word	0x20000518
 80046d8:	20000504 	.word	0x20000504
 80046dc:	20000400 	.word	0x20000400
 80046e0:	e000ed04 	.word	0xe000ed04

080046e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d018      	beq.n	8004728 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046f6:	4b14      	ldr	r3, [pc, #80]	@ (8004748 <vTaskDelay+0x64>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00b      	beq.n	8004716 <vTaskDelay+0x32>
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	60bb      	str	r3, [r7, #8]
}
 8004710:	bf00      	nop
 8004712:	bf00      	nop
 8004714:	e7fd      	b.n	8004712 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004716:	f000 f873 	bl	8004800 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800471a:	2100      	movs	r1, #0
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fce7 	bl	80050f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004722:	f000 f87b 	bl	800481c <xTaskResumeAll>
 8004726:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d107      	bne.n	800473e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800472e:	4b07      	ldr	r3, [pc, #28]	@ (800474c <vTaskDelay+0x68>)
 8004730:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000524 	.word	0x20000524
 800474c:	e000ed04 	.word	0xe000ed04

08004750 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004756:	4b22      	ldr	r3, [pc, #136]	@ (80047e0 <vTaskStartScheduler+0x90>)
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	2300      	movs	r3, #0
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	2300      	movs	r3, #0
 8004760:	2240      	movs	r2, #64	@ 0x40
 8004762:	4920      	ldr	r1, [pc, #128]	@ (80047e4 <vTaskStartScheduler+0x94>)
 8004764:	4820      	ldr	r0, [pc, #128]	@ (80047e8 <vTaskStartScheduler+0x98>)
 8004766:	f7ff fe65 	bl	8004434 <xTaskCreate>
 800476a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d102      	bne.n	8004778 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8004772:	f000 fd23 	bl	80051bc <xTimerCreateTimerTask>
 8004776:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d11b      	bne.n	80047b6 <vTaskStartScheduler+0x66>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	60bb      	str	r3, [r7, #8]
}
 8004790:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004792:	4b16      	ldr	r3, [pc, #88]	@ (80047ec <vTaskStartScheduler+0x9c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3364      	adds	r3, #100	@ 0x64
 8004798:	4a15      	ldr	r2, [pc, #84]	@ (80047f0 <vTaskStartScheduler+0xa0>)
 800479a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800479c:	4b15      	ldr	r3, [pc, #84]	@ (80047f4 <vTaskStartScheduler+0xa4>)
 800479e:	f04f 32ff 	mov.w	r2, #4294967295
 80047a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047a4:	4b14      	ldr	r3, [pc, #80]	@ (80047f8 <vTaskStartScheduler+0xa8>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047aa:	4b14      	ldr	r3, [pc, #80]	@ (80047fc <vTaskStartScheduler+0xac>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047b0:	f001 f8ae 	bl	8005910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047b4:	e00f      	b.n	80047d6 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	d10b      	bne.n	80047d6 <vTaskStartScheduler+0x86>
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	607b      	str	r3, [r7, #4]
}
 80047d0:	bf00      	nop
 80047d2:	bf00      	nop
 80047d4:	e7fd      	b.n	80047d2 <vTaskStartScheduler+0x82>
}
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20000520 	.word	0x20000520
 80047e4:	0800715c 	.word	0x0800715c
 80047e8:	08004e2d 	.word	0x08004e2d
 80047ec:	200003fc 	.word	0x200003fc
 80047f0:	2000001c 	.word	0x2000001c
 80047f4:	2000051c 	.word	0x2000051c
 80047f8:	20000508 	.word	0x20000508
 80047fc:	20000500 	.word	0x20000500

08004800 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004804:	4b04      	ldr	r3, [pc, #16]	@ (8004818 <vTaskSuspendAll+0x18>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3301      	adds	r3, #1
 800480a:	4a03      	ldr	r2, [pc, #12]	@ (8004818 <vTaskSuspendAll+0x18>)
 800480c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800480e:	bf00      	nop
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	20000524 	.word	0x20000524

0800481c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004826:	2300      	movs	r3, #0
 8004828:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800482a:	4b42      	ldr	r3, [pc, #264]	@ (8004934 <xTaskResumeAll+0x118>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10b      	bne.n	800484a <xTaskResumeAll+0x2e>
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	603b      	str	r3, [r7, #0]
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	e7fd      	b.n	8004846 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800484a:	f001 f905 	bl	8005a58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800484e:	4b39      	ldr	r3, [pc, #228]	@ (8004934 <xTaskResumeAll+0x118>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3b01      	subs	r3, #1
 8004854:	4a37      	ldr	r2, [pc, #220]	@ (8004934 <xTaskResumeAll+0x118>)
 8004856:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004858:	4b36      	ldr	r3, [pc, #216]	@ (8004934 <xTaskResumeAll+0x118>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d161      	bne.n	8004924 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004860:	4b35      	ldr	r3, [pc, #212]	@ (8004938 <xTaskResumeAll+0x11c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d05d      	beq.n	8004924 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004868:	e02e      	b.n	80048c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800486a:	4b34      	ldr	r3, [pc, #208]	@ (800493c <xTaskResumeAll+0x120>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3318      	adds	r3, #24
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff f8fe 	bl	8003a78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3304      	adds	r3, #4
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff f8f9 	bl	8003a78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488a:	2201      	movs	r2, #1
 800488c:	409a      	lsls	r2, r3
 800488e:	4b2c      	ldr	r3, [pc, #176]	@ (8004940 <xTaskResumeAll+0x124>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4313      	orrs	r3, r2
 8004894:	4a2a      	ldr	r2, [pc, #168]	@ (8004940 <xTaskResumeAll+0x124>)
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4a27      	ldr	r2, [pc, #156]	@ (8004944 <xTaskResumeAll+0x128>)
 80048a6:	441a      	add	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3304      	adds	r3, #4
 80048ac:	4619      	mov	r1, r3
 80048ae:	4610      	mov	r0, r2
 80048b0:	f7ff f885 	bl	80039be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048b8:	4b23      	ldr	r3, [pc, #140]	@ (8004948 <xTaskResumeAll+0x12c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048be:	429a      	cmp	r2, r3
 80048c0:	d302      	bcc.n	80048c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80048c2:	4b22      	ldr	r3, [pc, #136]	@ (800494c <xTaskResumeAll+0x130>)
 80048c4:	2201      	movs	r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048c8:	4b1c      	ldr	r3, [pc, #112]	@ (800493c <xTaskResumeAll+0x120>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1cc      	bne.n	800486a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048d6:	f000 fb45 	bl	8004f64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048da:	4b1d      	ldr	r3, [pc, #116]	@ (8004950 <xTaskResumeAll+0x134>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d010      	beq.n	8004908 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048e6:	f000 f847 	bl	8004978 <xTaskIncrementTick>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80048f0:	4b16      	ldr	r3, [pc, #88]	@ (800494c <xTaskResumeAll+0x130>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f1      	bne.n	80048e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004902:	4b13      	ldr	r3, [pc, #76]	@ (8004950 <xTaskResumeAll+0x134>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004908:	4b10      	ldr	r3, [pc, #64]	@ (800494c <xTaskResumeAll+0x130>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d009      	beq.n	8004924 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004910:	2301      	movs	r3, #1
 8004912:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004914:	4b0f      	ldr	r3, [pc, #60]	@ (8004954 <xTaskResumeAll+0x138>)
 8004916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004924:	f001 f8ca 	bl	8005abc <vPortExitCritical>

	return xAlreadyYielded;
 8004928:	68bb      	ldr	r3, [r7, #8]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000524 	.word	0x20000524
 8004938:	200004fc 	.word	0x200004fc
 800493c:	200004bc 	.word	0x200004bc
 8004940:	20000504 	.word	0x20000504
 8004944:	20000400 	.word	0x20000400
 8004948:	200003fc 	.word	0x200003fc
 800494c:	20000510 	.word	0x20000510
 8004950:	2000050c 	.word	0x2000050c
 8004954:	e000ed04 	.word	0xe000ed04

08004958 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800495e:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <xTaskGetTickCount+0x1c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004964:	687b      	ldr	r3, [r7, #4]
}
 8004966:	4618      	mov	r0, r3
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000500 	.word	0x20000500

08004978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004982:	4b4f      	ldr	r3, [pc, #316]	@ (8004ac0 <xTaskIncrementTick+0x148>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	f040 808f 	bne.w	8004aaa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800498c:	4b4d      	ldr	r3, [pc, #308]	@ (8004ac4 <xTaskIncrementTick+0x14c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3301      	adds	r3, #1
 8004992:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004994:	4a4b      	ldr	r2, [pc, #300]	@ (8004ac4 <xTaskIncrementTick+0x14c>)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d121      	bne.n	80049e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80049a0:	4b49      	ldr	r3, [pc, #292]	@ (8004ac8 <xTaskIncrementTick+0x150>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00b      	beq.n	80049c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	603b      	str	r3, [r7, #0]
}
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	e7fd      	b.n	80049be <xTaskIncrementTick+0x46>
 80049c2:	4b41      	ldr	r3, [pc, #260]	@ (8004ac8 <xTaskIncrementTick+0x150>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	4b40      	ldr	r3, [pc, #256]	@ (8004acc <xTaskIncrementTick+0x154>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a3e      	ldr	r2, [pc, #248]	@ (8004ac8 <xTaskIncrementTick+0x150>)
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	4a3e      	ldr	r2, [pc, #248]	@ (8004acc <xTaskIncrementTick+0x154>)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ad0 <xTaskIncrementTick+0x158>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3301      	adds	r3, #1
 80049dc:	4a3c      	ldr	r2, [pc, #240]	@ (8004ad0 <xTaskIncrementTick+0x158>)
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	f000 fac0 	bl	8004f64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049e4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ad4 <xTaskIncrementTick+0x15c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d348      	bcc.n	8004a80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049ee:	4b36      	ldr	r3, [pc, #216]	@ (8004ac8 <xTaskIncrementTick+0x150>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d104      	bne.n	8004a02 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049f8:	4b36      	ldr	r3, [pc, #216]	@ (8004ad4 <xTaskIncrementTick+0x15c>)
 80049fa:	f04f 32ff 	mov.w	r2, #4294967295
 80049fe:	601a      	str	r2, [r3, #0]
					break;
 8004a00:	e03e      	b.n	8004a80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a02:	4b31      	ldr	r3, [pc, #196]	@ (8004ac8 <xTaskIncrementTick+0x150>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d203      	bcs.n	8004a22 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a1a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ad4 <xTaskIncrementTick+0x15c>)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a20:	e02e      	b.n	8004a80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	3304      	adds	r3, #4
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff f826 	bl	8003a78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d004      	beq.n	8004a3e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	3318      	adds	r3, #24
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff f81d 	bl	8003a78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	2201      	movs	r2, #1
 8004a44:	409a      	lsls	r2, r3
 8004a46:	4b24      	ldr	r3, [pc, #144]	@ (8004ad8 <xTaskIncrementTick+0x160>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	4a22      	ldr	r2, [pc, #136]	@ (8004ad8 <xTaskIncrementTick+0x160>)
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004adc <xTaskIncrementTick+0x164>)
 8004a5e:	441a      	add	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	3304      	adds	r3, #4
 8004a64:	4619      	mov	r1, r3
 8004a66:	4610      	mov	r0, r2
 8004a68:	f7fe ffa9 	bl	80039be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a70:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae0 <xTaskIncrementTick+0x168>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d3b9      	bcc.n	80049ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a7e:	e7b6      	b.n	80049ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a80:	4b17      	ldr	r3, [pc, #92]	@ (8004ae0 <xTaskIncrementTick+0x168>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a86:	4915      	ldr	r1, [pc, #84]	@ (8004adc <xTaskIncrementTick+0x164>)
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d901      	bls.n	8004a9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a9c:	4b11      	ldr	r3, [pc, #68]	@ (8004ae4 <xTaskIncrementTick+0x16c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	e004      	b.n	8004ab4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae8 <xTaskIncrementTick+0x170>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ae8 <xTaskIncrementTick+0x170>)
 8004ab2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ab4:	697b      	ldr	r3, [r7, #20]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000524 	.word	0x20000524
 8004ac4:	20000500 	.word	0x20000500
 8004ac8:	200004b4 	.word	0x200004b4
 8004acc:	200004b8 	.word	0x200004b8
 8004ad0:	20000514 	.word	0x20000514
 8004ad4:	2000051c 	.word	0x2000051c
 8004ad8:	20000504 	.word	0x20000504
 8004adc:	20000400 	.word	0x20000400
 8004ae0:	200003fc 	.word	0x200003fc
 8004ae4:	20000510 	.word	0x20000510
 8004ae8:	2000050c 	.word	0x2000050c

08004aec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004af2:	4b2a      	ldr	r3, [pc, #168]	@ (8004b9c <vTaskSwitchContext+0xb0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004afa:	4b29      	ldr	r3, [pc, #164]	@ (8004ba0 <vTaskSwitchContext+0xb4>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b00:	e045      	b.n	8004b8e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004b02:	4b27      	ldr	r3, [pc, #156]	@ (8004ba0 <vTaskSwitchContext+0xb4>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b08:	4b26      	ldr	r3, [pc, #152]	@ (8004ba4 <vTaskSwitchContext+0xb8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	fab3 f383 	clz	r3, r3
 8004b14:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004b16:	7afb      	ldrb	r3, [r7, #11]
 8004b18:	f1c3 031f 	rsb	r3, r3, #31
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	4922      	ldr	r1, [pc, #136]	@ (8004ba8 <vTaskSwitchContext+0xbc>)
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10b      	bne.n	8004b4a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	607b      	str	r3, [r7, #4]
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop
 8004b48:	e7fd      	b.n	8004b46 <vTaskSwitchContext+0x5a>
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4a14      	ldr	r2, [pc, #80]	@ (8004ba8 <vTaskSwitchContext+0xbc>)
 8004b56:	4413      	add	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	605a      	str	r2, [r3, #4]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	3308      	adds	r3, #8
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d104      	bne.n	8004b7a <vTaskSwitchContext+0x8e>
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	605a      	str	r2, [r3, #4]
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4a0a      	ldr	r2, [pc, #40]	@ (8004bac <vTaskSwitchContext+0xc0>)
 8004b82:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b84:	4b09      	ldr	r3, [pc, #36]	@ (8004bac <vTaskSwitchContext+0xc0>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	3364      	adds	r3, #100	@ 0x64
 8004b8a:	4a09      	ldr	r2, [pc, #36]	@ (8004bb0 <vTaskSwitchContext+0xc4>)
 8004b8c:	6013      	str	r3, [r2, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	20000524 	.word	0x20000524
 8004ba0:	20000510 	.word	0x20000510
 8004ba4:	20000504 	.word	0x20000504
 8004ba8:	20000400 	.word	0x20000400
 8004bac:	200003fc 	.word	0x200003fc
 8004bb0:	2000001c 	.word	0x2000001c

08004bb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	60fb      	str	r3, [r7, #12]
}
 8004bd6:	bf00      	nop
 8004bd8:	bf00      	nop
 8004bda:	e7fd      	b.n	8004bd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bdc:	4b07      	ldr	r3, [pc, #28]	@ (8004bfc <vTaskPlaceOnEventList+0x48>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3318      	adds	r3, #24
 8004be2:	4619      	mov	r1, r3
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7fe ff0e 	bl	8003a06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bea:	2101      	movs	r1, #1
 8004bec:	6838      	ldr	r0, [r7, #0]
 8004bee:	f000 fa7f 	bl	80050f0 <prvAddCurrentTaskToDelayedList>
}
 8004bf2:	bf00      	nop
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	200003fc 	.word	0x200003fc

08004c00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10b      	bne.n	8004c2a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	617b      	str	r3, [r7, #20]
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	e7fd      	b.n	8004c26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c54 <vTaskPlaceOnEventListRestricted+0x54>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3318      	adds	r3, #24
 8004c30:	4619      	mov	r1, r3
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f7fe fec3 	bl	80039be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c42:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	68b8      	ldr	r0, [r7, #8]
 8004c48:	f000 fa52 	bl	80050f0 <prvAddCurrentTaskToDelayedList>
	}
 8004c4c:	bf00      	nop
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	200003fc 	.word	0x200003fc

08004c58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10b      	bne.n	8004c86 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	60fb      	str	r3, [r7, #12]
}
 8004c80:	bf00      	nop
 8004c82:	bf00      	nop
 8004c84:	e7fd      	b.n	8004c82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	3318      	adds	r3, #24
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fe fef4 	bl	8003a78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c90:	4b1d      	ldr	r3, [pc, #116]	@ (8004d08 <xTaskRemoveFromEventList+0xb0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d11c      	bne.n	8004cd2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fe feeb 	bl	8003a78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	409a      	lsls	r2, r3
 8004caa:	4b18      	ldr	r3, [pc, #96]	@ (8004d0c <xTaskRemoveFromEventList+0xb4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	4a16      	ldr	r2, [pc, #88]	@ (8004d0c <xTaskRemoveFromEventList+0xb4>)
 8004cb2:	6013      	str	r3, [r2, #0]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4a13      	ldr	r2, [pc, #76]	@ (8004d10 <xTaskRemoveFromEventList+0xb8>)
 8004cc2:	441a      	add	r2, r3
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	f7fe fe77 	bl	80039be <vListInsertEnd>
 8004cd0:	e005      	b.n	8004cde <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	3318      	adds	r3, #24
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	480e      	ldr	r0, [pc, #56]	@ (8004d14 <xTaskRemoveFromEventList+0xbc>)
 8004cda:	f7fe fe70 	bl	80039be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d18 <xTaskRemoveFromEventList+0xc0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d905      	bls.n	8004cf8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004cec:	2301      	movs	r3, #1
 8004cee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8004d1c <xTaskRemoveFromEventList+0xc4>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	e001      	b.n	8004cfc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004cfc:	697b      	ldr	r3, [r7, #20]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000524 	.word	0x20000524
 8004d0c:	20000504 	.word	0x20000504
 8004d10:	20000400 	.word	0x20000400
 8004d14:	200004bc 	.word	0x200004bc
 8004d18:	200003fc 	.word	0x200003fc
 8004d1c:	20000510 	.word	0x20000510

08004d20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d28:	4b06      	ldr	r3, [pc, #24]	@ (8004d44 <vTaskInternalSetTimeOutState+0x24>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d30:	4b05      	ldr	r3, [pc, #20]	@ (8004d48 <vTaskInternalSetTimeOutState+0x28>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	605a      	str	r2, [r3, #4]
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	20000514 	.word	0x20000514
 8004d48:	20000500 	.word	0x20000500

08004d4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10b      	bne.n	8004d74 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	613b      	str	r3, [r7, #16]
}
 8004d6e:	bf00      	nop
 8004d70:	bf00      	nop
 8004d72:	e7fd      	b.n	8004d70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10b      	bne.n	8004d92 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	60fb      	str	r3, [r7, #12]
}
 8004d8c:	bf00      	nop
 8004d8e:	bf00      	nop
 8004d90:	e7fd      	b.n	8004d8e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004d92:	f000 fe61 	bl	8005a58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d96:	4b1d      	ldr	r3, [pc, #116]	@ (8004e0c <xTaskCheckForTimeOut+0xc0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dae:	d102      	bne.n	8004db6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61fb      	str	r3, [r7, #28]
 8004db4:	e023      	b.n	8004dfe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4b15      	ldr	r3, [pc, #84]	@ (8004e10 <xTaskCheckForTimeOut+0xc4>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d007      	beq.n	8004dd2 <xTaskCheckForTimeOut+0x86>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d302      	bcc.n	8004dd2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	61fb      	str	r3, [r7, #28]
 8004dd0:	e015      	b.n	8004dfe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d20b      	bcs.n	8004df4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	1ad2      	subs	r2, r2, r3
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff ff99 	bl	8004d20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
 8004df2:	e004      	b.n	8004dfe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004dfe:	f000 fe5d 	bl	8005abc <vPortExitCritical>

	return xReturn;
 8004e02:	69fb      	ldr	r3, [r7, #28]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	20000500 	.word	0x20000500
 8004e10:	20000514 	.word	0x20000514

08004e14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e18:	4b03      	ldr	r3, [pc, #12]	@ (8004e28 <vTaskMissedYield+0x14>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]
}
 8004e1e:	bf00      	nop
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	20000510 	.word	0x20000510

08004e2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e34:	f000 f852 	bl	8004edc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e38:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <prvIdleTask+0x28>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d9f9      	bls.n	8004e34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e40:	4b05      	ldr	r3, [pc, #20]	@ (8004e58 <prvIdleTask+0x2c>)
 8004e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e50:	e7f0      	b.n	8004e34 <prvIdleTask+0x8>
 8004e52:	bf00      	nop
 8004e54:	20000400 	.word	0x20000400
 8004e58:	e000ed04 	.word	0xe000ed04

08004e5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e62:	2300      	movs	r3, #0
 8004e64:	607b      	str	r3, [r7, #4]
 8004e66:	e00c      	b.n	8004e82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4a12      	ldr	r2, [pc, #72]	@ (8004ebc <prvInitialiseTaskLists+0x60>)
 8004e74:	4413      	add	r3, r2
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fe fd74 	bl	8003964 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	607b      	str	r3, [r7, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b06      	cmp	r3, #6
 8004e86:	d9ef      	bls.n	8004e68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e88:	480d      	ldr	r0, [pc, #52]	@ (8004ec0 <prvInitialiseTaskLists+0x64>)
 8004e8a:	f7fe fd6b 	bl	8003964 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e8e:	480d      	ldr	r0, [pc, #52]	@ (8004ec4 <prvInitialiseTaskLists+0x68>)
 8004e90:	f7fe fd68 	bl	8003964 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e94:	480c      	ldr	r0, [pc, #48]	@ (8004ec8 <prvInitialiseTaskLists+0x6c>)
 8004e96:	f7fe fd65 	bl	8003964 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e9a:	480c      	ldr	r0, [pc, #48]	@ (8004ecc <prvInitialiseTaskLists+0x70>)
 8004e9c:	f7fe fd62 	bl	8003964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ea0:	480b      	ldr	r0, [pc, #44]	@ (8004ed0 <prvInitialiseTaskLists+0x74>)
 8004ea2:	f7fe fd5f 	bl	8003964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <prvInitialiseTaskLists+0x78>)
 8004ea8:	4a05      	ldr	r2, [pc, #20]	@ (8004ec0 <prvInitialiseTaskLists+0x64>)
 8004eaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004eac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed8 <prvInitialiseTaskLists+0x7c>)
 8004eae:	4a05      	ldr	r2, [pc, #20]	@ (8004ec4 <prvInitialiseTaskLists+0x68>)
 8004eb0:	601a      	str	r2, [r3, #0]
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000400 	.word	0x20000400
 8004ec0:	2000048c 	.word	0x2000048c
 8004ec4:	200004a0 	.word	0x200004a0
 8004ec8:	200004bc 	.word	0x200004bc
 8004ecc:	200004d0 	.word	0x200004d0
 8004ed0:	200004e8 	.word	0x200004e8
 8004ed4:	200004b4 	.word	0x200004b4
 8004ed8:	200004b8 	.word	0x200004b8

08004edc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ee2:	e019      	b.n	8004f18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ee4:	f000 fdb8 	bl	8005a58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee8:	4b10      	ldr	r3, [pc, #64]	@ (8004f2c <prvCheckTasksWaitingTermination+0x50>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fe fdbf 	bl	8003a78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004efa:	4b0d      	ldr	r3, [pc, #52]	@ (8004f30 <prvCheckTasksWaitingTermination+0x54>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	4a0b      	ldr	r2, [pc, #44]	@ (8004f30 <prvCheckTasksWaitingTermination+0x54>)
 8004f02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f04:	4b0b      	ldr	r3, [pc, #44]	@ (8004f34 <prvCheckTasksWaitingTermination+0x58>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f34 <prvCheckTasksWaitingTermination+0x58>)
 8004f0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f0e:	f000 fdd5 	bl	8005abc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f810 	bl	8004f38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f18:	4b06      	ldr	r3, [pc, #24]	@ (8004f34 <prvCheckTasksWaitingTermination+0x58>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e1      	bne.n	8004ee4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	200004d0 	.word	0x200004d0
 8004f30:	200004fc 	.word	0x200004fc
 8004f34:	200004e4 	.word	0x200004e4

08004f38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3364      	adds	r3, #100	@ 0x64
 8004f44:	4618      	mov	r0, r3
 8004f46:	f001 f9f3 	bl	8006330 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 ff72 	bl	8005e38 <vPortFree>
			vPortFree( pxTCB );
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 ff6f 	bl	8005e38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f5a:	bf00      	nop
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f9c <prvResetNextTaskUnblockTime+0x38>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f74:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8004f76:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f7c:	e008      	b.n	8004f90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f7e:	4b07      	ldr	r3, [pc, #28]	@ (8004f9c <prvResetNextTaskUnblockTime+0x38>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	4a04      	ldr	r2, [pc, #16]	@ (8004fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8004f8e:	6013      	str	r3, [r2, #0]
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	200004b4 	.word	0x200004b4
 8004fa0:	2000051c 	.word	0x2000051c

08004fa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004faa:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd8 <xTaskGetSchedulerState+0x34>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d102      	bne.n	8004fb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	607b      	str	r3, [r7, #4]
 8004fb6:	e008      	b.n	8004fca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fb8:	4b08      	ldr	r3, [pc, #32]	@ (8004fdc <xTaskGetSchedulerState+0x38>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d102      	bne.n	8004fc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	607b      	str	r3, [r7, #4]
 8004fc4:	e001      	b.n	8004fca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fca:	687b      	ldr	r3, [r7, #4]
	}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	20000508 	.word	0x20000508
 8004fdc:	20000524 	.word	0x20000524

08004fe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d070      	beq.n	80050d8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80050e4 <xTaskPriorityDisinherit+0x104>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d00b      	beq.n	8005018 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	60fb      	str	r3, [r7, #12]
}
 8005012:	bf00      	nop
 8005014:	bf00      	nop
 8005016:	e7fd      	b.n	8005014 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10b      	bne.n	8005038 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	60bb      	str	r3, [r7, #8]
}
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	e7fd      	b.n	8005034 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800503c:	1e5a      	subs	r2, r3, #1
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	661a      	str	r2, [r3, #96]	@ 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800504a:	429a      	cmp	r2, r3
 800504c:	d044      	beq.n	80050d8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005052:	2b00      	cmp	r3, #0
 8005054:	d140      	bne.n	80050d8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	3304      	adds	r3, #4
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe fd0c 	bl	8003a78 <uxListRemove>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d115      	bne.n	8005092 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800506a:	491f      	ldr	r1, [pc, #124]	@ (80050e8 <xTaskPriorityDisinherit+0x108>)
 800506c:	4613      	mov	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10a      	bne.n	8005092 <xTaskPriorityDisinherit+0xb2>
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005080:	2201      	movs	r2, #1
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	43da      	mvns	r2, r3
 8005088:	4b18      	ldr	r3, [pc, #96]	@ (80050ec <xTaskPriorityDisinherit+0x10c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4013      	ands	r3, r2
 800508e:	4a17      	ldr	r2, [pc, #92]	@ (80050ec <xTaskPriorityDisinherit+0x10c>)
 8005090:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509e:	f1c3 0207 	rsb	r2, r3, #7
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050aa:	2201      	movs	r2, #1
 80050ac:	409a      	lsls	r2, r3
 80050ae:	4b0f      	ldr	r3, [pc, #60]	@ (80050ec <xTaskPriorityDisinherit+0x10c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	4a0d      	ldr	r2, [pc, #52]	@ (80050ec <xTaskPriorityDisinherit+0x10c>)
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4a08      	ldr	r2, [pc, #32]	@ (80050e8 <xTaskPriorityDisinherit+0x108>)
 80050c6:	441a      	add	r2, r3
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f7fe fc75 	bl	80039be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050d4:	2301      	movs	r3, #1
 80050d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050d8:	697b      	ldr	r3, [r7, #20]
	}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	200003fc 	.word	0x200003fc
 80050e8:	20000400 	.word	0x20000400
 80050ec:	20000504 	.word	0x20000504

080050f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050fa:	4b29      	ldr	r3, [pc, #164]	@ (80051a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005100:	4b28      	ldr	r3, [pc, #160]	@ (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3304      	adds	r3, #4
 8005106:	4618      	mov	r0, r3
 8005108:	f7fe fcb6 	bl	8003a78 <uxListRemove>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10b      	bne.n	800512a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005112:	4b24      	ldr	r3, [pc, #144]	@ (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005118:	2201      	movs	r2, #1
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	43da      	mvns	r2, r3
 8005120:	4b21      	ldr	r3, [pc, #132]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4013      	ands	r3, r2
 8005126:	4a20      	ldr	r2, [pc, #128]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005128:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d10a      	bne.n	8005148 <prvAddCurrentTaskToDelayedList+0x58>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005138:	4b1a      	ldr	r3, [pc, #104]	@ (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3304      	adds	r3, #4
 800513e:	4619      	mov	r1, r3
 8005140:	481a      	ldr	r0, [pc, #104]	@ (80051ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8005142:	f7fe fc3c 	bl	80039be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005146:	e026      	b.n	8005196 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4413      	add	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005150:	4b14      	ldr	r3, [pc, #80]	@ (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	429a      	cmp	r2, r3
 800515e:	d209      	bcs.n	8005174 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005160:	4b13      	ldr	r3, [pc, #76]	@ (80051b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	4b0f      	ldr	r3, [pc, #60]	@ (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3304      	adds	r3, #4
 800516a:	4619      	mov	r1, r3
 800516c:	4610      	mov	r0, r2
 800516e:	f7fe fc4a 	bl	8003a06 <vListInsert>
}
 8005172:	e010      	b.n	8005196 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005174:	4b0f      	ldr	r3, [pc, #60]	@ (80051b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b0a      	ldr	r3, [pc, #40]	@ (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3304      	adds	r3, #4
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f7fe fc40 	bl	8003a06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005186:	4b0c      	ldr	r3, [pc, #48]	@ (80051b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	429a      	cmp	r2, r3
 800518e:	d202      	bcs.n	8005196 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005190:	4a09      	ldr	r2, [pc, #36]	@ (80051b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	6013      	str	r3, [r2, #0]
}
 8005196:	bf00      	nop
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20000500 	.word	0x20000500
 80051a4:	200003fc 	.word	0x200003fc
 80051a8:	20000504 	.word	0x20000504
 80051ac:	200004e8 	.word	0x200004e8
 80051b0:	200004b8 	.word	0x200004b8
 80051b4:	200004b4 	.word	0x200004b4
 80051b8:	2000051c 	.word	0x2000051c

080051bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051c6:	f000 fadf 	bl	8005788 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051ca:	4b11      	ldr	r3, [pc, #68]	@ (8005210 <xTimerCreateTimerTask+0x54>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80051d2:	4b10      	ldr	r3, [pc, #64]	@ (8005214 <xTimerCreateTimerTask+0x58>)
 80051d4:	9301      	str	r3, [sp, #4]
 80051d6:	2306      	movs	r3, #6
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	2300      	movs	r3, #0
 80051dc:	2280      	movs	r2, #128	@ 0x80
 80051de:	490e      	ldr	r1, [pc, #56]	@ (8005218 <xTimerCreateTimerTask+0x5c>)
 80051e0:	480e      	ldr	r0, [pc, #56]	@ (800521c <xTimerCreateTimerTask+0x60>)
 80051e2:	f7ff f927 	bl	8004434 <xTaskCreate>
 80051e6:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10b      	bne.n	8005206 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	603b      	str	r3, [r7, #0]
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	e7fd      	b.n	8005202 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8005206:	687b      	ldr	r3, [r7, #4]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	20000558 	.word	0x20000558
 8005214:	2000055c 	.word	0x2000055c
 8005218:	08007164 	.word	0x08007164
 800521c:	08005359 	.word	0x08005359

08005220 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08a      	sub	sp, #40	@ 0x28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800522e:	2300      	movs	r3, #0
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10b      	bne.n	8005250 <xTimerGenericCommand+0x30>
	__asm volatile
 8005238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	623b      	str	r3, [r7, #32]
}
 800524a:	bf00      	nop
 800524c:	bf00      	nop
 800524e:	e7fd      	b.n	800524c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005250:	4b19      	ldr	r3, [pc, #100]	@ (80052b8 <xTimerGenericCommand+0x98>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d02a      	beq.n	80052ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b05      	cmp	r3, #5
 8005268:	dc18      	bgt.n	800529c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800526a:	f7ff fe9b 	bl	8004fa4 <xTaskGetSchedulerState>
 800526e:	4603      	mov	r3, r0
 8005270:	2b02      	cmp	r3, #2
 8005272:	d109      	bne.n	8005288 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005274:	4b10      	ldr	r3, [pc, #64]	@ (80052b8 <xTimerGenericCommand+0x98>)
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	f107 0114 	add.w	r1, r7, #20
 800527c:	2300      	movs	r3, #0
 800527e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005280:	f7fe fce8 	bl	8003c54 <xQueueGenericSend>
 8005284:	6278      	str	r0, [r7, #36]	@ 0x24
 8005286:	e012      	b.n	80052ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005288:	4b0b      	ldr	r3, [pc, #44]	@ (80052b8 <xTimerGenericCommand+0x98>)
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	f107 0114 	add.w	r1, r7, #20
 8005290:	2300      	movs	r3, #0
 8005292:	2200      	movs	r2, #0
 8005294:	f7fe fcde 	bl	8003c54 <xQueueGenericSend>
 8005298:	6278      	str	r0, [r7, #36]	@ 0x24
 800529a:	e008      	b.n	80052ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800529c:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <xTimerGenericCommand+0x98>)
 800529e:	6818      	ldr	r0, [r3, #0]
 80052a0:	f107 0114 	add.w	r1, r7, #20
 80052a4:	2300      	movs	r3, #0
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	f7fe fdd6 	bl	8003e58 <xQueueGenericSendFromISR>
 80052ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3728      	adds	r7, #40	@ 0x28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20000558 	.word	0x20000558

080052bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c6:	4b23      	ldr	r3, [pc, #140]	@ (8005354 <prvProcessExpiredTimer+0x98>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fe fbcf 	bl	8003a78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d023      	beq.n	8005330 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	699a      	ldr	r2, [r3, #24]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	18d1      	adds	r1, r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	6978      	ldr	r0, [r7, #20]
 80052f6:	f000 f8d5 	bl	80054a4 <prvInsertTimerInActiveList>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d020      	beq.n	8005342 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005300:	2300      	movs	r3, #0
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	2300      	movs	r3, #0
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	2100      	movs	r1, #0
 800530a:	6978      	ldr	r0, [r7, #20]
 800530c:	f7ff ff88 	bl	8005220 <xTimerGenericCommand>
 8005310:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d114      	bne.n	8005342 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	60fb      	str	r3, [r7, #12]
}
 800532a:	bf00      	nop
 800532c:	bf00      	nop
 800532e:	e7fd      	b.n	800532c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005336:	f023 0301 	bic.w	r3, r3, #1
 800533a:	b2da      	uxtb	r2, r3
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	6978      	ldr	r0, [r7, #20]
 8005348:	4798      	blx	r3
}
 800534a:	bf00      	nop
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20000550 	.word	0x20000550

08005358 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005360:	f107 0308 	add.w	r3, r7, #8
 8005364:	4618      	mov	r0, r3
 8005366:	f000 f859 	bl	800541c <prvGetNextExpireTime>
 800536a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4619      	mov	r1, r3
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f805 	bl	8005380 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005376:	f000 f8d7 	bl	8005528 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800537a:	bf00      	nop
 800537c:	e7f0      	b.n	8005360 <prvTimerTask+0x8>
	...

08005380 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800538a:	f7ff fa39 	bl	8004800 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800538e:	f107 0308 	add.w	r3, r7, #8
 8005392:	4618      	mov	r0, r3
 8005394:	f000 f866 	bl	8005464 <prvSampleTimeNow>
 8005398:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d130      	bne.n	8005402 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <prvProcessTimerOrBlockTask+0x3c>
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d806      	bhi.n	80053bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80053ae:	f7ff fa35 	bl	800481c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053b2:	68f9      	ldr	r1, [r7, #12]
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff ff81 	bl	80052bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80053ba:	e024      	b.n	8005406 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d008      	beq.n	80053d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053c2:	4b13      	ldr	r3, [pc, #76]	@ (8005410 <prvProcessTimerOrBlockTask+0x90>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <prvProcessTimerOrBlockTask+0x50>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <prvProcessTimerOrBlockTask+0x52>
 80053d0:	2300      	movs	r3, #0
 80053d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80053d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005414 <prvProcessTimerOrBlockTask+0x94>)
 80053d6:	6818      	ldr	r0, [r3, #0]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	4619      	mov	r1, r3
 80053e2:	f7fe fff3 	bl	80043cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80053e6:	f7ff fa19 	bl	800481c <xTaskResumeAll>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10a      	bne.n	8005406 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80053f0:	4b09      	ldr	r3, [pc, #36]	@ (8005418 <prvProcessTimerOrBlockTask+0x98>)
 80053f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	f3bf 8f6f 	isb	sy
}
 8005400:	e001      	b.n	8005406 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005402:	f7ff fa0b 	bl	800481c <xTaskResumeAll>
}
 8005406:	bf00      	nop
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000554 	.word	0x20000554
 8005414:	20000558 	.word	0x20000558
 8005418:	e000ed04 	.word	0xe000ed04

0800541c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005424:	4b0e      	ldr	r3, [pc, #56]	@ (8005460 <prvGetNextExpireTime+0x44>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <prvGetNextExpireTime+0x16>
 800542e:	2201      	movs	r2, #1
 8005430:	e000      	b.n	8005434 <prvGetNextExpireTime+0x18>
 8005432:	2200      	movs	r2, #0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d105      	bne.n	800544c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005440:	4b07      	ldr	r3, [pc, #28]	@ (8005460 <prvGetNextExpireTime+0x44>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	e001      	b.n	8005450 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005450:	68fb      	ldr	r3, [r7, #12]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	20000550 	.word	0x20000550

08005464 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800546c:	f7ff fa74 	bl	8004958 <xTaskGetTickCount>
 8005470:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005472:	4b0b      	ldr	r3, [pc, #44]	@ (80054a0 <prvSampleTimeNow+0x3c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	429a      	cmp	r2, r3
 800547a:	d205      	bcs.n	8005488 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800547c:	f000 f91e 	bl	80056bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e002      	b.n	800548e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800548e:	4a04      	ldr	r2, [pc, #16]	@ (80054a0 <prvSampleTimeNow+0x3c>)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005494:	68fb      	ldr	r3, [r7, #12]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000560 	.word	0x20000560

080054a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d812      	bhi.n	80054f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	1ad2      	subs	r2, r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d302      	bcc.n	80054de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80054d8:	2301      	movs	r3, #1
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	e01b      	b.n	8005516 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80054de:	4b10      	ldr	r3, [pc, #64]	@ (8005520 <prvInsertTimerInActiveList+0x7c>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3304      	adds	r3, #4
 80054e6:	4619      	mov	r1, r3
 80054e8:	4610      	mov	r0, r2
 80054ea:	f7fe fa8c 	bl	8003a06 <vListInsert>
 80054ee:	e012      	b.n	8005516 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d206      	bcs.n	8005506 <prvInsertTimerInActiveList+0x62>
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d302      	bcc.n	8005506 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005500:	2301      	movs	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	e007      	b.n	8005516 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005506:	4b07      	ldr	r3, [pc, #28]	@ (8005524 <prvInsertTimerInActiveList+0x80>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3304      	adds	r3, #4
 800550e:	4619      	mov	r1, r3
 8005510:	4610      	mov	r0, r2
 8005512:	f7fe fa78 	bl	8003a06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005516:	697b      	ldr	r3, [r7, #20]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20000554 	.word	0x20000554
 8005524:	20000550 	.word	0x20000550

08005528 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08c      	sub	sp, #48	@ 0x30
 800552c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800552e:	e0b2      	b.n	8005696 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	f2c0 80af 	blt.w	8005696 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d004      	beq.n	800554e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005546:	3304      	adds	r3, #4
 8005548:	4618      	mov	r0, r3
 800554a:	f7fe fa95 	bl	8003a78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800554e:	1d3b      	adds	r3, r7, #4
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff ff87 	bl	8005464 <prvSampleTimeNow>
 8005556:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b09      	cmp	r3, #9
 800555c:	f200 8098 	bhi.w	8005690 <prvProcessReceivedCommands+0x168>
 8005560:	a201      	add	r2, pc, #4	@ (adr r2, 8005568 <prvProcessReceivedCommands+0x40>)
 8005562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005566:	bf00      	nop
 8005568:	08005591 	.word	0x08005591
 800556c:	08005591 	.word	0x08005591
 8005570:	08005591 	.word	0x08005591
 8005574:	08005607 	.word	0x08005607
 8005578:	0800561b 	.word	0x0800561b
 800557c:	08005667 	.word	0x08005667
 8005580:	08005591 	.word	0x08005591
 8005584:	08005591 	.word	0x08005591
 8005588:	08005607 	.word	0x08005607
 800558c:	0800561b 	.word	0x0800561b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005596:	f043 0301 	orr.w	r3, r3, #1
 800559a:	b2da      	uxtb	r2, r3
 800559c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	18d1      	adds	r1, r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a3a      	ldr	r2, [r7, #32]
 80055ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055b0:	f7ff ff78 	bl	80054a4 <prvInsertTimerInActiveList>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d06c      	beq.n	8005694 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d061      	beq.n	8005694 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	441a      	add	r2, r3
 80055d8:	2300      	movs	r3, #0
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	2300      	movs	r3, #0
 80055de:	2100      	movs	r1, #0
 80055e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055e2:	f7ff fe1d 	bl	8005220 <xTimerGenericCommand>
 80055e6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d152      	bne.n	8005694 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	61bb      	str	r3, [r7, #24]
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	e7fd      	b.n	8005602 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800560c:	f023 0301 	bic.w	r3, r3, #1
 8005610:	b2da      	uxtb	r2, r3
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005618:	e03d      	b.n	8005696 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005620:	f043 0301 	orr.w	r3, r3, #1
 8005624:	b2da      	uxtb	r2, r3
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005630:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10b      	bne.n	8005652 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	617b      	str	r3, [r7, #20]
}
 800564c:	bf00      	nop
 800564e:	bf00      	nop
 8005650:	e7fd      	b.n	800564e <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	18d1      	adds	r1, r2, r3
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	6a3a      	ldr	r2, [r7, #32]
 800565e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005660:	f7ff ff20 	bl	80054a4 <prvInsertTimerInActiveList>
					break;
 8005664:	e017      	b.n	8005696 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d103      	bne.n	800567c <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8005674:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005676:	f000 fbdf 	bl	8005e38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800567a:	e00c      	b.n	8005696 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005682:	f023 0301 	bic.w	r3, r3, #1
 8005686:	b2da      	uxtb	r2, r3
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800568e:	e002      	b.n	8005696 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8005690:	bf00      	nop
 8005692:	e000      	b.n	8005696 <prvProcessReceivedCommands+0x16e>
					break;
 8005694:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005696:	4b08      	ldr	r3, [pc, #32]	@ (80056b8 <prvProcessReceivedCommands+0x190>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f107 0108 	add.w	r1, r7, #8
 800569e:	2200      	movs	r2, #0
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fe fc77 	bl	8003f94 <xQueueReceive>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f47f af41 	bne.w	8005530 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80056ae:	bf00      	nop
 80056b0:	bf00      	nop
 80056b2:	3728      	adds	r7, #40	@ 0x28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	20000558 	.word	0x20000558

080056bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056c2:	e049      	b.n	8005758 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056c4:	4b2e      	ldr	r3, [pc, #184]	@ (8005780 <prvSwitchTimerLists+0xc4>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005780 <prvSwitchTimerLists+0xc4>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	3304      	adds	r3, #4
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fe f9cb 	bl	8003a78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d02f      	beq.n	8005758 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4413      	add	r3, r2
 8005700:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	429a      	cmp	r2, r3
 8005708:	d90e      	bls.n	8005728 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005716:	4b1a      	ldr	r3, [pc, #104]	@ (8005780 <prvSwitchTimerLists+0xc4>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3304      	adds	r3, #4
 800571e:	4619      	mov	r1, r3
 8005720:	4610      	mov	r0, r2
 8005722:	f7fe f970 	bl	8003a06 <vListInsert>
 8005726:	e017      	b.n	8005758 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005728:	2300      	movs	r3, #0
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	2300      	movs	r3, #0
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	2100      	movs	r1, #0
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f7ff fd74 	bl	8005220 <xTimerGenericCommand>
 8005738:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10b      	bne.n	8005758 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	603b      	str	r3, [r7, #0]
}
 8005752:	bf00      	nop
 8005754:	bf00      	nop
 8005756:	e7fd      	b.n	8005754 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005758:	4b09      	ldr	r3, [pc, #36]	@ (8005780 <prvSwitchTimerLists+0xc4>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1b0      	bne.n	80056c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005762:	4b07      	ldr	r3, [pc, #28]	@ (8005780 <prvSwitchTimerLists+0xc4>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005768:	4b06      	ldr	r3, [pc, #24]	@ (8005784 <prvSwitchTimerLists+0xc8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a04      	ldr	r2, [pc, #16]	@ (8005780 <prvSwitchTimerLists+0xc4>)
 800576e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005770:	4a04      	ldr	r2, [pc, #16]	@ (8005784 <prvSwitchTimerLists+0xc8>)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	6013      	str	r3, [r2, #0]
}
 8005776:	bf00      	nop
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000550 	.word	0x20000550
 8005784:	20000554 	.word	0x20000554

08005788 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800578c:	f000 f964 	bl	8005a58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005790:	4b12      	ldr	r3, [pc, #72]	@ (80057dc <prvCheckForValidListAndQueue+0x54>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d11d      	bne.n	80057d4 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005798:	4811      	ldr	r0, [pc, #68]	@ (80057e0 <prvCheckForValidListAndQueue+0x58>)
 800579a:	f7fe f8e3 	bl	8003964 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800579e:	4811      	ldr	r0, [pc, #68]	@ (80057e4 <prvCheckForValidListAndQueue+0x5c>)
 80057a0:	f7fe f8e0 	bl	8003964 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80057a4:	4b10      	ldr	r3, [pc, #64]	@ (80057e8 <prvCheckForValidListAndQueue+0x60>)
 80057a6:	4a0e      	ldr	r2, [pc, #56]	@ (80057e0 <prvCheckForValidListAndQueue+0x58>)
 80057a8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80057aa:	4b10      	ldr	r3, [pc, #64]	@ (80057ec <prvCheckForValidListAndQueue+0x64>)
 80057ac:	4a0d      	ldr	r2, [pc, #52]	@ (80057e4 <prvCheckForValidListAndQueue+0x5c>)
 80057ae:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80057b0:	2200      	movs	r2, #0
 80057b2:	210c      	movs	r1, #12
 80057b4:	200a      	movs	r0, #10
 80057b6:	f7fe f9f3 	bl	8003ba0 <xQueueGenericCreate>
 80057ba:	4603      	mov	r3, r0
 80057bc:	4a07      	ldr	r2, [pc, #28]	@ (80057dc <prvCheckForValidListAndQueue+0x54>)
 80057be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80057c0:	4b06      	ldr	r3, [pc, #24]	@ (80057dc <prvCheckForValidListAndQueue+0x54>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d005      	beq.n	80057d4 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80057c8:	4b04      	ldr	r3, [pc, #16]	@ (80057dc <prvCheckForValidListAndQueue+0x54>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4908      	ldr	r1, [pc, #32]	@ (80057f0 <prvCheckForValidListAndQueue+0x68>)
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fe fdd2 	bl	8004378 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057d4:	f000 f972 	bl	8005abc <vPortExitCritical>
}
 80057d8:	bf00      	nop
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	20000558 	.word	0x20000558
 80057e0:	20000528 	.word	0x20000528
 80057e4:	2000053c 	.word	0x2000053c
 80057e8:	20000550 	.word	0x20000550
 80057ec:	20000554 	.word	0x20000554
 80057f0:	0800716c 	.word	0x0800716c

080057f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3b04      	subs	r3, #4
 8005804:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800580c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3b04      	subs	r3, #4
 8005812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f023 0201 	bic.w	r2, r3, #1
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3b04      	subs	r3, #4
 8005822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005824:	4a0c      	ldr	r2, [pc, #48]	@ (8005858 <pxPortInitialiseStack+0x64>)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	3b14      	subs	r3, #20
 800582e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3b04      	subs	r3, #4
 800583a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f06f 0202 	mvn.w	r2, #2
 8005842:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3b20      	subs	r3, #32
 8005848:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800584a:	68fb      	ldr	r3, [r7, #12]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	0800585d 	.word	0x0800585d

0800585c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005866:	4b13      	ldr	r3, [pc, #76]	@ (80058b4 <prvTaskExitError+0x58>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586e:	d00b      	beq.n	8005888 <prvTaskExitError+0x2c>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	60fb      	str	r3, [r7, #12]
}
 8005882:	bf00      	nop
 8005884:	bf00      	nop
 8005886:	e7fd      	b.n	8005884 <prvTaskExitError+0x28>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	60bb      	str	r3, [r7, #8]
}
 800589a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800589c:	bf00      	nop
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0fc      	beq.n	800589e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	2000000c 	.word	0x2000000c
	...

080058c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058c0:	4b07      	ldr	r3, [pc, #28]	@ (80058e0 <pxCurrentTCBConst2>)
 80058c2:	6819      	ldr	r1, [r3, #0]
 80058c4:	6808      	ldr	r0, [r1, #0]
 80058c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ca:	f380 8809 	msr	PSP, r0
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f04f 0000 	mov.w	r0, #0
 80058d6:	f380 8811 	msr	BASEPRI, r0
 80058da:	4770      	bx	lr
 80058dc:	f3af 8000 	nop.w

080058e0 <pxCurrentTCBConst2>:
 80058e0:	200003fc 	.word	0x200003fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop

080058e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058e8:	4808      	ldr	r0, [pc, #32]	@ (800590c <prvPortStartFirstTask+0x24>)
 80058ea:	6800      	ldr	r0, [r0, #0]
 80058ec:	6800      	ldr	r0, [r0, #0]
 80058ee:	f380 8808 	msr	MSP, r0
 80058f2:	f04f 0000 	mov.w	r0, #0
 80058f6:	f380 8814 	msr	CONTROL, r0
 80058fa:	b662      	cpsie	i
 80058fc:	b661      	cpsie	f
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	df00      	svc	0
 8005908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800590a:	bf00      	nop
 800590c:	e000ed08 	.word	0xe000ed08

08005910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005916:	4b47      	ldr	r3, [pc, #284]	@ (8005a34 <xPortStartScheduler+0x124>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a47      	ldr	r2, [pc, #284]	@ (8005a38 <xPortStartScheduler+0x128>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d10b      	bne.n	8005938 <xPortStartScheduler+0x28>
	__asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	613b      	str	r3, [r7, #16]
}
 8005932:	bf00      	nop
 8005934:	bf00      	nop
 8005936:	e7fd      	b.n	8005934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005938:	4b3e      	ldr	r3, [pc, #248]	@ (8005a34 <xPortStartScheduler+0x124>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a3f      	ldr	r2, [pc, #252]	@ (8005a3c <xPortStartScheduler+0x12c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d10b      	bne.n	800595a <xPortStartScheduler+0x4a>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	60fb      	str	r3, [r7, #12]
}
 8005954:	bf00      	nop
 8005956:	bf00      	nop
 8005958:	e7fd      	b.n	8005956 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800595a:	4b39      	ldr	r3, [pc, #228]	@ (8005a40 <xPortStartScheduler+0x130>)
 800595c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	22ff      	movs	r2, #255	@ 0xff
 800596a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	b2db      	uxtb	r3, r3
 8005972:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800597c:	b2da      	uxtb	r2, r3
 800597e:	4b31      	ldr	r3, [pc, #196]	@ (8005a44 <xPortStartScheduler+0x134>)
 8005980:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005982:	4b31      	ldr	r3, [pc, #196]	@ (8005a48 <xPortStartScheduler+0x138>)
 8005984:	2207      	movs	r2, #7
 8005986:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005988:	e009      	b.n	800599e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800598a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a48 <xPortStartScheduler+0x138>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3b01      	subs	r3, #1
 8005990:	4a2d      	ldr	r2, [pc, #180]	@ (8005a48 <xPortStartScheduler+0x138>)
 8005992:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	b2db      	uxtb	r3, r3
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	b2db      	uxtb	r3, r3
 800599c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800599e:	78fb      	ldrb	r3, [r7, #3]
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a6:	2b80      	cmp	r3, #128	@ 0x80
 80059a8:	d0ef      	beq.n	800598a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059aa:	4b27      	ldr	r3, [pc, #156]	@ (8005a48 <xPortStartScheduler+0x138>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f1c3 0307 	rsb	r3, r3, #7
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d00b      	beq.n	80059ce <xPortStartScheduler+0xbe>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	60bb      	str	r3, [r7, #8]
}
 80059c8:	bf00      	nop
 80059ca:	bf00      	nop
 80059cc:	e7fd      	b.n	80059ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005a48 <xPortStartScheduler+0x138>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	021b      	lsls	r3, r3, #8
 80059d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a48 <xPortStartScheduler+0x138>)
 80059d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a48 <xPortStartScheduler+0x138>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059e0:	4a19      	ldr	r2, [pc, #100]	@ (8005a48 <xPortStartScheduler+0x138>)
 80059e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059ec:	4b17      	ldr	r3, [pc, #92]	@ (8005a4c <xPortStartScheduler+0x13c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a16      	ldr	r2, [pc, #88]	@ (8005a4c <xPortStartScheduler+0x13c>)
 80059f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059f8:	4b14      	ldr	r3, [pc, #80]	@ (8005a4c <xPortStartScheduler+0x13c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a13      	ldr	r2, [pc, #76]	@ (8005a4c <xPortStartScheduler+0x13c>)
 80059fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005a02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a04:	f000 f8da 	bl	8005bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a08:	4b11      	ldr	r3, [pc, #68]	@ (8005a50 <xPortStartScheduler+0x140>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a0e:	f000 f8f9 	bl	8005c04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a12:	4b10      	ldr	r3, [pc, #64]	@ (8005a54 <xPortStartScheduler+0x144>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a0f      	ldr	r2, [pc, #60]	@ (8005a54 <xPortStartScheduler+0x144>)
 8005a18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005a1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a1e:	f7ff ff63 	bl	80058e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a22:	f7ff f863 	bl	8004aec <vTaskSwitchContext>
	prvTaskExitError();
 8005a26:	f7ff ff19 	bl	800585c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	e000ed00 	.word	0xe000ed00
 8005a38:	410fc271 	.word	0x410fc271
 8005a3c:	410fc270 	.word	0x410fc270
 8005a40:	e000e400 	.word	0xe000e400
 8005a44:	20000564 	.word	0x20000564
 8005a48:	20000568 	.word	0x20000568
 8005a4c:	e000ed20 	.word	0xe000ed20
 8005a50:	2000000c 	.word	0x2000000c
 8005a54:	e000ef34 	.word	0xe000ef34

08005a58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	607b      	str	r3, [r7, #4]
}
 8005a70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a72:	4b10      	ldr	r3, [pc, #64]	@ (8005ab4 <vPortEnterCritical+0x5c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3301      	adds	r3, #1
 8005a78:	4a0e      	ldr	r2, [pc, #56]	@ (8005ab4 <vPortEnterCritical+0x5c>)
 8005a7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab4 <vPortEnterCritical+0x5c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d110      	bne.n	8005aa6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a84:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab8 <vPortEnterCritical+0x60>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00b      	beq.n	8005aa6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	603b      	str	r3, [r7, #0]
}
 8005aa0:	bf00      	nop
 8005aa2:	bf00      	nop
 8005aa4:	e7fd      	b.n	8005aa2 <vPortEnterCritical+0x4a>
	}
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	2000000c 	.word	0x2000000c
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ac2:	4b12      	ldr	r3, [pc, #72]	@ (8005b0c <vPortExitCritical+0x50>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10b      	bne.n	8005ae2 <vPortExitCritical+0x26>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	607b      	str	r3, [r7, #4]
}
 8005adc:	bf00      	nop
 8005ade:	bf00      	nop
 8005ae0:	e7fd      	b.n	8005ade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8005b0c <vPortExitCritical+0x50>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	4a08      	ldr	r2, [pc, #32]	@ (8005b0c <vPortExitCritical+0x50>)
 8005aea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005aec:	4b07      	ldr	r3, [pc, #28]	@ (8005b0c <vPortExitCritical+0x50>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d105      	bne.n	8005b00 <vPortExitCritical+0x44>
 8005af4:	2300      	movs	r3, #0
 8005af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	f383 8811 	msr	BASEPRI, r3
}
 8005afe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	2000000c 	.word	0x2000000c

08005b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b10:	f3ef 8009 	mrs	r0, PSP
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	4b15      	ldr	r3, [pc, #84]	@ (8005b70 <pxCurrentTCBConst>)
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	f01e 0f10 	tst.w	lr, #16
 8005b20:	bf08      	it	eq
 8005b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2a:	6010      	str	r0, [r2, #0]
 8005b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005b34:	f380 8811 	msr	BASEPRI, r0
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f7fe ffd4 	bl	8004aec <vTaskSwitchContext>
 8005b44:	f04f 0000 	mov.w	r0, #0
 8005b48:	f380 8811 	msr	BASEPRI, r0
 8005b4c:	bc09      	pop	{r0, r3}
 8005b4e:	6819      	ldr	r1, [r3, #0]
 8005b50:	6808      	ldr	r0, [r1, #0]
 8005b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b56:	f01e 0f10 	tst.w	lr, #16
 8005b5a:	bf08      	it	eq
 8005b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b60:	f380 8809 	msr	PSP, r0
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	f3af 8000 	nop.w

08005b70 <pxCurrentTCBConst>:
 8005b70:	200003fc 	.word	0x200003fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop

08005b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	607b      	str	r3, [r7, #4]
}
 8005b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b92:	f7fe fef1 	bl	8004978 <xTaskIncrementTick>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b9c:	4b06      	ldr	r3, [pc, #24]	@ (8005bb8 <SysTick_Handler+0x40>)
 8005b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	f383 8811 	msr	BASEPRI, r3
}
 8005bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005bb0:	bf00      	nop
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	e000ed04 	.word	0xe000ed04

08005bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf0 <vPortSetupTimerInterrupt+0x34>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf4 <vPortSetupTimerInterrupt+0x38>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf8 <vPortSetupTimerInterrupt+0x3c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8005bfc <vPortSetupTimerInterrupt+0x40>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	099b      	lsrs	r3, r3, #6
 8005bd8:	4a09      	ldr	r2, [pc, #36]	@ (8005c00 <vPortSetupTimerInterrupt+0x44>)
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bde:	4b04      	ldr	r3, [pc, #16]	@ (8005bf0 <vPortSetupTimerInterrupt+0x34>)
 8005be0:	2207      	movs	r2, #7
 8005be2:	601a      	str	r2, [r3, #0]
}
 8005be4:	bf00      	nop
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	e000e010 	.word	0xe000e010
 8005bf4:	e000e018 	.word	0xe000e018
 8005bf8:	20000000 	.word	0x20000000
 8005bfc:	10624dd3 	.word	0x10624dd3
 8005c00:	e000e014 	.word	0xe000e014

08005c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005c14 <vPortEnableVFP+0x10>
 8005c08:	6801      	ldr	r1, [r0, #0]
 8005c0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005c0e:	6001      	str	r1, [r0, #0]
 8005c10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c12:	bf00      	nop
 8005c14:	e000ed88 	.word	0xe000ed88

08005c18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c1e:	f3ef 8305 	mrs	r3, IPSR
 8005c22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b0f      	cmp	r3, #15
 8005c28:	d915      	bls.n	8005c56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c2a:	4a18      	ldr	r2, [pc, #96]	@ (8005c8c <vPortValidateInterruptPriority+0x74>)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c34:	4b16      	ldr	r3, [pc, #88]	@ (8005c90 <vPortValidateInterruptPriority+0x78>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	7afa      	ldrb	r2, [r7, #11]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d20b      	bcs.n	8005c56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	607b      	str	r3, [r7, #4]
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	e7fd      	b.n	8005c52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c56:	4b0f      	ldr	r3, [pc, #60]	@ (8005c94 <vPortValidateInterruptPriority+0x7c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c98 <vPortValidateInterruptPriority+0x80>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d90b      	bls.n	8005c7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	603b      	str	r3, [r7, #0]
}
 8005c78:	bf00      	nop
 8005c7a:	bf00      	nop
 8005c7c:	e7fd      	b.n	8005c7a <vPortValidateInterruptPriority+0x62>
	}
 8005c7e:	bf00      	nop
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	e000e3f0 	.word	0xe000e3f0
 8005c90:	20000564 	.word	0x20000564
 8005c94:	e000ed0c 	.word	0xe000ed0c
 8005c98:	20000568 	.word	0x20000568

08005c9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08a      	sub	sp, #40	@ 0x28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ca8:	f7fe fdaa 	bl	8004800 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cac:	4b5c      	ldr	r3, [pc, #368]	@ (8005e20 <pvPortMalloc+0x184>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005cb4:	f000 f924 	bl	8005f00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005cb8:	4b5a      	ldr	r3, [pc, #360]	@ (8005e24 <pvPortMalloc+0x188>)
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f040 8095 	bne.w	8005df0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01e      	beq.n	8005d0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005ccc:	2208      	movs	r2, #8
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d015      	beq.n	8005d0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f023 0307 	bic.w	r3, r3, #7
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00b      	beq.n	8005d0a <pvPortMalloc+0x6e>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	617b      	str	r3, [r7, #20]
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop
 8005d08:	e7fd      	b.n	8005d06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d06f      	beq.n	8005df0 <pvPortMalloc+0x154>
 8005d10:	4b45      	ldr	r3, [pc, #276]	@ (8005e28 <pvPortMalloc+0x18c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d86a      	bhi.n	8005df0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d1a:	4b44      	ldr	r3, [pc, #272]	@ (8005e2c <pvPortMalloc+0x190>)
 8005d1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d1e:	4b43      	ldr	r3, [pc, #268]	@ (8005e2c <pvPortMalloc+0x190>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d24:	e004      	b.n	8005d30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d903      	bls.n	8005d42 <pvPortMalloc+0xa6>
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f1      	bne.n	8005d26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d42:	4b37      	ldr	r3, [pc, #220]	@ (8005e20 <pvPortMalloc+0x184>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d051      	beq.n	8005df0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2208      	movs	r2, #8
 8005d52:	4413      	add	r3, r2
 8005d54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	1ad2      	subs	r2, r2, r3
 8005d66:	2308      	movs	r3, #8
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d920      	bls.n	8005db0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4413      	add	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00b      	beq.n	8005d98 <pvPortMalloc+0xfc>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	613b      	str	r3, [r7, #16]
}
 8005d92:	bf00      	nop
 8005d94:	bf00      	nop
 8005d96:	e7fd      	b.n	8005d94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	1ad2      	subs	r2, r2, r3
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005daa:	69b8      	ldr	r0, [r7, #24]
 8005dac:	f000 f90a 	bl	8005fc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005db0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e28 <pvPortMalloc+0x18c>)
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	4a1b      	ldr	r2, [pc, #108]	@ (8005e28 <pvPortMalloc+0x18c>)
 8005dbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8005e28 <pvPortMalloc+0x18c>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e30 <pvPortMalloc+0x194>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d203      	bcs.n	8005dd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005dca:	4b17      	ldr	r3, [pc, #92]	@ (8005e28 <pvPortMalloc+0x18c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a18      	ldr	r2, [pc, #96]	@ (8005e30 <pvPortMalloc+0x194>)
 8005dd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	4b13      	ldr	r3, [pc, #76]	@ (8005e24 <pvPortMalloc+0x188>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005de6:	4b13      	ldr	r3, [pc, #76]	@ (8005e34 <pvPortMalloc+0x198>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3301      	adds	r3, #1
 8005dec:	4a11      	ldr	r2, [pc, #68]	@ (8005e34 <pvPortMalloc+0x198>)
 8005dee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005df0:	f7fe fd14 	bl	800481c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00b      	beq.n	8005e16 <pvPortMalloc+0x17a>
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	60fb      	str	r3, [r7, #12]
}
 8005e10:	bf00      	nop
 8005e12:	bf00      	nop
 8005e14:	e7fd      	b.n	8005e12 <pvPortMalloc+0x176>
	return pvReturn;
 8005e16:	69fb      	ldr	r3, [r7, #28]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3728      	adds	r7, #40	@ 0x28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20001174 	.word	0x20001174
 8005e24:	20001188 	.word	0x20001188
 8005e28:	20001178 	.word	0x20001178
 8005e2c:	2000116c 	.word	0x2000116c
 8005e30:	2000117c 	.word	0x2000117c
 8005e34:	20001180 	.word	0x20001180

08005e38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d04f      	beq.n	8005eea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e4a:	2308      	movs	r3, #8
 8005e4c:	425b      	negs	r3, r3
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4413      	add	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	4b25      	ldr	r3, [pc, #148]	@ (8005ef4 <vPortFree+0xbc>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4013      	ands	r3, r2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10b      	bne.n	8005e7e <vPortFree+0x46>
	__asm volatile
 8005e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	60fb      	str	r3, [r7, #12]
}
 8005e78:	bf00      	nop
 8005e7a:	bf00      	nop
 8005e7c:	e7fd      	b.n	8005e7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <vPortFree+0x66>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	60bb      	str	r3, [r7, #8]
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	e7fd      	b.n	8005e9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	4b14      	ldr	r3, [pc, #80]	@ (8005ef4 <vPortFree+0xbc>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d01e      	beq.n	8005eea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d11a      	bne.n	8005eea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef4 <vPortFree+0xbc>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	401a      	ands	r2, r3
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ec4:	f7fe fc9c 	bl	8004800 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef8 <vPortFree+0xc0>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	4a09      	ldr	r2, [pc, #36]	@ (8005ef8 <vPortFree+0xc0>)
 8005ed4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ed6:	6938      	ldr	r0, [r7, #16]
 8005ed8:	f000 f874 	bl	8005fc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005edc:	4b07      	ldr	r3, [pc, #28]	@ (8005efc <vPortFree+0xc4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	4a06      	ldr	r2, [pc, #24]	@ (8005efc <vPortFree+0xc4>)
 8005ee4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005ee6:	f7fe fc99 	bl	800481c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005eea:	bf00      	nop
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20001188 	.word	0x20001188
 8005ef8:	20001178 	.word	0x20001178
 8005efc:	20001184 	.word	0x20001184

08005f00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f06:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005f0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f0c:	4b27      	ldr	r3, [pc, #156]	@ (8005fac <prvHeapInit+0xac>)
 8005f0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00c      	beq.n	8005f34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3307      	adds	r3, #7
 8005f1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0307 	bic.w	r3, r3, #7
 8005f26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005fac <prvHeapInit+0xac>)
 8005f30:	4413      	add	r3, r2
 8005f32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f38:	4a1d      	ldr	r2, [pc, #116]	@ (8005fb0 <prvHeapInit+0xb0>)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8005fb0 <prvHeapInit+0xb0>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	4413      	add	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f4c:	2208      	movs	r2, #8
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1a9b      	subs	r3, r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 0307 	bic.w	r3, r3, #7
 8005f5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4a15      	ldr	r2, [pc, #84]	@ (8005fb4 <prvHeapInit+0xb4>)
 8005f60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f62:	4b14      	ldr	r3, [pc, #80]	@ (8005fb4 <prvHeapInit+0xb4>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2200      	movs	r2, #0
 8005f68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f6a:	4b12      	ldr	r3, [pc, #72]	@ (8005fb4 <prvHeapInit+0xb4>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	1ad2      	subs	r2, r2, r3
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f80:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb4 <prvHeapInit+0xb4>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8005fb8 <prvHeapInit+0xb8>)
 8005f8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	4a09      	ldr	r2, [pc, #36]	@ (8005fbc <prvHeapInit+0xbc>)
 8005f96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f98:	4b09      	ldr	r3, [pc, #36]	@ (8005fc0 <prvHeapInit+0xc0>)
 8005f9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f9e:	601a      	str	r2, [r3, #0]
}
 8005fa0:	bf00      	nop
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	2000056c 	.word	0x2000056c
 8005fb0:	2000116c 	.word	0x2000116c
 8005fb4:	20001174 	.word	0x20001174
 8005fb8:	2000117c 	.word	0x2000117c
 8005fbc:	20001178 	.word	0x20001178
 8005fc0:	20001188 	.word	0x20001188

08005fc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fcc:	4b28      	ldr	r3, [pc, #160]	@ (8006070 <prvInsertBlockIntoFreeList+0xac>)
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e002      	b.n	8005fd8 <prvInsertBlockIntoFreeList+0x14>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d8f7      	bhi.n	8005fd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	4413      	add	r3, r2
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d108      	bne.n	8006006 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	441a      	add	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	441a      	add	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d118      	bne.n	800604c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	4b15      	ldr	r3, [pc, #84]	@ (8006074 <prvInsertBlockIntoFreeList+0xb0>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d00d      	beq.n	8006042 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	441a      	add	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	e008      	b.n	8006054 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006042:	4b0c      	ldr	r3, [pc, #48]	@ (8006074 <prvInsertBlockIntoFreeList+0xb0>)
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	e003      	b.n	8006054 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	429a      	cmp	r2, r3
 800605a:	d002      	beq.n	8006062 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006062:	bf00      	nop
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	2000116c 	.word	0x2000116c
 8006074:	20001174 	.word	0x20001174

08006078 <rand>:
 8006078:	4b16      	ldr	r3, [pc, #88]	@ (80060d4 <rand+0x5c>)
 800607a:	b510      	push	{r4, lr}
 800607c:	681c      	ldr	r4, [r3, #0]
 800607e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006080:	b9b3      	cbnz	r3, 80060b0 <rand+0x38>
 8006082:	2018      	movs	r0, #24
 8006084:	f000 fa84 	bl	8006590 <malloc>
 8006088:	4602      	mov	r2, r0
 800608a:	6320      	str	r0, [r4, #48]	@ 0x30
 800608c:	b920      	cbnz	r0, 8006098 <rand+0x20>
 800608e:	4b12      	ldr	r3, [pc, #72]	@ (80060d8 <rand+0x60>)
 8006090:	4812      	ldr	r0, [pc, #72]	@ (80060dc <rand+0x64>)
 8006092:	2152      	movs	r1, #82	@ 0x52
 8006094:	f000 fa14 	bl	80064c0 <__assert_func>
 8006098:	4911      	ldr	r1, [pc, #68]	@ (80060e0 <rand+0x68>)
 800609a:	4b12      	ldr	r3, [pc, #72]	@ (80060e4 <rand+0x6c>)
 800609c:	e9c0 1300 	strd	r1, r3, [r0]
 80060a0:	4b11      	ldr	r3, [pc, #68]	@ (80060e8 <rand+0x70>)
 80060a2:	6083      	str	r3, [r0, #8]
 80060a4:	230b      	movs	r3, #11
 80060a6:	8183      	strh	r3, [r0, #12]
 80060a8:	2100      	movs	r1, #0
 80060aa:	2001      	movs	r0, #1
 80060ac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80060b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80060b2:	480e      	ldr	r0, [pc, #56]	@ (80060ec <rand+0x74>)
 80060b4:	690b      	ldr	r3, [r1, #16]
 80060b6:	694c      	ldr	r4, [r1, #20]
 80060b8:	4a0d      	ldr	r2, [pc, #52]	@ (80060f0 <rand+0x78>)
 80060ba:	4358      	muls	r0, r3
 80060bc:	fb02 0004 	mla	r0, r2, r4, r0
 80060c0:	fba3 3202 	umull	r3, r2, r3, r2
 80060c4:	3301      	adds	r3, #1
 80060c6:	eb40 0002 	adc.w	r0, r0, r2
 80060ca:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80060ce:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80060d2:	bd10      	pop	{r4, pc}
 80060d4:	2000001c 	.word	0x2000001c
 80060d8:	080071b4 	.word	0x080071b4
 80060dc:	080071cb 	.word	0x080071cb
 80060e0:	abcd330e 	.word	0xabcd330e
 80060e4:	e66d1234 	.word	0xe66d1234
 80060e8:	0005deec 	.word	0x0005deec
 80060ec:	5851f42d 	.word	0x5851f42d
 80060f0:	4c957f2d 	.word	0x4c957f2d

080060f4 <std>:
 80060f4:	2300      	movs	r3, #0
 80060f6:	b510      	push	{r4, lr}
 80060f8:	4604      	mov	r4, r0
 80060fa:	e9c0 3300 	strd	r3, r3, [r0]
 80060fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006102:	6083      	str	r3, [r0, #8]
 8006104:	8181      	strh	r1, [r0, #12]
 8006106:	6643      	str	r3, [r0, #100]	@ 0x64
 8006108:	81c2      	strh	r2, [r0, #14]
 800610a:	6183      	str	r3, [r0, #24]
 800610c:	4619      	mov	r1, r3
 800610e:	2208      	movs	r2, #8
 8006110:	305c      	adds	r0, #92	@ 0x5c
 8006112:	f000 f8f4 	bl	80062fe <memset>
 8006116:	4b0d      	ldr	r3, [pc, #52]	@ (800614c <std+0x58>)
 8006118:	6263      	str	r3, [r4, #36]	@ 0x24
 800611a:	4b0d      	ldr	r3, [pc, #52]	@ (8006150 <std+0x5c>)
 800611c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800611e:	4b0d      	ldr	r3, [pc, #52]	@ (8006154 <std+0x60>)
 8006120:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006122:	4b0d      	ldr	r3, [pc, #52]	@ (8006158 <std+0x64>)
 8006124:	6323      	str	r3, [r4, #48]	@ 0x30
 8006126:	4b0d      	ldr	r3, [pc, #52]	@ (800615c <std+0x68>)
 8006128:	6224      	str	r4, [r4, #32]
 800612a:	429c      	cmp	r4, r3
 800612c:	d006      	beq.n	800613c <std+0x48>
 800612e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006132:	4294      	cmp	r4, r2
 8006134:	d002      	beq.n	800613c <std+0x48>
 8006136:	33d0      	adds	r3, #208	@ 0xd0
 8006138:	429c      	cmp	r4, r3
 800613a:	d105      	bne.n	8006148 <std+0x54>
 800613c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006144:	f000 b9aa 	b.w	800649c <__retarget_lock_init_recursive>
 8006148:	bd10      	pop	{r4, pc}
 800614a:	bf00      	nop
 800614c:	08006279 	.word	0x08006279
 8006150:	0800629b 	.word	0x0800629b
 8006154:	080062d3 	.word	0x080062d3
 8006158:	080062f7 	.word	0x080062f7
 800615c:	2000118c 	.word	0x2000118c

08006160 <stdio_exit_handler>:
 8006160:	4a02      	ldr	r2, [pc, #8]	@ (800616c <stdio_exit_handler+0xc>)
 8006162:	4903      	ldr	r1, [pc, #12]	@ (8006170 <stdio_exit_handler+0x10>)
 8006164:	4803      	ldr	r0, [pc, #12]	@ (8006174 <stdio_exit_handler+0x14>)
 8006166:	f000 b869 	b.w	800623c <_fwalk_sglue>
 800616a:	bf00      	nop
 800616c:	20000010 	.word	0x20000010
 8006170:	08006805 	.word	0x08006805
 8006174:	20000020 	.word	0x20000020

08006178 <cleanup_stdio>:
 8006178:	6841      	ldr	r1, [r0, #4]
 800617a:	4b0c      	ldr	r3, [pc, #48]	@ (80061ac <cleanup_stdio+0x34>)
 800617c:	4299      	cmp	r1, r3
 800617e:	b510      	push	{r4, lr}
 8006180:	4604      	mov	r4, r0
 8006182:	d001      	beq.n	8006188 <cleanup_stdio+0x10>
 8006184:	f000 fb3e 	bl	8006804 <_fflush_r>
 8006188:	68a1      	ldr	r1, [r4, #8]
 800618a:	4b09      	ldr	r3, [pc, #36]	@ (80061b0 <cleanup_stdio+0x38>)
 800618c:	4299      	cmp	r1, r3
 800618e:	d002      	beq.n	8006196 <cleanup_stdio+0x1e>
 8006190:	4620      	mov	r0, r4
 8006192:	f000 fb37 	bl	8006804 <_fflush_r>
 8006196:	68e1      	ldr	r1, [r4, #12]
 8006198:	4b06      	ldr	r3, [pc, #24]	@ (80061b4 <cleanup_stdio+0x3c>)
 800619a:	4299      	cmp	r1, r3
 800619c:	d004      	beq.n	80061a8 <cleanup_stdio+0x30>
 800619e:	4620      	mov	r0, r4
 80061a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a4:	f000 bb2e 	b.w	8006804 <_fflush_r>
 80061a8:	bd10      	pop	{r4, pc}
 80061aa:	bf00      	nop
 80061ac:	2000118c 	.word	0x2000118c
 80061b0:	200011f4 	.word	0x200011f4
 80061b4:	2000125c 	.word	0x2000125c

080061b8 <global_stdio_init.part.0>:
 80061b8:	b510      	push	{r4, lr}
 80061ba:	4b0b      	ldr	r3, [pc, #44]	@ (80061e8 <global_stdio_init.part.0+0x30>)
 80061bc:	4c0b      	ldr	r4, [pc, #44]	@ (80061ec <global_stdio_init.part.0+0x34>)
 80061be:	4a0c      	ldr	r2, [pc, #48]	@ (80061f0 <global_stdio_init.part.0+0x38>)
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	4620      	mov	r0, r4
 80061c4:	2200      	movs	r2, #0
 80061c6:	2104      	movs	r1, #4
 80061c8:	f7ff ff94 	bl	80060f4 <std>
 80061cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80061d0:	2201      	movs	r2, #1
 80061d2:	2109      	movs	r1, #9
 80061d4:	f7ff ff8e 	bl	80060f4 <std>
 80061d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80061dc:	2202      	movs	r2, #2
 80061de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061e2:	2112      	movs	r1, #18
 80061e4:	f7ff bf86 	b.w	80060f4 <std>
 80061e8:	200012c4 	.word	0x200012c4
 80061ec:	2000118c 	.word	0x2000118c
 80061f0:	08006161 	.word	0x08006161

080061f4 <__sfp_lock_acquire>:
 80061f4:	4801      	ldr	r0, [pc, #4]	@ (80061fc <__sfp_lock_acquire+0x8>)
 80061f6:	f000 b952 	b.w	800649e <__retarget_lock_acquire_recursive>
 80061fa:	bf00      	nop
 80061fc:	200012cd 	.word	0x200012cd

08006200 <__sfp_lock_release>:
 8006200:	4801      	ldr	r0, [pc, #4]	@ (8006208 <__sfp_lock_release+0x8>)
 8006202:	f000 b94d 	b.w	80064a0 <__retarget_lock_release_recursive>
 8006206:	bf00      	nop
 8006208:	200012cd 	.word	0x200012cd

0800620c <__sinit>:
 800620c:	b510      	push	{r4, lr}
 800620e:	4604      	mov	r4, r0
 8006210:	f7ff fff0 	bl	80061f4 <__sfp_lock_acquire>
 8006214:	6a23      	ldr	r3, [r4, #32]
 8006216:	b11b      	cbz	r3, 8006220 <__sinit+0x14>
 8006218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800621c:	f7ff bff0 	b.w	8006200 <__sfp_lock_release>
 8006220:	4b04      	ldr	r3, [pc, #16]	@ (8006234 <__sinit+0x28>)
 8006222:	6223      	str	r3, [r4, #32]
 8006224:	4b04      	ldr	r3, [pc, #16]	@ (8006238 <__sinit+0x2c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1f5      	bne.n	8006218 <__sinit+0xc>
 800622c:	f7ff ffc4 	bl	80061b8 <global_stdio_init.part.0>
 8006230:	e7f2      	b.n	8006218 <__sinit+0xc>
 8006232:	bf00      	nop
 8006234:	08006179 	.word	0x08006179
 8006238:	200012c4 	.word	0x200012c4

0800623c <_fwalk_sglue>:
 800623c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006240:	4607      	mov	r7, r0
 8006242:	4688      	mov	r8, r1
 8006244:	4614      	mov	r4, r2
 8006246:	2600      	movs	r6, #0
 8006248:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800624c:	f1b9 0901 	subs.w	r9, r9, #1
 8006250:	d505      	bpl.n	800625e <_fwalk_sglue+0x22>
 8006252:	6824      	ldr	r4, [r4, #0]
 8006254:	2c00      	cmp	r4, #0
 8006256:	d1f7      	bne.n	8006248 <_fwalk_sglue+0xc>
 8006258:	4630      	mov	r0, r6
 800625a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800625e:	89ab      	ldrh	r3, [r5, #12]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d907      	bls.n	8006274 <_fwalk_sglue+0x38>
 8006264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006268:	3301      	adds	r3, #1
 800626a:	d003      	beq.n	8006274 <_fwalk_sglue+0x38>
 800626c:	4629      	mov	r1, r5
 800626e:	4638      	mov	r0, r7
 8006270:	47c0      	blx	r8
 8006272:	4306      	orrs	r6, r0
 8006274:	3568      	adds	r5, #104	@ 0x68
 8006276:	e7e9      	b.n	800624c <_fwalk_sglue+0x10>

08006278 <__sread>:
 8006278:	b510      	push	{r4, lr}
 800627a:	460c      	mov	r4, r1
 800627c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006280:	f000 f8be 	bl	8006400 <_read_r>
 8006284:	2800      	cmp	r0, #0
 8006286:	bfab      	itete	ge
 8006288:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800628a:	89a3      	ldrhlt	r3, [r4, #12]
 800628c:	181b      	addge	r3, r3, r0
 800628e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006292:	bfac      	ite	ge
 8006294:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006296:	81a3      	strhlt	r3, [r4, #12]
 8006298:	bd10      	pop	{r4, pc}

0800629a <__swrite>:
 800629a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800629e:	461f      	mov	r7, r3
 80062a0:	898b      	ldrh	r3, [r1, #12]
 80062a2:	05db      	lsls	r3, r3, #23
 80062a4:	4605      	mov	r5, r0
 80062a6:	460c      	mov	r4, r1
 80062a8:	4616      	mov	r6, r2
 80062aa:	d505      	bpl.n	80062b8 <__swrite+0x1e>
 80062ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b0:	2302      	movs	r3, #2
 80062b2:	2200      	movs	r2, #0
 80062b4:	f000 f892 	bl	80063dc <_lseek_r>
 80062b8:	89a3      	ldrh	r3, [r4, #12]
 80062ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062c2:	81a3      	strh	r3, [r4, #12]
 80062c4:	4632      	mov	r2, r6
 80062c6:	463b      	mov	r3, r7
 80062c8:	4628      	mov	r0, r5
 80062ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ce:	f000 b8a9 	b.w	8006424 <_write_r>

080062d2 <__sseek>:
 80062d2:	b510      	push	{r4, lr}
 80062d4:	460c      	mov	r4, r1
 80062d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062da:	f000 f87f 	bl	80063dc <_lseek_r>
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	bf15      	itete	ne
 80062e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062ee:	81a3      	strheq	r3, [r4, #12]
 80062f0:	bf18      	it	ne
 80062f2:	81a3      	strhne	r3, [r4, #12]
 80062f4:	bd10      	pop	{r4, pc}

080062f6 <__sclose>:
 80062f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062fa:	f000 b809 	b.w	8006310 <_close_r>

080062fe <memset>:
 80062fe:	4402      	add	r2, r0
 8006300:	4603      	mov	r3, r0
 8006302:	4293      	cmp	r3, r2
 8006304:	d100      	bne.n	8006308 <memset+0xa>
 8006306:	4770      	bx	lr
 8006308:	f803 1b01 	strb.w	r1, [r3], #1
 800630c:	e7f9      	b.n	8006302 <memset+0x4>
	...

08006310 <_close_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4d06      	ldr	r5, [pc, #24]	@ (800632c <_close_r+0x1c>)
 8006314:	2300      	movs	r3, #0
 8006316:	4604      	mov	r4, r0
 8006318:	4608      	mov	r0, r1
 800631a:	602b      	str	r3, [r5, #0]
 800631c:	f7fa fca6 	bl	8000c6c <_close>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d102      	bne.n	800632a <_close_r+0x1a>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b103      	cbz	r3, 800632a <_close_r+0x1a>
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	200012c8 	.word	0x200012c8

08006330 <_reclaim_reent>:
 8006330:	4b29      	ldr	r3, [pc, #164]	@ (80063d8 <_reclaim_reent+0xa8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4283      	cmp	r3, r0
 8006336:	b570      	push	{r4, r5, r6, lr}
 8006338:	4604      	mov	r4, r0
 800633a:	d04b      	beq.n	80063d4 <_reclaim_reent+0xa4>
 800633c:	69c3      	ldr	r3, [r0, #28]
 800633e:	b1ab      	cbz	r3, 800636c <_reclaim_reent+0x3c>
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	b16b      	cbz	r3, 8006360 <_reclaim_reent+0x30>
 8006344:	2500      	movs	r5, #0
 8006346:	69e3      	ldr	r3, [r4, #28]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	5959      	ldr	r1, [r3, r5]
 800634c:	2900      	cmp	r1, #0
 800634e:	d13b      	bne.n	80063c8 <_reclaim_reent+0x98>
 8006350:	3504      	adds	r5, #4
 8006352:	2d80      	cmp	r5, #128	@ 0x80
 8006354:	d1f7      	bne.n	8006346 <_reclaim_reent+0x16>
 8006356:	69e3      	ldr	r3, [r4, #28]
 8006358:	4620      	mov	r0, r4
 800635a:	68d9      	ldr	r1, [r3, #12]
 800635c:	f000 f8ce 	bl	80064fc <_free_r>
 8006360:	69e3      	ldr	r3, [r4, #28]
 8006362:	6819      	ldr	r1, [r3, #0]
 8006364:	b111      	cbz	r1, 800636c <_reclaim_reent+0x3c>
 8006366:	4620      	mov	r0, r4
 8006368:	f000 f8c8 	bl	80064fc <_free_r>
 800636c:	6961      	ldr	r1, [r4, #20]
 800636e:	b111      	cbz	r1, 8006376 <_reclaim_reent+0x46>
 8006370:	4620      	mov	r0, r4
 8006372:	f000 f8c3 	bl	80064fc <_free_r>
 8006376:	69e1      	ldr	r1, [r4, #28]
 8006378:	b111      	cbz	r1, 8006380 <_reclaim_reent+0x50>
 800637a:	4620      	mov	r0, r4
 800637c:	f000 f8be 	bl	80064fc <_free_r>
 8006380:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006382:	b111      	cbz	r1, 800638a <_reclaim_reent+0x5a>
 8006384:	4620      	mov	r0, r4
 8006386:	f000 f8b9 	bl	80064fc <_free_r>
 800638a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800638c:	b111      	cbz	r1, 8006394 <_reclaim_reent+0x64>
 800638e:	4620      	mov	r0, r4
 8006390:	f000 f8b4 	bl	80064fc <_free_r>
 8006394:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006396:	b111      	cbz	r1, 800639e <_reclaim_reent+0x6e>
 8006398:	4620      	mov	r0, r4
 800639a:	f000 f8af 	bl	80064fc <_free_r>
 800639e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80063a0:	b111      	cbz	r1, 80063a8 <_reclaim_reent+0x78>
 80063a2:	4620      	mov	r0, r4
 80063a4:	f000 f8aa 	bl	80064fc <_free_r>
 80063a8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80063aa:	b111      	cbz	r1, 80063b2 <_reclaim_reent+0x82>
 80063ac:	4620      	mov	r0, r4
 80063ae:	f000 f8a5 	bl	80064fc <_free_r>
 80063b2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80063b4:	b111      	cbz	r1, 80063bc <_reclaim_reent+0x8c>
 80063b6:	4620      	mov	r0, r4
 80063b8:	f000 f8a0 	bl	80064fc <_free_r>
 80063bc:	6a23      	ldr	r3, [r4, #32]
 80063be:	b14b      	cbz	r3, 80063d4 <_reclaim_reent+0xa4>
 80063c0:	4620      	mov	r0, r4
 80063c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063c6:	4718      	bx	r3
 80063c8:	680e      	ldr	r6, [r1, #0]
 80063ca:	4620      	mov	r0, r4
 80063cc:	f000 f896 	bl	80064fc <_free_r>
 80063d0:	4631      	mov	r1, r6
 80063d2:	e7bb      	b.n	800634c <_reclaim_reent+0x1c>
 80063d4:	bd70      	pop	{r4, r5, r6, pc}
 80063d6:	bf00      	nop
 80063d8:	2000001c 	.word	0x2000001c

080063dc <_lseek_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	4d07      	ldr	r5, [pc, #28]	@ (80063fc <_lseek_r+0x20>)
 80063e0:	4604      	mov	r4, r0
 80063e2:	4608      	mov	r0, r1
 80063e4:	4611      	mov	r1, r2
 80063e6:	2200      	movs	r2, #0
 80063e8:	602a      	str	r2, [r5, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	f7fa fc65 	bl	8000cba <_lseek>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d102      	bne.n	80063fa <_lseek_r+0x1e>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	b103      	cbz	r3, 80063fa <_lseek_r+0x1e>
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	bd38      	pop	{r3, r4, r5, pc}
 80063fc:	200012c8 	.word	0x200012c8

08006400 <_read_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4d07      	ldr	r5, [pc, #28]	@ (8006420 <_read_r+0x20>)
 8006404:	4604      	mov	r4, r0
 8006406:	4608      	mov	r0, r1
 8006408:	4611      	mov	r1, r2
 800640a:	2200      	movs	r2, #0
 800640c:	602a      	str	r2, [r5, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	f7fa fbf3 	bl	8000bfa <_read>
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d102      	bne.n	800641e <_read_r+0x1e>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	b103      	cbz	r3, 800641e <_read_r+0x1e>
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	bd38      	pop	{r3, r4, r5, pc}
 8006420:	200012c8 	.word	0x200012c8

08006424 <_write_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	4d07      	ldr	r5, [pc, #28]	@ (8006444 <_write_r+0x20>)
 8006428:	4604      	mov	r4, r0
 800642a:	4608      	mov	r0, r1
 800642c:	4611      	mov	r1, r2
 800642e:	2200      	movs	r2, #0
 8006430:	602a      	str	r2, [r5, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	f7fa fbfe 	bl	8000c34 <_write>
 8006438:	1c43      	adds	r3, r0, #1
 800643a:	d102      	bne.n	8006442 <_write_r+0x1e>
 800643c:	682b      	ldr	r3, [r5, #0]
 800643e:	b103      	cbz	r3, 8006442 <_write_r+0x1e>
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	bd38      	pop	{r3, r4, r5, pc}
 8006444:	200012c8 	.word	0x200012c8

08006448 <__errno>:
 8006448:	4b01      	ldr	r3, [pc, #4]	@ (8006450 <__errno+0x8>)
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	2000001c 	.word	0x2000001c

08006454 <__libc_init_array>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	4d0d      	ldr	r5, [pc, #52]	@ (800648c <__libc_init_array+0x38>)
 8006458:	4c0d      	ldr	r4, [pc, #52]	@ (8006490 <__libc_init_array+0x3c>)
 800645a:	1b64      	subs	r4, r4, r5
 800645c:	10a4      	asrs	r4, r4, #2
 800645e:	2600      	movs	r6, #0
 8006460:	42a6      	cmp	r6, r4
 8006462:	d109      	bne.n	8006478 <__libc_init_array+0x24>
 8006464:	4d0b      	ldr	r5, [pc, #44]	@ (8006494 <__libc_init_array+0x40>)
 8006466:	4c0c      	ldr	r4, [pc, #48]	@ (8006498 <__libc_init_array+0x44>)
 8006468:	f000 fe48 	bl	80070fc <_init>
 800646c:	1b64      	subs	r4, r4, r5
 800646e:	10a4      	asrs	r4, r4, #2
 8006470:	2600      	movs	r6, #0
 8006472:	42a6      	cmp	r6, r4
 8006474:	d105      	bne.n	8006482 <__libc_init_array+0x2e>
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	f855 3b04 	ldr.w	r3, [r5], #4
 800647c:	4798      	blx	r3
 800647e:	3601      	adds	r6, #1
 8006480:	e7ee      	b.n	8006460 <__libc_init_array+0xc>
 8006482:	f855 3b04 	ldr.w	r3, [r5], #4
 8006486:	4798      	blx	r3
 8006488:	3601      	adds	r6, #1
 800648a:	e7f2      	b.n	8006472 <__libc_init_array+0x1e>
 800648c:	0800729c 	.word	0x0800729c
 8006490:	0800729c 	.word	0x0800729c
 8006494:	0800729c 	.word	0x0800729c
 8006498:	080072a0 	.word	0x080072a0

0800649c <__retarget_lock_init_recursive>:
 800649c:	4770      	bx	lr

0800649e <__retarget_lock_acquire_recursive>:
 800649e:	4770      	bx	lr

080064a0 <__retarget_lock_release_recursive>:
 80064a0:	4770      	bx	lr

080064a2 <memcpy>:
 80064a2:	440a      	add	r2, r1
 80064a4:	4291      	cmp	r1, r2
 80064a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80064aa:	d100      	bne.n	80064ae <memcpy+0xc>
 80064ac:	4770      	bx	lr
 80064ae:	b510      	push	{r4, lr}
 80064b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064b8:	4291      	cmp	r1, r2
 80064ba:	d1f9      	bne.n	80064b0 <memcpy+0xe>
 80064bc:	bd10      	pop	{r4, pc}
	...

080064c0 <__assert_func>:
 80064c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064c2:	4614      	mov	r4, r2
 80064c4:	461a      	mov	r2, r3
 80064c6:	4b09      	ldr	r3, [pc, #36]	@ (80064ec <__assert_func+0x2c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4605      	mov	r5, r0
 80064cc:	68d8      	ldr	r0, [r3, #12]
 80064ce:	b954      	cbnz	r4, 80064e6 <__assert_func+0x26>
 80064d0:	4b07      	ldr	r3, [pc, #28]	@ (80064f0 <__assert_func+0x30>)
 80064d2:	461c      	mov	r4, r3
 80064d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064d8:	9100      	str	r1, [sp, #0]
 80064da:	462b      	mov	r3, r5
 80064dc:	4905      	ldr	r1, [pc, #20]	@ (80064f4 <__assert_func+0x34>)
 80064de:	f000 f9b9 	bl	8006854 <fiprintf>
 80064e2:	f000 f9d9 	bl	8006898 <abort>
 80064e6:	4b04      	ldr	r3, [pc, #16]	@ (80064f8 <__assert_func+0x38>)
 80064e8:	e7f4      	b.n	80064d4 <__assert_func+0x14>
 80064ea:	bf00      	nop
 80064ec:	2000001c 	.word	0x2000001c
 80064f0:	0800725e 	.word	0x0800725e
 80064f4:	08007230 	.word	0x08007230
 80064f8:	08007223 	.word	0x08007223

080064fc <_free_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	4605      	mov	r5, r0
 8006500:	2900      	cmp	r1, #0
 8006502:	d041      	beq.n	8006588 <_free_r+0x8c>
 8006504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006508:	1f0c      	subs	r4, r1, #4
 800650a:	2b00      	cmp	r3, #0
 800650c:	bfb8      	it	lt
 800650e:	18e4      	addlt	r4, r4, r3
 8006510:	f000 f8e8 	bl	80066e4 <__malloc_lock>
 8006514:	4a1d      	ldr	r2, [pc, #116]	@ (800658c <_free_r+0x90>)
 8006516:	6813      	ldr	r3, [r2, #0]
 8006518:	b933      	cbnz	r3, 8006528 <_free_r+0x2c>
 800651a:	6063      	str	r3, [r4, #4]
 800651c:	6014      	str	r4, [r2, #0]
 800651e:	4628      	mov	r0, r5
 8006520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006524:	f000 b8e4 	b.w	80066f0 <__malloc_unlock>
 8006528:	42a3      	cmp	r3, r4
 800652a:	d908      	bls.n	800653e <_free_r+0x42>
 800652c:	6820      	ldr	r0, [r4, #0]
 800652e:	1821      	adds	r1, r4, r0
 8006530:	428b      	cmp	r3, r1
 8006532:	bf01      	itttt	eq
 8006534:	6819      	ldreq	r1, [r3, #0]
 8006536:	685b      	ldreq	r3, [r3, #4]
 8006538:	1809      	addeq	r1, r1, r0
 800653a:	6021      	streq	r1, [r4, #0]
 800653c:	e7ed      	b.n	800651a <_free_r+0x1e>
 800653e:	461a      	mov	r2, r3
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	b10b      	cbz	r3, 8006548 <_free_r+0x4c>
 8006544:	42a3      	cmp	r3, r4
 8006546:	d9fa      	bls.n	800653e <_free_r+0x42>
 8006548:	6811      	ldr	r1, [r2, #0]
 800654a:	1850      	adds	r0, r2, r1
 800654c:	42a0      	cmp	r0, r4
 800654e:	d10b      	bne.n	8006568 <_free_r+0x6c>
 8006550:	6820      	ldr	r0, [r4, #0]
 8006552:	4401      	add	r1, r0
 8006554:	1850      	adds	r0, r2, r1
 8006556:	4283      	cmp	r3, r0
 8006558:	6011      	str	r1, [r2, #0]
 800655a:	d1e0      	bne.n	800651e <_free_r+0x22>
 800655c:	6818      	ldr	r0, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	6053      	str	r3, [r2, #4]
 8006562:	4408      	add	r0, r1
 8006564:	6010      	str	r0, [r2, #0]
 8006566:	e7da      	b.n	800651e <_free_r+0x22>
 8006568:	d902      	bls.n	8006570 <_free_r+0x74>
 800656a:	230c      	movs	r3, #12
 800656c:	602b      	str	r3, [r5, #0]
 800656e:	e7d6      	b.n	800651e <_free_r+0x22>
 8006570:	6820      	ldr	r0, [r4, #0]
 8006572:	1821      	adds	r1, r4, r0
 8006574:	428b      	cmp	r3, r1
 8006576:	bf04      	itt	eq
 8006578:	6819      	ldreq	r1, [r3, #0]
 800657a:	685b      	ldreq	r3, [r3, #4]
 800657c:	6063      	str	r3, [r4, #4]
 800657e:	bf04      	itt	eq
 8006580:	1809      	addeq	r1, r1, r0
 8006582:	6021      	streq	r1, [r4, #0]
 8006584:	6054      	str	r4, [r2, #4]
 8006586:	e7ca      	b.n	800651e <_free_r+0x22>
 8006588:	bd38      	pop	{r3, r4, r5, pc}
 800658a:	bf00      	nop
 800658c:	200012d4 	.word	0x200012d4

08006590 <malloc>:
 8006590:	4b02      	ldr	r3, [pc, #8]	@ (800659c <malloc+0xc>)
 8006592:	4601      	mov	r1, r0
 8006594:	6818      	ldr	r0, [r3, #0]
 8006596:	f000 b825 	b.w	80065e4 <_malloc_r>
 800659a:	bf00      	nop
 800659c:	2000001c 	.word	0x2000001c

080065a0 <sbrk_aligned>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	4e0f      	ldr	r6, [pc, #60]	@ (80065e0 <sbrk_aligned+0x40>)
 80065a4:	460c      	mov	r4, r1
 80065a6:	6831      	ldr	r1, [r6, #0]
 80065a8:	4605      	mov	r5, r0
 80065aa:	b911      	cbnz	r1, 80065b2 <sbrk_aligned+0x12>
 80065ac:	f000 f964 	bl	8006878 <_sbrk_r>
 80065b0:	6030      	str	r0, [r6, #0]
 80065b2:	4621      	mov	r1, r4
 80065b4:	4628      	mov	r0, r5
 80065b6:	f000 f95f 	bl	8006878 <_sbrk_r>
 80065ba:	1c43      	adds	r3, r0, #1
 80065bc:	d103      	bne.n	80065c6 <sbrk_aligned+0x26>
 80065be:	f04f 34ff 	mov.w	r4, #4294967295
 80065c2:	4620      	mov	r0, r4
 80065c4:	bd70      	pop	{r4, r5, r6, pc}
 80065c6:	1cc4      	adds	r4, r0, #3
 80065c8:	f024 0403 	bic.w	r4, r4, #3
 80065cc:	42a0      	cmp	r0, r4
 80065ce:	d0f8      	beq.n	80065c2 <sbrk_aligned+0x22>
 80065d0:	1a21      	subs	r1, r4, r0
 80065d2:	4628      	mov	r0, r5
 80065d4:	f000 f950 	bl	8006878 <_sbrk_r>
 80065d8:	3001      	adds	r0, #1
 80065da:	d1f2      	bne.n	80065c2 <sbrk_aligned+0x22>
 80065dc:	e7ef      	b.n	80065be <sbrk_aligned+0x1e>
 80065de:	bf00      	nop
 80065e0:	200012d0 	.word	0x200012d0

080065e4 <_malloc_r>:
 80065e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065e8:	1ccd      	adds	r5, r1, #3
 80065ea:	f025 0503 	bic.w	r5, r5, #3
 80065ee:	3508      	adds	r5, #8
 80065f0:	2d0c      	cmp	r5, #12
 80065f2:	bf38      	it	cc
 80065f4:	250c      	movcc	r5, #12
 80065f6:	2d00      	cmp	r5, #0
 80065f8:	4606      	mov	r6, r0
 80065fa:	db01      	blt.n	8006600 <_malloc_r+0x1c>
 80065fc:	42a9      	cmp	r1, r5
 80065fe:	d904      	bls.n	800660a <_malloc_r+0x26>
 8006600:	230c      	movs	r3, #12
 8006602:	6033      	str	r3, [r6, #0]
 8006604:	2000      	movs	r0, #0
 8006606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800660a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80066e0 <_malloc_r+0xfc>
 800660e:	f000 f869 	bl	80066e4 <__malloc_lock>
 8006612:	f8d8 3000 	ldr.w	r3, [r8]
 8006616:	461c      	mov	r4, r3
 8006618:	bb44      	cbnz	r4, 800666c <_malloc_r+0x88>
 800661a:	4629      	mov	r1, r5
 800661c:	4630      	mov	r0, r6
 800661e:	f7ff ffbf 	bl	80065a0 <sbrk_aligned>
 8006622:	1c43      	adds	r3, r0, #1
 8006624:	4604      	mov	r4, r0
 8006626:	d158      	bne.n	80066da <_malloc_r+0xf6>
 8006628:	f8d8 4000 	ldr.w	r4, [r8]
 800662c:	4627      	mov	r7, r4
 800662e:	2f00      	cmp	r7, #0
 8006630:	d143      	bne.n	80066ba <_malloc_r+0xd6>
 8006632:	2c00      	cmp	r4, #0
 8006634:	d04b      	beq.n	80066ce <_malloc_r+0xea>
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	4639      	mov	r1, r7
 800663a:	4630      	mov	r0, r6
 800663c:	eb04 0903 	add.w	r9, r4, r3
 8006640:	f000 f91a 	bl	8006878 <_sbrk_r>
 8006644:	4581      	cmp	r9, r0
 8006646:	d142      	bne.n	80066ce <_malloc_r+0xea>
 8006648:	6821      	ldr	r1, [r4, #0]
 800664a:	1a6d      	subs	r5, r5, r1
 800664c:	4629      	mov	r1, r5
 800664e:	4630      	mov	r0, r6
 8006650:	f7ff ffa6 	bl	80065a0 <sbrk_aligned>
 8006654:	3001      	adds	r0, #1
 8006656:	d03a      	beq.n	80066ce <_malloc_r+0xea>
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	442b      	add	r3, r5
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	f8d8 3000 	ldr.w	r3, [r8]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	bb62      	cbnz	r2, 80066c0 <_malloc_r+0xdc>
 8006666:	f8c8 7000 	str.w	r7, [r8]
 800666a:	e00f      	b.n	800668c <_malloc_r+0xa8>
 800666c:	6822      	ldr	r2, [r4, #0]
 800666e:	1b52      	subs	r2, r2, r5
 8006670:	d420      	bmi.n	80066b4 <_malloc_r+0xd0>
 8006672:	2a0b      	cmp	r2, #11
 8006674:	d917      	bls.n	80066a6 <_malloc_r+0xc2>
 8006676:	1961      	adds	r1, r4, r5
 8006678:	42a3      	cmp	r3, r4
 800667a:	6025      	str	r5, [r4, #0]
 800667c:	bf18      	it	ne
 800667e:	6059      	strne	r1, [r3, #4]
 8006680:	6863      	ldr	r3, [r4, #4]
 8006682:	bf08      	it	eq
 8006684:	f8c8 1000 	streq.w	r1, [r8]
 8006688:	5162      	str	r2, [r4, r5]
 800668a:	604b      	str	r3, [r1, #4]
 800668c:	4630      	mov	r0, r6
 800668e:	f000 f82f 	bl	80066f0 <__malloc_unlock>
 8006692:	f104 000b 	add.w	r0, r4, #11
 8006696:	1d23      	adds	r3, r4, #4
 8006698:	f020 0007 	bic.w	r0, r0, #7
 800669c:	1ac2      	subs	r2, r0, r3
 800669e:	bf1c      	itt	ne
 80066a0:	1a1b      	subne	r3, r3, r0
 80066a2:	50a3      	strne	r3, [r4, r2]
 80066a4:	e7af      	b.n	8006606 <_malloc_r+0x22>
 80066a6:	6862      	ldr	r2, [r4, #4]
 80066a8:	42a3      	cmp	r3, r4
 80066aa:	bf0c      	ite	eq
 80066ac:	f8c8 2000 	streq.w	r2, [r8]
 80066b0:	605a      	strne	r2, [r3, #4]
 80066b2:	e7eb      	b.n	800668c <_malloc_r+0xa8>
 80066b4:	4623      	mov	r3, r4
 80066b6:	6864      	ldr	r4, [r4, #4]
 80066b8:	e7ae      	b.n	8006618 <_malloc_r+0x34>
 80066ba:	463c      	mov	r4, r7
 80066bc:	687f      	ldr	r7, [r7, #4]
 80066be:	e7b6      	b.n	800662e <_malloc_r+0x4a>
 80066c0:	461a      	mov	r2, r3
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	42a3      	cmp	r3, r4
 80066c6:	d1fb      	bne.n	80066c0 <_malloc_r+0xdc>
 80066c8:	2300      	movs	r3, #0
 80066ca:	6053      	str	r3, [r2, #4]
 80066cc:	e7de      	b.n	800668c <_malloc_r+0xa8>
 80066ce:	230c      	movs	r3, #12
 80066d0:	6033      	str	r3, [r6, #0]
 80066d2:	4630      	mov	r0, r6
 80066d4:	f000 f80c 	bl	80066f0 <__malloc_unlock>
 80066d8:	e794      	b.n	8006604 <_malloc_r+0x20>
 80066da:	6005      	str	r5, [r0, #0]
 80066dc:	e7d6      	b.n	800668c <_malloc_r+0xa8>
 80066de:	bf00      	nop
 80066e0:	200012d4 	.word	0x200012d4

080066e4 <__malloc_lock>:
 80066e4:	4801      	ldr	r0, [pc, #4]	@ (80066ec <__malloc_lock+0x8>)
 80066e6:	f7ff beda 	b.w	800649e <__retarget_lock_acquire_recursive>
 80066ea:	bf00      	nop
 80066ec:	200012cc 	.word	0x200012cc

080066f0 <__malloc_unlock>:
 80066f0:	4801      	ldr	r0, [pc, #4]	@ (80066f8 <__malloc_unlock+0x8>)
 80066f2:	f7ff bed5 	b.w	80064a0 <__retarget_lock_release_recursive>
 80066f6:	bf00      	nop
 80066f8:	200012cc 	.word	0x200012cc

080066fc <__sflush_r>:
 80066fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006704:	0716      	lsls	r6, r2, #28
 8006706:	4605      	mov	r5, r0
 8006708:	460c      	mov	r4, r1
 800670a:	d454      	bmi.n	80067b6 <__sflush_r+0xba>
 800670c:	684b      	ldr	r3, [r1, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	dc02      	bgt.n	8006718 <__sflush_r+0x1c>
 8006712:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006714:	2b00      	cmp	r3, #0
 8006716:	dd48      	ble.n	80067aa <__sflush_r+0xae>
 8006718:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800671a:	2e00      	cmp	r6, #0
 800671c:	d045      	beq.n	80067aa <__sflush_r+0xae>
 800671e:	2300      	movs	r3, #0
 8006720:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006724:	682f      	ldr	r7, [r5, #0]
 8006726:	6a21      	ldr	r1, [r4, #32]
 8006728:	602b      	str	r3, [r5, #0]
 800672a:	d030      	beq.n	800678e <__sflush_r+0x92>
 800672c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800672e:	89a3      	ldrh	r3, [r4, #12]
 8006730:	0759      	lsls	r1, r3, #29
 8006732:	d505      	bpl.n	8006740 <__sflush_r+0x44>
 8006734:	6863      	ldr	r3, [r4, #4]
 8006736:	1ad2      	subs	r2, r2, r3
 8006738:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800673a:	b10b      	cbz	r3, 8006740 <__sflush_r+0x44>
 800673c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800673e:	1ad2      	subs	r2, r2, r3
 8006740:	2300      	movs	r3, #0
 8006742:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006744:	6a21      	ldr	r1, [r4, #32]
 8006746:	4628      	mov	r0, r5
 8006748:	47b0      	blx	r6
 800674a:	1c43      	adds	r3, r0, #1
 800674c:	89a3      	ldrh	r3, [r4, #12]
 800674e:	d106      	bne.n	800675e <__sflush_r+0x62>
 8006750:	6829      	ldr	r1, [r5, #0]
 8006752:	291d      	cmp	r1, #29
 8006754:	d82b      	bhi.n	80067ae <__sflush_r+0xb2>
 8006756:	4a2a      	ldr	r2, [pc, #168]	@ (8006800 <__sflush_r+0x104>)
 8006758:	410a      	asrs	r2, r1
 800675a:	07d6      	lsls	r6, r2, #31
 800675c:	d427      	bmi.n	80067ae <__sflush_r+0xb2>
 800675e:	2200      	movs	r2, #0
 8006760:	6062      	str	r2, [r4, #4]
 8006762:	04d9      	lsls	r1, r3, #19
 8006764:	6922      	ldr	r2, [r4, #16]
 8006766:	6022      	str	r2, [r4, #0]
 8006768:	d504      	bpl.n	8006774 <__sflush_r+0x78>
 800676a:	1c42      	adds	r2, r0, #1
 800676c:	d101      	bne.n	8006772 <__sflush_r+0x76>
 800676e:	682b      	ldr	r3, [r5, #0]
 8006770:	b903      	cbnz	r3, 8006774 <__sflush_r+0x78>
 8006772:	6560      	str	r0, [r4, #84]	@ 0x54
 8006774:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006776:	602f      	str	r7, [r5, #0]
 8006778:	b1b9      	cbz	r1, 80067aa <__sflush_r+0xae>
 800677a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800677e:	4299      	cmp	r1, r3
 8006780:	d002      	beq.n	8006788 <__sflush_r+0x8c>
 8006782:	4628      	mov	r0, r5
 8006784:	f7ff feba 	bl	80064fc <_free_r>
 8006788:	2300      	movs	r3, #0
 800678a:	6363      	str	r3, [r4, #52]	@ 0x34
 800678c:	e00d      	b.n	80067aa <__sflush_r+0xae>
 800678e:	2301      	movs	r3, #1
 8006790:	4628      	mov	r0, r5
 8006792:	47b0      	blx	r6
 8006794:	4602      	mov	r2, r0
 8006796:	1c50      	adds	r0, r2, #1
 8006798:	d1c9      	bne.n	800672e <__sflush_r+0x32>
 800679a:	682b      	ldr	r3, [r5, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0c6      	beq.n	800672e <__sflush_r+0x32>
 80067a0:	2b1d      	cmp	r3, #29
 80067a2:	d001      	beq.n	80067a8 <__sflush_r+0xac>
 80067a4:	2b16      	cmp	r3, #22
 80067a6:	d11e      	bne.n	80067e6 <__sflush_r+0xea>
 80067a8:	602f      	str	r7, [r5, #0]
 80067aa:	2000      	movs	r0, #0
 80067ac:	e022      	b.n	80067f4 <__sflush_r+0xf8>
 80067ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067b2:	b21b      	sxth	r3, r3
 80067b4:	e01b      	b.n	80067ee <__sflush_r+0xf2>
 80067b6:	690f      	ldr	r7, [r1, #16]
 80067b8:	2f00      	cmp	r7, #0
 80067ba:	d0f6      	beq.n	80067aa <__sflush_r+0xae>
 80067bc:	0793      	lsls	r3, r2, #30
 80067be:	680e      	ldr	r6, [r1, #0]
 80067c0:	bf08      	it	eq
 80067c2:	694b      	ldreq	r3, [r1, #20]
 80067c4:	600f      	str	r7, [r1, #0]
 80067c6:	bf18      	it	ne
 80067c8:	2300      	movne	r3, #0
 80067ca:	eba6 0807 	sub.w	r8, r6, r7
 80067ce:	608b      	str	r3, [r1, #8]
 80067d0:	f1b8 0f00 	cmp.w	r8, #0
 80067d4:	dde9      	ble.n	80067aa <__sflush_r+0xae>
 80067d6:	6a21      	ldr	r1, [r4, #32]
 80067d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80067da:	4643      	mov	r3, r8
 80067dc:	463a      	mov	r2, r7
 80067de:	4628      	mov	r0, r5
 80067e0:	47b0      	blx	r6
 80067e2:	2800      	cmp	r0, #0
 80067e4:	dc08      	bgt.n	80067f8 <__sflush_r+0xfc>
 80067e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067ee:	81a3      	strh	r3, [r4, #12]
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f8:	4407      	add	r7, r0
 80067fa:	eba8 0800 	sub.w	r8, r8, r0
 80067fe:	e7e7      	b.n	80067d0 <__sflush_r+0xd4>
 8006800:	dfbffffe 	.word	0xdfbffffe

08006804 <_fflush_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	690b      	ldr	r3, [r1, #16]
 8006808:	4605      	mov	r5, r0
 800680a:	460c      	mov	r4, r1
 800680c:	b913      	cbnz	r3, 8006814 <_fflush_r+0x10>
 800680e:	2500      	movs	r5, #0
 8006810:	4628      	mov	r0, r5
 8006812:	bd38      	pop	{r3, r4, r5, pc}
 8006814:	b118      	cbz	r0, 800681e <_fflush_r+0x1a>
 8006816:	6a03      	ldr	r3, [r0, #32]
 8006818:	b90b      	cbnz	r3, 800681e <_fflush_r+0x1a>
 800681a:	f7ff fcf7 	bl	800620c <__sinit>
 800681e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0f3      	beq.n	800680e <_fflush_r+0xa>
 8006826:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006828:	07d0      	lsls	r0, r2, #31
 800682a:	d404      	bmi.n	8006836 <_fflush_r+0x32>
 800682c:	0599      	lsls	r1, r3, #22
 800682e:	d402      	bmi.n	8006836 <_fflush_r+0x32>
 8006830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006832:	f7ff fe34 	bl	800649e <__retarget_lock_acquire_recursive>
 8006836:	4628      	mov	r0, r5
 8006838:	4621      	mov	r1, r4
 800683a:	f7ff ff5f 	bl	80066fc <__sflush_r>
 800683e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006840:	07da      	lsls	r2, r3, #31
 8006842:	4605      	mov	r5, r0
 8006844:	d4e4      	bmi.n	8006810 <_fflush_r+0xc>
 8006846:	89a3      	ldrh	r3, [r4, #12]
 8006848:	059b      	lsls	r3, r3, #22
 800684a:	d4e1      	bmi.n	8006810 <_fflush_r+0xc>
 800684c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800684e:	f7ff fe27 	bl	80064a0 <__retarget_lock_release_recursive>
 8006852:	e7dd      	b.n	8006810 <_fflush_r+0xc>

08006854 <fiprintf>:
 8006854:	b40e      	push	{r1, r2, r3}
 8006856:	b503      	push	{r0, r1, lr}
 8006858:	4601      	mov	r1, r0
 800685a:	ab03      	add	r3, sp, #12
 800685c:	4805      	ldr	r0, [pc, #20]	@ (8006874 <fiprintf+0x20>)
 800685e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006862:	6800      	ldr	r0, [r0, #0]
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	f000 f847 	bl	80068f8 <_vfiprintf_r>
 800686a:	b002      	add	sp, #8
 800686c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006870:	b003      	add	sp, #12
 8006872:	4770      	bx	lr
 8006874:	2000001c 	.word	0x2000001c

08006878 <_sbrk_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	4d06      	ldr	r5, [pc, #24]	@ (8006894 <_sbrk_r+0x1c>)
 800687c:	2300      	movs	r3, #0
 800687e:	4604      	mov	r4, r0
 8006880:	4608      	mov	r0, r1
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	f7fa fa26 	bl	8000cd4 <_sbrk>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_sbrk_r+0x1a>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	b103      	cbz	r3, 8006892 <_sbrk_r+0x1a>
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	200012c8 	.word	0x200012c8

08006898 <abort>:
 8006898:	b508      	push	{r3, lr}
 800689a:	2006      	movs	r0, #6
 800689c:	f000 fb8e 	bl	8006fbc <raise>
 80068a0:	2001      	movs	r0, #1
 80068a2:	f7fa f99f 	bl	8000be4 <_exit>

080068a6 <__sfputc_r>:
 80068a6:	6893      	ldr	r3, [r2, #8]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	b410      	push	{r4}
 80068ae:	6093      	str	r3, [r2, #8]
 80068b0:	da08      	bge.n	80068c4 <__sfputc_r+0x1e>
 80068b2:	6994      	ldr	r4, [r2, #24]
 80068b4:	42a3      	cmp	r3, r4
 80068b6:	db01      	blt.n	80068bc <__sfputc_r+0x16>
 80068b8:	290a      	cmp	r1, #10
 80068ba:	d103      	bne.n	80068c4 <__sfputc_r+0x1e>
 80068bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068c0:	f000 bac0 	b.w	8006e44 <__swbuf_r>
 80068c4:	6813      	ldr	r3, [r2, #0]
 80068c6:	1c58      	adds	r0, r3, #1
 80068c8:	6010      	str	r0, [r2, #0]
 80068ca:	7019      	strb	r1, [r3, #0]
 80068cc:	4608      	mov	r0, r1
 80068ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <__sfputs_r>:
 80068d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d6:	4606      	mov	r6, r0
 80068d8:	460f      	mov	r7, r1
 80068da:	4614      	mov	r4, r2
 80068dc:	18d5      	adds	r5, r2, r3
 80068de:	42ac      	cmp	r4, r5
 80068e0:	d101      	bne.n	80068e6 <__sfputs_r+0x12>
 80068e2:	2000      	movs	r0, #0
 80068e4:	e007      	b.n	80068f6 <__sfputs_r+0x22>
 80068e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ea:	463a      	mov	r2, r7
 80068ec:	4630      	mov	r0, r6
 80068ee:	f7ff ffda 	bl	80068a6 <__sfputc_r>
 80068f2:	1c43      	adds	r3, r0, #1
 80068f4:	d1f3      	bne.n	80068de <__sfputs_r+0xa>
 80068f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080068f8 <_vfiprintf_r>:
 80068f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	460d      	mov	r5, r1
 80068fe:	b09d      	sub	sp, #116	@ 0x74
 8006900:	4614      	mov	r4, r2
 8006902:	4698      	mov	r8, r3
 8006904:	4606      	mov	r6, r0
 8006906:	b118      	cbz	r0, 8006910 <_vfiprintf_r+0x18>
 8006908:	6a03      	ldr	r3, [r0, #32]
 800690a:	b90b      	cbnz	r3, 8006910 <_vfiprintf_r+0x18>
 800690c:	f7ff fc7e 	bl	800620c <__sinit>
 8006910:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006912:	07d9      	lsls	r1, r3, #31
 8006914:	d405      	bmi.n	8006922 <_vfiprintf_r+0x2a>
 8006916:	89ab      	ldrh	r3, [r5, #12]
 8006918:	059a      	lsls	r2, r3, #22
 800691a:	d402      	bmi.n	8006922 <_vfiprintf_r+0x2a>
 800691c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800691e:	f7ff fdbe 	bl	800649e <__retarget_lock_acquire_recursive>
 8006922:	89ab      	ldrh	r3, [r5, #12]
 8006924:	071b      	lsls	r3, r3, #28
 8006926:	d501      	bpl.n	800692c <_vfiprintf_r+0x34>
 8006928:	692b      	ldr	r3, [r5, #16]
 800692a:	b99b      	cbnz	r3, 8006954 <_vfiprintf_r+0x5c>
 800692c:	4629      	mov	r1, r5
 800692e:	4630      	mov	r0, r6
 8006930:	f000 fac6 	bl	8006ec0 <__swsetup_r>
 8006934:	b170      	cbz	r0, 8006954 <_vfiprintf_r+0x5c>
 8006936:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006938:	07dc      	lsls	r4, r3, #31
 800693a:	d504      	bpl.n	8006946 <_vfiprintf_r+0x4e>
 800693c:	f04f 30ff 	mov.w	r0, #4294967295
 8006940:	b01d      	add	sp, #116	@ 0x74
 8006942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006946:	89ab      	ldrh	r3, [r5, #12]
 8006948:	0598      	lsls	r0, r3, #22
 800694a:	d4f7      	bmi.n	800693c <_vfiprintf_r+0x44>
 800694c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800694e:	f7ff fda7 	bl	80064a0 <__retarget_lock_release_recursive>
 8006952:	e7f3      	b.n	800693c <_vfiprintf_r+0x44>
 8006954:	2300      	movs	r3, #0
 8006956:	9309      	str	r3, [sp, #36]	@ 0x24
 8006958:	2320      	movs	r3, #32
 800695a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800695e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006962:	2330      	movs	r3, #48	@ 0x30
 8006964:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006b14 <_vfiprintf_r+0x21c>
 8006968:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800696c:	f04f 0901 	mov.w	r9, #1
 8006970:	4623      	mov	r3, r4
 8006972:	469a      	mov	sl, r3
 8006974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006978:	b10a      	cbz	r2, 800697e <_vfiprintf_r+0x86>
 800697a:	2a25      	cmp	r2, #37	@ 0x25
 800697c:	d1f9      	bne.n	8006972 <_vfiprintf_r+0x7a>
 800697e:	ebba 0b04 	subs.w	fp, sl, r4
 8006982:	d00b      	beq.n	800699c <_vfiprintf_r+0xa4>
 8006984:	465b      	mov	r3, fp
 8006986:	4622      	mov	r2, r4
 8006988:	4629      	mov	r1, r5
 800698a:	4630      	mov	r0, r6
 800698c:	f7ff ffa2 	bl	80068d4 <__sfputs_r>
 8006990:	3001      	adds	r0, #1
 8006992:	f000 80a7 	beq.w	8006ae4 <_vfiprintf_r+0x1ec>
 8006996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006998:	445a      	add	r2, fp
 800699a:	9209      	str	r2, [sp, #36]	@ 0x24
 800699c:	f89a 3000 	ldrb.w	r3, [sl]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 809f 	beq.w	8006ae4 <_vfiprintf_r+0x1ec>
 80069a6:	2300      	movs	r3, #0
 80069a8:	f04f 32ff 	mov.w	r2, #4294967295
 80069ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069b0:	f10a 0a01 	add.w	sl, sl, #1
 80069b4:	9304      	str	r3, [sp, #16]
 80069b6:	9307      	str	r3, [sp, #28]
 80069b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80069bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80069be:	4654      	mov	r4, sl
 80069c0:	2205      	movs	r2, #5
 80069c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069c6:	4853      	ldr	r0, [pc, #332]	@ (8006b14 <_vfiprintf_r+0x21c>)
 80069c8:	f7f9 fc2a 	bl	8000220 <memchr>
 80069cc:	9a04      	ldr	r2, [sp, #16]
 80069ce:	b9d8      	cbnz	r0, 8006a08 <_vfiprintf_r+0x110>
 80069d0:	06d1      	lsls	r1, r2, #27
 80069d2:	bf44      	itt	mi
 80069d4:	2320      	movmi	r3, #32
 80069d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069da:	0713      	lsls	r3, r2, #28
 80069dc:	bf44      	itt	mi
 80069de:	232b      	movmi	r3, #43	@ 0x2b
 80069e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069e4:	f89a 3000 	ldrb.w	r3, [sl]
 80069e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80069ea:	d015      	beq.n	8006a18 <_vfiprintf_r+0x120>
 80069ec:	9a07      	ldr	r2, [sp, #28]
 80069ee:	4654      	mov	r4, sl
 80069f0:	2000      	movs	r0, #0
 80069f2:	f04f 0c0a 	mov.w	ip, #10
 80069f6:	4621      	mov	r1, r4
 80069f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069fc:	3b30      	subs	r3, #48	@ 0x30
 80069fe:	2b09      	cmp	r3, #9
 8006a00:	d94b      	bls.n	8006a9a <_vfiprintf_r+0x1a2>
 8006a02:	b1b0      	cbz	r0, 8006a32 <_vfiprintf_r+0x13a>
 8006a04:	9207      	str	r2, [sp, #28]
 8006a06:	e014      	b.n	8006a32 <_vfiprintf_r+0x13a>
 8006a08:	eba0 0308 	sub.w	r3, r0, r8
 8006a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8006a10:	4313      	orrs	r3, r2
 8006a12:	9304      	str	r3, [sp, #16]
 8006a14:	46a2      	mov	sl, r4
 8006a16:	e7d2      	b.n	80069be <_vfiprintf_r+0xc6>
 8006a18:	9b03      	ldr	r3, [sp, #12]
 8006a1a:	1d19      	adds	r1, r3, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	9103      	str	r1, [sp, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	bfbb      	ittet	lt
 8006a24:	425b      	neglt	r3, r3
 8006a26:	f042 0202 	orrlt.w	r2, r2, #2
 8006a2a:	9307      	strge	r3, [sp, #28]
 8006a2c:	9307      	strlt	r3, [sp, #28]
 8006a2e:	bfb8      	it	lt
 8006a30:	9204      	strlt	r2, [sp, #16]
 8006a32:	7823      	ldrb	r3, [r4, #0]
 8006a34:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a36:	d10a      	bne.n	8006a4e <_vfiprintf_r+0x156>
 8006a38:	7863      	ldrb	r3, [r4, #1]
 8006a3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a3c:	d132      	bne.n	8006aa4 <_vfiprintf_r+0x1ac>
 8006a3e:	9b03      	ldr	r3, [sp, #12]
 8006a40:	1d1a      	adds	r2, r3, #4
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	9203      	str	r2, [sp, #12]
 8006a46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a4a:	3402      	adds	r4, #2
 8006a4c:	9305      	str	r3, [sp, #20]
 8006a4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006b24 <_vfiprintf_r+0x22c>
 8006a52:	7821      	ldrb	r1, [r4, #0]
 8006a54:	2203      	movs	r2, #3
 8006a56:	4650      	mov	r0, sl
 8006a58:	f7f9 fbe2 	bl	8000220 <memchr>
 8006a5c:	b138      	cbz	r0, 8006a6e <_vfiprintf_r+0x176>
 8006a5e:	9b04      	ldr	r3, [sp, #16]
 8006a60:	eba0 000a 	sub.w	r0, r0, sl
 8006a64:	2240      	movs	r2, #64	@ 0x40
 8006a66:	4082      	lsls	r2, r0
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	3401      	adds	r4, #1
 8006a6c:	9304      	str	r3, [sp, #16]
 8006a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a72:	4829      	ldr	r0, [pc, #164]	@ (8006b18 <_vfiprintf_r+0x220>)
 8006a74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a78:	2206      	movs	r2, #6
 8006a7a:	f7f9 fbd1 	bl	8000220 <memchr>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d03f      	beq.n	8006b02 <_vfiprintf_r+0x20a>
 8006a82:	4b26      	ldr	r3, [pc, #152]	@ (8006b1c <_vfiprintf_r+0x224>)
 8006a84:	bb1b      	cbnz	r3, 8006ace <_vfiprintf_r+0x1d6>
 8006a86:	9b03      	ldr	r3, [sp, #12]
 8006a88:	3307      	adds	r3, #7
 8006a8a:	f023 0307 	bic.w	r3, r3, #7
 8006a8e:	3308      	adds	r3, #8
 8006a90:	9303      	str	r3, [sp, #12]
 8006a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a94:	443b      	add	r3, r7
 8006a96:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a98:	e76a      	b.n	8006970 <_vfiprintf_r+0x78>
 8006a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	2001      	movs	r0, #1
 8006aa2:	e7a8      	b.n	80069f6 <_vfiprintf_r+0xfe>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	3401      	adds	r4, #1
 8006aa8:	9305      	str	r3, [sp, #20]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	f04f 0c0a 	mov.w	ip, #10
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ab6:	3a30      	subs	r2, #48	@ 0x30
 8006ab8:	2a09      	cmp	r2, #9
 8006aba:	d903      	bls.n	8006ac4 <_vfiprintf_r+0x1cc>
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0c6      	beq.n	8006a4e <_vfiprintf_r+0x156>
 8006ac0:	9105      	str	r1, [sp, #20]
 8006ac2:	e7c4      	b.n	8006a4e <_vfiprintf_r+0x156>
 8006ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ac8:	4604      	mov	r4, r0
 8006aca:	2301      	movs	r3, #1
 8006acc:	e7f0      	b.n	8006ab0 <_vfiprintf_r+0x1b8>
 8006ace:	ab03      	add	r3, sp, #12
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	462a      	mov	r2, r5
 8006ad4:	4b12      	ldr	r3, [pc, #72]	@ (8006b20 <_vfiprintf_r+0x228>)
 8006ad6:	a904      	add	r1, sp, #16
 8006ad8:	4630      	mov	r0, r6
 8006ada:	f3af 8000 	nop.w
 8006ade:	4607      	mov	r7, r0
 8006ae0:	1c78      	adds	r0, r7, #1
 8006ae2:	d1d6      	bne.n	8006a92 <_vfiprintf_r+0x19a>
 8006ae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ae6:	07d9      	lsls	r1, r3, #31
 8006ae8:	d405      	bmi.n	8006af6 <_vfiprintf_r+0x1fe>
 8006aea:	89ab      	ldrh	r3, [r5, #12]
 8006aec:	059a      	lsls	r2, r3, #22
 8006aee:	d402      	bmi.n	8006af6 <_vfiprintf_r+0x1fe>
 8006af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006af2:	f7ff fcd5 	bl	80064a0 <__retarget_lock_release_recursive>
 8006af6:	89ab      	ldrh	r3, [r5, #12]
 8006af8:	065b      	lsls	r3, r3, #25
 8006afa:	f53f af1f 	bmi.w	800693c <_vfiprintf_r+0x44>
 8006afe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b00:	e71e      	b.n	8006940 <_vfiprintf_r+0x48>
 8006b02:	ab03      	add	r3, sp, #12
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	462a      	mov	r2, r5
 8006b08:	4b05      	ldr	r3, [pc, #20]	@ (8006b20 <_vfiprintf_r+0x228>)
 8006b0a:	a904      	add	r1, sp, #16
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	f000 f879 	bl	8006c04 <_printf_i>
 8006b12:	e7e4      	b.n	8006ade <_vfiprintf_r+0x1e6>
 8006b14:	0800725f 	.word	0x0800725f
 8006b18:	08007269 	.word	0x08007269
 8006b1c:	00000000 	.word	0x00000000
 8006b20:	080068d5 	.word	0x080068d5
 8006b24:	08007265 	.word	0x08007265

08006b28 <_printf_common>:
 8006b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b2c:	4616      	mov	r6, r2
 8006b2e:	4698      	mov	r8, r3
 8006b30:	688a      	ldr	r2, [r1, #8]
 8006b32:	690b      	ldr	r3, [r1, #16]
 8006b34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	bfb8      	it	lt
 8006b3c:	4613      	movlt	r3, r2
 8006b3e:	6033      	str	r3, [r6, #0]
 8006b40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b44:	4607      	mov	r7, r0
 8006b46:	460c      	mov	r4, r1
 8006b48:	b10a      	cbz	r2, 8006b4e <_printf_common+0x26>
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	6033      	str	r3, [r6, #0]
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	0699      	lsls	r1, r3, #26
 8006b52:	bf42      	ittt	mi
 8006b54:	6833      	ldrmi	r3, [r6, #0]
 8006b56:	3302      	addmi	r3, #2
 8006b58:	6033      	strmi	r3, [r6, #0]
 8006b5a:	6825      	ldr	r5, [r4, #0]
 8006b5c:	f015 0506 	ands.w	r5, r5, #6
 8006b60:	d106      	bne.n	8006b70 <_printf_common+0x48>
 8006b62:	f104 0a19 	add.w	sl, r4, #25
 8006b66:	68e3      	ldr	r3, [r4, #12]
 8006b68:	6832      	ldr	r2, [r6, #0]
 8006b6a:	1a9b      	subs	r3, r3, r2
 8006b6c:	42ab      	cmp	r3, r5
 8006b6e:	dc26      	bgt.n	8006bbe <_printf_common+0x96>
 8006b70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b74:	6822      	ldr	r2, [r4, #0]
 8006b76:	3b00      	subs	r3, #0
 8006b78:	bf18      	it	ne
 8006b7a:	2301      	movne	r3, #1
 8006b7c:	0692      	lsls	r2, r2, #26
 8006b7e:	d42b      	bmi.n	8006bd8 <_printf_common+0xb0>
 8006b80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b84:	4641      	mov	r1, r8
 8006b86:	4638      	mov	r0, r7
 8006b88:	47c8      	blx	r9
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	d01e      	beq.n	8006bcc <_printf_common+0xa4>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	6922      	ldr	r2, [r4, #16]
 8006b92:	f003 0306 	and.w	r3, r3, #6
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	bf02      	ittt	eq
 8006b9a:	68e5      	ldreq	r5, [r4, #12]
 8006b9c:	6833      	ldreq	r3, [r6, #0]
 8006b9e:	1aed      	subeq	r5, r5, r3
 8006ba0:	68a3      	ldr	r3, [r4, #8]
 8006ba2:	bf0c      	ite	eq
 8006ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ba8:	2500      	movne	r5, #0
 8006baa:	4293      	cmp	r3, r2
 8006bac:	bfc4      	itt	gt
 8006bae:	1a9b      	subgt	r3, r3, r2
 8006bb0:	18ed      	addgt	r5, r5, r3
 8006bb2:	2600      	movs	r6, #0
 8006bb4:	341a      	adds	r4, #26
 8006bb6:	42b5      	cmp	r5, r6
 8006bb8:	d11a      	bne.n	8006bf0 <_printf_common+0xc8>
 8006bba:	2000      	movs	r0, #0
 8006bbc:	e008      	b.n	8006bd0 <_printf_common+0xa8>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	4652      	mov	r2, sl
 8006bc2:	4641      	mov	r1, r8
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	47c8      	blx	r9
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d103      	bne.n	8006bd4 <_printf_common+0xac>
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd4:	3501      	adds	r5, #1
 8006bd6:	e7c6      	b.n	8006b66 <_printf_common+0x3e>
 8006bd8:	18e1      	adds	r1, r4, r3
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	2030      	movs	r0, #48	@ 0x30
 8006bde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006be2:	4422      	add	r2, r4
 8006be4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006be8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bec:	3302      	adds	r3, #2
 8006bee:	e7c7      	b.n	8006b80 <_printf_common+0x58>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	4622      	mov	r2, r4
 8006bf4:	4641      	mov	r1, r8
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	47c8      	blx	r9
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	d0e6      	beq.n	8006bcc <_printf_common+0xa4>
 8006bfe:	3601      	adds	r6, #1
 8006c00:	e7d9      	b.n	8006bb6 <_printf_common+0x8e>
	...

08006c04 <_printf_i>:
 8006c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c08:	7e0f      	ldrb	r7, [r1, #24]
 8006c0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c0c:	2f78      	cmp	r7, #120	@ 0x78
 8006c0e:	4691      	mov	r9, r2
 8006c10:	4680      	mov	r8, r0
 8006c12:	460c      	mov	r4, r1
 8006c14:	469a      	mov	sl, r3
 8006c16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c1a:	d807      	bhi.n	8006c2c <_printf_i+0x28>
 8006c1c:	2f62      	cmp	r7, #98	@ 0x62
 8006c1e:	d80a      	bhi.n	8006c36 <_printf_i+0x32>
 8006c20:	2f00      	cmp	r7, #0
 8006c22:	f000 80d2 	beq.w	8006dca <_printf_i+0x1c6>
 8006c26:	2f58      	cmp	r7, #88	@ 0x58
 8006c28:	f000 80b9 	beq.w	8006d9e <_printf_i+0x19a>
 8006c2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c34:	e03a      	b.n	8006cac <_printf_i+0xa8>
 8006c36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c3a:	2b15      	cmp	r3, #21
 8006c3c:	d8f6      	bhi.n	8006c2c <_printf_i+0x28>
 8006c3e:	a101      	add	r1, pc, #4	@ (adr r1, 8006c44 <_printf_i+0x40>)
 8006c40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c44:	08006c9d 	.word	0x08006c9d
 8006c48:	08006cb1 	.word	0x08006cb1
 8006c4c:	08006c2d 	.word	0x08006c2d
 8006c50:	08006c2d 	.word	0x08006c2d
 8006c54:	08006c2d 	.word	0x08006c2d
 8006c58:	08006c2d 	.word	0x08006c2d
 8006c5c:	08006cb1 	.word	0x08006cb1
 8006c60:	08006c2d 	.word	0x08006c2d
 8006c64:	08006c2d 	.word	0x08006c2d
 8006c68:	08006c2d 	.word	0x08006c2d
 8006c6c:	08006c2d 	.word	0x08006c2d
 8006c70:	08006db1 	.word	0x08006db1
 8006c74:	08006cdb 	.word	0x08006cdb
 8006c78:	08006d6b 	.word	0x08006d6b
 8006c7c:	08006c2d 	.word	0x08006c2d
 8006c80:	08006c2d 	.word	0x08006c2d
 8006c84:	08006dd3 	.word	0x08006dd3
 8006c88:	08006c2d 	.word	0x08006c2d
 8006c8c:	08006cdb 	.word	0x08006cdb
 8006c90:	08006c2d 	.word	0x08006c2d
 8006c94:	08006c2d 	.word	0x08006c2d
 8006c98:	08006d73 	.word	0x08006d73
 8006c9c:	6833      	ldr	r3, [r6, #0]
 8006c9e:	1d1a      	adds	r2, r3, #4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6032      	str	r2, [r6, #0]
 8006ca4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ca8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006cac:	2301      	movs	r3, #1
 8006cae:	e09d      	b.n	8006dec <_printf_i+0x1e8>
 8006cb0:	6833      	ldr	r3, [r6, #0]
 8006cb2:	6820      	ldr	r0, [r4, #0]
 8006cb4:	1d19      	adds	r1, r3, #4
 8006cb6:	6031      	str	r1, [r6, #0]
 8006cb8:	0606      	lsls	r6, r0, #24
 8006cba:	d501      	bpl.n	8006cc0 <_printf_i+0xbc>
 8006cbc:	681d      	ldr	r5, [r3, #0]
 8006cbe:	e003      	b.n	8006cc8 <_printf_i+0xc4>
 8006cc0:	0645      	lsls	r5, r0, #25
 8006cc2:	d5fb      	bpl.n	8006cbc <_printf_i+0xb8>
 8006cc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cc8:	2d00      	cmp	r5, #0
 8006cca:	da03      	bge.n	8006cd4 <_printf_i+0xd0>
 8006ccc:	232d      	movs	r3, #45	@ 0x2d
 8006cce:	426d      	negs	r5, r5
 8006cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cd4:	4859      	ldr	r0, [pc, #356]	@ (8006e3c <_printf_i+0x238>)
 8006cd6:	230a      	movs	r3, #10
 8006cd8:	e011      	b.n	8006cfe <_printf_i+0xfa>
 8006cda:	6821      	ldr	r1, [r4, #0]
 8006cdc:	6833      	ldr	r3, [r6, #0]
 8006cde:	0608      	lsls	r0, r1, #24
 8006ce0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ce4:	d402      	bmi.n	8006cec <_printf_i+0xe8>
 8006ce6:	0649      	lsls	r1, r1, #25
 8006ce8:	bf48      	it	mi
 8006cea:	b2ad      	uxthmi	r5, r5
 8006cec:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cee:	4853      	ldr	r0, [pc, #332]	@ (8006e3c <_printf_i+0x238>)
 8006cf0:	6033      	str	r3, [r6, #0]
 8006cf2:	bf14      	ite	ne
 8006cf4:	230a      	movne	r3, #10
 8006cf6:	2308      	moveq	r3, #8
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cfe:	6866      	ldr	r6, [r4, #4]
 8006d00:	60a6      	str	r6, [r4, #8]
 8006d02:	2e00      	cmp	r6, #0
 8006d04:	bfa2      	ittt	ge
 8006d06:	6821      	ldrge	r1, [r4, #0]
 8006d08:	f021 0104 	bicge.w	r1, r1, #4
 8006d0c:	6021      	strge	r1, [r4, #0]
 8006d0e:	b90d      	cbnz	r5, 8006d14 <_printf_i+0x110>
 8006d10:	2e00      	cmp	r6, #0
 8006d12:	d04b      	beq.n	8006dac <_printf_i+0x1a8>
 8006d14:	4616      	mov	r6, r2
 8006d16:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d1a:	fb03 5711 	mls	r7, r3, r1, r5
 8006d1e:	5dc7      	ldrb	r7, [r0, r7]
 8006d20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d24:	462f      	mov	r7, r5
 8006d26:	42bb      	cmp	r3, r7
 8006d28:	460d      	mov	r5, r1
 8006d2a:	d9f4      	bls.n	8006d16 <_printf_i+0x112>
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	d10b      	bne.n	8006d48 <_printf_i+0x144>
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	07df      	lsls	r7, r3, #31
 8006d34:	d508      	bpl.n	8006d48 <_printf_i+0x144>
 8006d36:	6923      	ldr	r3, [r4, #16]
 8006d38:	6861      	ldr	r1, [r4, #4]
 8006d3a:	4299      	cmp	r1, r3
 8006d3c:	bfde      	ittt	le
 8006d3e:	2330      	movle	r3, #48	@ 0x30
 8006d40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d48:	1b92      	subs	r2, r2, r6
 8006d4a:	6122      	str	r2, [r4, #16]
 8006d4c:	f8cd a000 	str.w	sl, [sp]
 8006d50:	464b      	mov	r3, r9
 8006d52:	aa03      	add	r2, sp, #12
 8006d54:	4621      	mov	r1, r4
 8006d56:	4640      	mov	r0, r8
 8006d58:	f7ff fee6 	bl	8006b28 <_printf_common>
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d14a      	bne.n	8006df6 <_printf_i+0x1f2>
 8006d60:	f04f 30ff 	mov.w	r0, #4294967295
 8006d64:	b004      	add	sp, #16
 8006d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	f043 0320 	orr.w	r3, r3, #32
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	4833      	ldr	r0, [pc, #204]	@ (8006e40 <_printf_i+0x23c>)
 8006d74:	2778      	movs	r7, #120	@ 0x78
 8006d76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	6831      	ldr	r1, [r6, #0]
 8006d7e:	061f      	lsls	r7, r3, #24
 8006d80:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d84:	d402      	bmi.n	8006d8c <_printf_i+0x188>
 8006d86:	065f      	lsls	r7, r3, #25
 8006d88:	bf48      	it	mi
 8006d8a:	b2ad      	uxthmi	r5, r5
 8006d8c:	6031      	str	r1, [r6, #0]
 8006d8e:	07d9      	lsls	r1, r3, #31
 8006d90:	bf44      	itt	mi
 8006d92:	f043 0320 	orrmi.w	r3, r3, #32
 8006d96:	6023      	strmi	r3, [r4, #0]
 8006d98:	b11d      	cbz	r5, 8006da2 <_printf_i+0x19e>
 8006d9a:	2310      	movs	r3, #16
 8006d9c:	e7ac      	b.n	8006cf8 <_printf_i+0xf4>
 8006d9e:	4827      	ldr	r0, [pc, #156]	@ (8006e3c <_printf_i+0x238>)
 8006da0:	e7e9      	b.n	8006d76 <_printf_i+0x172>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	f023 0320 	bic.w	r3, r3, #32
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	e7f6      	b.n	8006d9a <_printf_i+0x196>
 8006dac:	4616      	mov	r6, r2
 8006dae:	e7bd      	b.n	8006d2c <_printf_i+0x128>
 8006db0:	6833      	ldr	r3, [r6, #0]
 8006db2:	6825      	ldr	r5, [r4, #0]
 8006db4:	6961      	ldr	r1, [r4, #20]
 8006db6:	1d18      	adds	r0, r3, #4
 8006db8:	6030      	str	r0, [r6, #0]
 8006dba:	062e      	lsls	r6, r5, #24
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	d501      	bpl.n	8006dc4 <_printf_i+0x1c0>
 8006dc0:	6019      	str	r1, [r3, #0]
 8006dc2:	e002      	b.n	8006dca <_printf_i+0x1c6>
 8006dc4:	0668      	lsls	r0, r5, #25
 8006dc6:	d5fb      	bpl.n	8006dc0 <_printf_i+0x1bc>
 8006dc8:	8019      	strh	r1, [r3, #0]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	6123      	str	r3, [r4, #16]
 8006dce:	4616      	mov	r6, r2
 8006dd0:	e7bc      	b.n	8006d4c <_printf_i+0x148>
 8006dd2:	6833      	ldr	r3, [r6, #0]
 8006dd4:	1d1a      	adds	r2, r3, #4
 8006dd6:	6032      	str	r2, [r6, #0]
 8006dd8:	681e      	ldr	r6, [r3, #0]
 8006dda:	6862      	ldr	r2, [r4, #4]
 8006ddc:	2100      	movs	r1, #0
 8006dde:	4630      	mov	r0, r6
 8006de0:	f7f9 fa1e 	bl	8000220 <memchr>
 8006de4:	b108      	cbz	r0, 8006dea <_printf_i+0x1e6>
 8006de6:	1b80      	subs	r0, r0, r6
 8006de8:	6060      	str	r0, [r4, #4]
 8006dea:	6863      	ldr	r3, [r4, #4]
 8006dec:	6123      	str	r3, [r4, #16]
 8006dee:	2300      	movs	r3, #0
 8006df0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006df4:	e7aa      	b.n	8006d4c <_printf_i+0x148>
 8006df6:	6923      	ldr	r3, [r4, #16]
 8006df8:	4632      	mov	r2, r6
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	47d0      	blx	sl
 8006e00:	3001      	adds	r0, #1
 8006e02:	d0ad      	beq.n	8006d60 <_printf_i+0x15c>
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	079b      	lsls	r3, r3, #30
 8006e08:	d413      	bmi.n	8006e32 <_printf_i+0x22e>
 8006e0a:	68e0      	ldr	r0, [r4, #12]
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	4298      	cmp	r0, r3
 8006e10:	bfb8      	it	lt
 8006e12:	4618      	movlt	r0, r3
 8006e14:	e7a6      	b.n	8006d64 <_printf_i+0x160>
 8006e16:	2301      	movs	r3, #1
 8006e18:	4632      	mov	r2, r6
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	47d0      	blx	sl
 8006e20:	3001      	adds	r0, #1
 8006e22:	d09d      	beq.n	8006d60 <_printf_i+0x15c>
 8006e24:	3501      	adds	r5, #1
 8006e26:	68e3      	ldr	r3, [r4, #12]
 8006e28:	9903      	ldr	r1, [sp, #12]
 8006e2a:	1a5b      	subs	r3, r3, r1
 8006e2c:	42ab      	cmp	r3, r5
 8006e2e:	dcf2      	bgt.n	8006e16 <_printf_i+0x212>
 8006e30:	e7eb      	b.n	8006e0a <_printf_i+0x206>
 8006e32:	2500      	movs	r5, #0
 8006e34:	f104 0619 	add.w	r6, r4, #25
 8006e38:	e7f5      	b.n	8006e26 <_printf_i+0x222>
 8006e3a:	bf00      	nop
 8006e3c:	08007270 	.word	0x08007270
 8006e40:	08007281 	.word	0x08007281

08006e44 <__swbuf_r>:
 8006e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e46:	460e      	mov	r6, r1
 8006e48:	4614      	mov	r4, r2
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	b118      	cbz	r0, 8006e56 <__swbuf_r+0x12>
 8006e4e:	6a03      	ldr	r3, [r0, #32]
 8006e50:	b90b      	cbnz	r3, 8006e56 <__swbuf_r+0x12>
 8006e52:	f7ff f9db 	bl	800620c <__sinit>
 8006e56:	69a3      	ldr	r3, [r4, #24]
 8006e58:	60a3      	str	r3, [r4, #8]
 8006e5a:	89a3      	ldrh	r3, [r4, #12]
 8006e5c:	071a      	lsls	r2, r3, #28
 8006e5e:	d501      	bpl.n	8006e64 <__swbuf_r+0x20>
 8006e60:	6923      	ldr	r3, [r4, #16]
 8006e62:	b943      	cbnz	r3, 8006e76 <__swbuf_r+0x32>
 8006e64:	4621      	mov	r1, r4
 8006e66:	4628      	mov	r0, r5
 8006e68:	f000 f82a 	bl	8006ec0 <__swsetup_r>
 8006e6c:	b118      	cbz	r0, 8006e76 <__swbuf_r+0x32>
 8006e6e:	f04f 37ff 	mov.w	r7, #4294967295
 8006e72:	4638      	mov	r0, r7
 8006e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	6922      	ldr	r2, [r4, #16]
 8006e7a:	1a98      	subs	r0, r3, r2
 8006e7c:	6963      	ldr	r3, [r4, #20]
 8006e7e:	b2f6      	uxtb	r6, r6
 8006e80:	4283      	cmp	r3, r0
 8006e82:	4637      	mov	r7, r6
 8006e84:	dc05      	bgt.n	8006e92 <__swbuf_r+0x4e>
 8006e86:	4621      	mov	r1, r4
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f7ff fcbb 	bl	8006804 <_fflush_r>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d1ed      	bne.n	8006e6e <__swbuf_r+0x2a>
 8006e92:	68a3      	ldr	r3, [r4, #8]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	60a3      	str	r3, [r4, #8]
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	6022      	str	r2, [r4, #0]
 8006e9e:	701e      	strb	r6, [r3, #0]
 8006ea0:	6962      	ldr	r2, [r4, #20]
 8006ea2:	1c43      	adds	r3, r0, #1
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d004      	beq.n	8006eb2 <__swbuf_r+0x6e>
 8006ea8:	89a3      	ldrh	r3, [r4, #12]
 8006eaa:	07db      	lsls	r3, r3, #31
 8006eac:	d5e1      	bpl.n	8006e72 <__swbuf_r+0x2e>
 8006eae:	2e0a      	cmp	r6, #10
 8006eb0:	d1df      	bne.n	8006e72 <__swbuf_r+0x2e>
 8006eb2:	4621      	mov	r1, r4
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	f7ff fca5 	bl	8006804 <_fflush_r>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d0d9      	beq.n	8006e72 <__swbuf_r+0x2e>
 8006ebe:	e7d6      	b.n	8006e6e <__swbuf_r+0x2a>

08006ec0 <__swsetup_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	4b29      	ldr	r3, [pc, #164]	@ (8006f68 <__swsetup_r+0xa8>)
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	460c      	mov	r4, r1
 8006eca:	b118      	cbz	r0, 8006ed4 <__swsetup_r+0x14>
 8006ecc:	6a03      	ldr	r3, [r0, #32]
 8006ece:	b90b      	cbnz	r3, 8006ed4 <__swsetup_r+0x14>
 8006ed0:	f7ff f99c 	bl	800620c <__sinit>
 8006ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ed8:	0719      	lsls	r1, r3, #28
 8006eda:	d422      	bmi.n	8006f22 <__swsetup_r+0x62>
 8006edc:	06da      	lsls	r2, r3, #27
 8006ede:	d407      	bmi.n	8006ef0 <__swsetup_r+0x30>
 8006ee0:	2209      	movs	r2, #9
 8006ee2:	602a      	str	r2, [r5, #0]
 8006ee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ee8:	81a3      	strh	r3, [r4, #12]
 8006eea:	f04f 30ff 	mov.w	r0, #4294967295
 8006eee:	e033      	b.n	8006f58 <__swsetup_r+0x98>
 8006ef0:	0758      	lsls	r0, r3, #29
 8006ef2:	d512      	bpl.n	8006f1a <__swsetup_r+0x5a>
 8006ef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ef6:	b141      	cbz	r1, 8006f0a <__swsetup_r+0x4a>
 8006ef8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006efc:	4299      	cmp	r1, r3
 8006efe:	d002      	beq.n	8006f06 <__swsetup_r+0x46>
 8006f00:	4628      	mov	r0, r5
 8006f02:	f7ff fafb 	bl	80064fc <_free_r>
 8006f06:	2300      	movs	r3, #0
 8006f08:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f0a:	89a3      	ldrh	r3, [r4, #12]
 8006f0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f10:	81a3      	strh	r3, [r4, #12]
 8006f12:	2300      	movs	r3, #0
 8006f14:	6063      	str	r3, [r4, #4]
 8006f16:	6923      	ldr	r3, [r4, #16]
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	89a3      	ldrh	r3, [r4, #12]
 8006f1c:	f043 0308 	orr.w	r3, r3, #8
 8006f20:	81a3      	strh	r3, [r4, #12]
 8006f22:	6923      	ldr	r3, [r4, #16]
 8006f24:	b94b      	cbnz	r3, 8006f3a <__swsetup_r+0x7a>
 8006f26:	89a3      	ldrh	r3, [r4, #12]
 8006f28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f30:	d003      	beq.n	8006f3a <__swsetup_r+0x7a>
 8006f32:	4621      	mov	r1, r4
 8006f34:	4628      	mov	r0, r5
 8006f36:	f000 f883 	bl	8007040 <__smakebuf_r>
 8006f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f3e:	f013 0201 	ands.w	r2, r3, #1
 8006f42:	d00a      	beq.n	8006f5a <__swsetup_r+0x9a>
 8006f44:	2200      	movs	r2, #0
 8006f46:	60a2      	str	r2, [r4, #8]
 8006f48:	6962      	ldr	r2, [r4, #20]
 8006f4a:	4252      	negs	r2, r2
 8006f4c:	61a2      	str	r2, [r4, #24]
 8006f4e:	6922      	ldr	r2, [r4, #16]
 8006f50:	b942      	cbnz	r2, 8006f64 <__swsetup_r+0xa4>
 8006f52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f56:	d1c5      	bne.n	8006ee4 <__swsetup_r+0x24>
 8006f58:	bd38      	pop	{r3, r4, r5, pc}
 8006f5a:	0799      	lsls	r1, r3, #30
 8006f5c:	bf58      	it	pl
 8006f5e:	6962      	ldrpl	r2, [r4, #20]
 8006f60:	60a2      	str	r2, [r4, #8]
 8006f62:	e7f4      	b.n	8006f4e <__swsetup_r+0x8e>
 8006f64:	2000      	movs	r0, #0
 8006f66:	e7f7      	b.n	8006f58 <__swsetup_r+0x98>
 8006f68:	2000001c 	.word	0x2000001c

08006f6c <_raise_r>:
 8006f6c:	291f      	cmp	r1, #31
 8006f6e:	b538      	push	{r3, r4, r5, lr}
 8006f70:	4605      	mov	r5, r0
 8006f72:	460c      	mov	r4, r1
 8006f74:	d904      	bls.n	8006f80 <_raise_r+0x14>
 8006f76:	2316      	movs	r3, #22
 8006f78:	6003      	str	r3, [r0, #0]
 8006f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006f82:	b112      	cbz	r2, 8006f8a <_raise_r+0x1e>
 8006f84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f88:	b94b      	cbnz	r3, 8006f9e <_raise_r+0x32>
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	f000 f830 	bl	8006ff0 <_getpid_r>
 8006f90:	4622      	mov	r2, r4
 8006f92:	4601      	mov	r1, r0
 8006f94:	4628      	mov	r0, r5
 8006f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f9a:	f000 b817 	b.w	8006fcc <_kill_r>
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d00a      	beq.n	8006fb8 <_raise_r+0x4c>
 8006fa2:	1c59      	adds	r1, r3, #1
 8006fa4:	d103      	bne.n	8006fae <_raise_r+0x42>
 8006fa6:	2316      	movs	r3, #22
 8006fa8:	6003      	str	r3, [r0, #0]
 8006faa:	2001      	movs	r0, #1
 8006fac:	e7e7      	b.n	8006f7e <_raise_r+0x12>
 8006fae:	2100      	movs	r1, #0
 8006fb0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	4798      	blx	r3
 8006fb8:	2000      	movs	r0, #0
 8006fba:	e7e0      	b.n	8006f7e <_raise_r+0x12>

08006fbc <raise>:
 8006fbc:	4b02      	ldr	r3, [pc, #8]	@ (8006fc8 <raise+0xc>)
 8006fbe:	4601      	mov	r1, r0
 8006fc0:	6818      	ldr	r0, [r3, #0]
 8006fc2:	f7ff bfd3 	b.w	8006f6c <_raise_r>
 8006fc6:	bf00      	nop
 8006fc8:	2000001c 	.word	0x2000001c

08006fcc <_kill_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4d07      	ldr	r5, [pc, #28]	@ (8006fec <_kill_r+0x20>)
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	4608      	mov	r0, r1
 8006fd6:	4611      	mov	r1, r2
 8006fd8:	602b      	str	r3, [r5, #0]
 8006fda:	f7f9 fdf3 	bl	8000bc4 <_kill>
 8006fde:	1c43      	adds	r3, r0, #1
 8006fe0:	d102      	bne.n	8006fe8 <_kill_r+0x1c>
 8006fe2:	682b      	ldr	r3, [r5, #0]
 8006fe4:	b103      	cbz	r3, 8006fe8 <_kill_r+0x1c>
 8006fe6:	6023      	str	r3, [r4, #0]
 8006fe8:	bd38      	pop	{r3, r4, r5, pc}
 8006fea:	bf00      	nop
 8006fec:	200012c8 	.word	0x200012c8

08006ff0 <_getpid_r>:
 8006ff0:	f7f9 bde0 	b.w	8000bb4 <_getpid>

08006ff4 <__swhatbuf_r>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	b096      	sub	sp, #88	@ 0x58
 8007000:	4615      	mov	r5, r2
 8007002:	461e      	mov	r6, r3
 8007004:	da0d      	bge.n	8007022 <__swhatbuf_r+0x2e>
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800700c:	f04f 0100 	mov.w	r1, #0
 8007010:	bf14      	ite	ne
 8007012:	2340      	movne	r3, #64	@ 0x40
 8007014:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007018:	2000      	movs	r0, #0
 800701a:	6031      	str	r1, [r6, #0]
 800701c:	602b      	str	r3, [r5, #0]
 800701e:	b016      	add	sp, #88	@ 0x58
 8007020:	bd70      	pop	{r4, r5, r6, pc}
 8007022:	466a      	mov	r2, sp
 8007024:	f000 f848 	bl	80070b8 <_fstat_r>
 8007028:	2800      	cmp	r0, #0
 800702a:	dbec      	blt.n	8007006 <__swhatbuf_r+0x12>
 800702c:	9901      	ldr	r1, [sp, #4]
 800702e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007032:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007036:	4259      	negs	r1, r3
 8007038:	4159      	adcs	r1, r3
 800703a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800703e:	e7eb      	b.n	8007018 <__swhatbuf_r+0x24>

08007040 <__smakebuf_r>:
 8007040:	898b      	ldrh	r3, [r1, #12]
 8007042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007044:	079d      	lsls	r5, r3, #30
 8007046:	4606      	mov	r6, r0
 8007048:	460c      	mov	r4, r1
 800704a:	d507      	bpl.n	800705c <__smakebuf_r+0x1c>
 800704c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	6123      	str	r3, [r4, #16]
 8007054:	2301      	movs	r3, #1
 8007056:	6163      	str	r3, [r4, #20]
 8007058:	b003      	add	sp, #12
 800705a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800705c:	ab01      	add	r3, sp, #4
 800705e:	466a      	mov	r2, sp
 8007060:	f7ff ffc8 	bl	8006ff4 <__swhatbuf_r>
 8007064:	9f00      	ldr	r7, [sp, #0]
 8007066:	4605      	mov	r5, r0
 8007068:	4639      	mov	r1, r7
 800706a:	4630      	mov	r0, r6
 800706c:	f7ff faba 	bl	80065e4 <_malloc_r>
 8007070:	b948      	cbnz	r0, 8007086 <__smakebuf_r+0x46>
 8007072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007076:	059a      	lsls	r2, r3, #22
 8007078:	d4ee      	bmi.n	8007058 <__smakebuf_r+0x18>
 800707a:	f023 0303 	bic.w	r3, r3, #3
 800707e:	f043 0302 	orr.w	r3, r3, #2
 8007082:	81a3      	strh	r3, [r4, #12]
 8007084:	e7e2      	b.n	800704c <__smakebuf_r+0xc>
 8007086:	89a3      	ldrh	r3, [r4, #12]
 8007088:	6020      	str	r0, [r4, #0]
 800708a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800708e:	81a3      	strh	r3, [r4, #12]
 8007090:	9b01      	ldr	r3, [sp, #4]
 8007092:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007096:	b15b      	cbz	r3, 80070b0 <__smakebuf_r+0x70>
 8007098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800709c:	4630      	mov	r0, r6
 800709e:	f000 f81d 	bl	80070dc <_isatty_r>
 80070a2:	b128      	cbz	r0, 80070b0 <__smakebuf_r+0x70>
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	f023 0303 	bic.w	r3, r3, #3
 80070aa:	f043 0301 	orr.w	r3, r3, #1
 80070ae:	81a3      	strh	r3, [r4, #12]
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	431d      	orrs	r5, r3
 80070b4:	81a5      	strh	r5, [r4, #12]
 80070b6:	e7cf      	b.n	8007058 <__smakebuf_r+0x18>

080070b8 <_fstat_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4d07      	ldr	r5, [pc, #28]	@ (80070d8 <_fstat_r+0x20>)
 80070bc:	2300      	movs	r3, #0
 80070be:	4604      	mov	r4, r0
 80070c0:	4608      	mov	r0, r1
 80070c2:	4611      	mov	r1, r2
 80070c4:	602b      	str	r3, [r5, #0]
 80070c6:	f7f9 fddd 	bl	8000c84 <_fstat>
 80070ca:	1c43      	adds	r3, r0, #1
 80070cc:	d102      	bne.n	80070d4 <_fstat_r+0x1c>
 80070ce:	682b      	ldr	r3, [r5, #0]
 80070d0:	b103      	cbz	r3, 80070d4 <_fstat_r+0x1c>
 80070d2:	6023      	str	r3, [r4, #0]
 80070d4:	bd38      	pop	{r3, r4, r5, pc}
 80070d6:	bf00      	nop
 80070d8:	200012c8 	.word	0x200012c8

080070dc <_isatty_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4d06      	ldr	r5, [pc, #24]	@ (80070f8 <_isatty_r+0x1c>)
 80070e0:	2300      	movs	r3, #0
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	602b      	str	r3, [r5, #0]
 80070e8:	f7f9 fddc 	bl	8000ca4 <_isatty>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d102      	bne.n	80070f6 <_isatty_r+0x1a>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	b103      	cbz	r3, 80070f6 <_isatty_r+0x1a>
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	200012c8 	.word	0x200012c8

080070fc <_init>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	bf00      	nop
 8007100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007102:	bc08      	pop	{r3}
 8007104:	469e      	mov	lr, r3
 8007106:	4770      	bx	lr

08007108 <_fini>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	bf00      	nop
 800710c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710e:	bc08      	pop	{r3}
 8007110:	469e      	mov	lr, r3
 8007112:	4770      	bx	lr
